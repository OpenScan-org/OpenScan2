[
    {
        "id": "e6f4d02efb300ea9",
        "type": "tab",
        "label": "Init",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "481edaf6db5a7a54",
        "type": "tab",
        "label": "Scan",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "80a3942785a26c29",
        "type": "tab",
        "label": "Files",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e43a27722b508115",
        "type": "tab",
        "label": "Settings",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a5557543ccff5889",
        "type": "tab",
        "label": "Update",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "90223f7ddc082321",
        "type": "ui_group",
        "name": "preview",
        "tab": "e23b837a9f040895",
        "order": 2,
        "disp": false,
        "width": "7",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e23b837a9f040895",
        "type": "ui_tab",
        "name": "Scan",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "5c06cb6bcc371ee6",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "OpenScan",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "34bc0fd2b0f2416c",
        "type": "ui_link",
        "name": "GitHub",
        "link": "https://openscan-org.github.io/OpenScan-Doc/",
        "icon": "fa-bookmark",
        "target": "iframe",
        "order": 6
    },
    {
        "id": "23f75a8768250ce8",
        "type": "ui_link",
        "name": "Patreon",
        "link": "https://www.patreon.com/OpenScan",
        "icon": "fa-bookmark",
        "target": "newtab",
        "order": 5
    },
    {
        "id": "b5fdd57b.15eda8",
        "type": "ui_group",
        "name": "Main",
        "tab": "15a222ed.d70a7d",
        "order": 1,
        "disp": false,
        "width": 13,
        "collapse": false
    },
    {
        "id": "db43d646.2074c8",
        "type": "ui_group",
        "name": "OpenScanCloud",
        "tab": "15a222ed.d70a7d",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "15a222ed.d70a7d",
        "type": "ui_tab",
        "name": "Files&Cloud",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "365a30d0dfa83e95",
        "type": "ui_group",
        "name": "settings",
        "tab": "e23b837a9f040895",
        "order": 1,
        "disp": false,
        "width": 7,
        "collapse": false,
        "className": ""
    },
    {
        "id": "ac7409105cfecac6",
        "type": "ui_group",
        "name": "advanced",
        "tab": "e23b837a9f040895",
        "order": 3,
        "disp": false,
        "width": 7,
        "collapse": false,
        "className": ""
    },
    {
        "id": "729f9ea6e3513c9b",
        "type": "ui_group",
        "name": "Home",
        "tab": "b3150b13e34b1fe8",
        "order": 2,
        "disp": false,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "5b3e5aca21140e9a",
        "type": "ui_group",
        "name": "Update",
        "tab": "b3150b13e34b1fe8",
        "order": 1,
        "disp": false,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b3150b13e34b1fe8",
        "type": "ui_tab",
        "name": "OpenScan",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "ddbd496e.93a288",
        "type": "ui_group",
        "name": "Manage Updates",
        "tab": "d25e08b4.5b27e8",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "3ce32450.e0cffc",
        "type": "ui_group",
        "name": "System & Stats",
        "tab": "d25e08b4.5b27e8",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d25e08b4.5b27e8",
        "type": "ui_tab",
        "name": "Update & Info",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "4390b2ebcbbe104c",
        "type": "ui_group",
        "name": "General",
        "tab": "457102eadc9ddb6c",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "8ab79a98e536e0d6",
        "type": "ui_group",
        "name": "Network",
        "tab": "457102eadc9ddb6c",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "70d0be671bf03ca7",
        "type": "ui_group",
        "name": "Pinout",
        "tab": "457102eadc9ddb6c",
        "order": 6,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "7a3279eea439bcdd",
        "type": "ui_group",
        "name": "Motor",
        "tab": "457102eadc9ddb6c",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "d324f0b852c2df0a",
        "type": "ui_group",
        "name": "Camera",
        "tab": "457102eadc9ddb6c",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "12b719cba49817c9",
        "type": "ui_group",
        "name": "OpenScanCloud",
        "tab": "457102eadc9ddb6c",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "457102eadc9ddb6c",
        "type": "ui_tab",
        "name": "Settings",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "c82a5d8ffa9290d7",
        "type": "ui_spacer",
        "z": "481edaf6db5a7a54",
        "name": "spacer",
        "group": "365a30d0dfa83e95",
        "order": 8,
        "width": 7,
        "height": 1
    },
    {
        "id": "1234e5ed37d97dbc",
        "type": "ui_spacer",
        "z": "481edaf6db5a7a54",
        "name": "spacer",
        "group": "365a30d0dfa83e95",
        "order": 9,
        "width": 1,
        "height": 1
    },
    {
        "id": "0866b0ae68867006",
        "type": "ui_spacer",
        "z": "481edaf6db5a7a54",
        "name": "spacer",
        "group": "365a30d0dfa83e95",
        "order": 11,
        "width": 1,
        "height": 1
    },
    {
        "id": "e871dfbac232f86e",
        "type": "ui_spacer",
        "z": "481edaf6db5a7a54",
        "name": "spacer",
        "group": "365a30d0dfa83e95",
        "order": 13,
        "width": 1,
        "height": 1
    },
    {
        "id": "148d18b0fe8c75ea",
        "type": "ui_spacer",
        "z": "481edaf6db5a7a54",
        "name": "spacer",
        "group": "90223f7ddc082321",
        "order": 2,
        "width": 7,
        "height": 1
    },
    {
        "id": "acec03936a857704",
        "type": "ui_spacer",
        "z": "481edaf6db5a7a54",
        "name": "spacer",
        "group": "ac7409105cfecac6",
        "order": 3,
        "width": 7,
        "height": 1
    },
    {
        "id": "6e339d87c7d5debe",
        "type": "ui_spacer",
        "z": "e43a27722b508115",
        "name": "spacer",
        "group": "db43d646.2074c8",
        "order": 1,
        "width": 1,
        "height": 1
    },
    {
        "id": "33b6d7317d1524b8",
        "type": "ui_spacer",
        "z": "e43a27722b508115",
        "name": "spacer",
        "group": "db43d646.2074c8",
        "order": 3,
        "width": 1,
        "height": 1
    },
    {
        "id": "bd749f72a1b5436c",
        "type": "ui_spacer",
        "z": "e43a27722b508115",
        "name": "spacer",
        "group": "8ab79a98e536e0d6",
        "order": 3,
        "width": 6,
        "height": 1
    },
    {
        "id": "61fa5f50a63f5bdd",
        "type": "ui_spacer",
        "z": "e43a27722b508115",
        "name": "spacer",
        "group": "12b719cba49817c9",
        "order": 7,
        "width": 4,
        "height": 1
    },
    {
        "id": "bc4e2c03859196c3",
        "type": "inject",
        "z": "e6f4d02efb300ea9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 460,
        "wires": [
            [
                "949bafced17d66d6"
            ]
        ]
    },
    {
        "id": "949bafced17d66d6",
        "type": "function",
        "z": "e6f4d02efb300ea9",
        "name": "enable",
        "func": "msg.flag = global.set('flag_pw',true)\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "a1f0ed7d5a9d670e",
        "type": "inject",
        "z": "e6f4d02efb300ea9",
        "name": "",
        "props": [
            {
                "p": "overwrite",
                "v": "false",
                "vt": "bool"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "x": 110,
        "y": 60,
        "wires": [
            [
                "544d20f02215011a",
                "325314c1a24fe5b4",
                "7a4a49f7dbe04e88",
                "b1e2491c952f84c9",
                "fac6626127bba4f5",
                "bc2f0adaf72f97e9",
                "ac242724fe7605a6"
            ]
        ]
    },
    {
        "id": "544d20f02215011a",
        "type": "function",
        "z": "e6f4d02efb300ea9",
        "name": "CREATE FACTORY DEFAULT",
        "func": "msg = { \n'overwrite':msg.overwrite,\n'settings':\n    {\n    'advanced_settings':false,\n    'cam_awbg_blue':0,\n    'cam_awbg_red':0,\n    'cam_contrast':1,\n    'cam_cropx':0,\n    'cam_cropy':0,\n    'cam_delay_after':0,\n    'cam_delay_before':0,\n    'camera':'',\n    'cam_features' : false,\n    'cam_focus_min': 11.5,\n    'cam_focus_max': 11.5,\n    'cam_gain':1,\n    'cam_jpeg_quality':95,\n    'cam_rotation':270,\n    'cam_saturation':1,\n    'cam_stacksize':1,\n    'cam_shutter':50000,\n    'cam_timeout':800,\n    'cam_mask_threshold':45,\n    'cam_mask':true,\n    'hostname':'openscan',\n    'model':'',\n    'osc_credit':'',\n    'osc_limit_filesize':'',\n    'osc_limit_photos':'',\n    'osc_splitsize':200000000,\n//    'pin_extra_endstop': 19,\n    'pin_external': 25,\n    'pin_ringlight1': 24,\n    'pin_ringlight2': 24,\n    \n    'pin_rotor_endstop': 17,\n    'pin_rotor_dir': 23,\n    'pin_rotor_enable': 22,\n    'pin_rotor_step': 27,\n    'rotor_acc': 0.5,\n    'rotor_accramp': 500,\n    'rotor_angle': 10,\n    'rotor_anglemax': 75,\n    'rotor_anglemin': -25,\n    'rotor_anglestart': 25,\n    'rotor_delay': 0.0002,\n    'rotor_dir': 1,\n    'rotor_stepsperrotation': 35200/2,\n\n //   'pin_tt_endstop': 25,\n    'pin_tt_dir': 6,\n    'pin_tt_enable': 22,\n    'pin_tt_step': 16,\n    'tt_acc': 1,\n    'tt_accramp': 200,\n    'tt_angle': 90,\n    'tt_delay': 0.0001,\n    'tt_dir': 1,\n    'tt_stepsperrotation': 1600,\n\n    'pin_extra_dir': 21,\n    'pin_extra_step': 20,\n    'pin_extra_enable': 22,\n    'extra_acc': 1,\n    'extra_accramp': 200,\n    'extra_angle': 10,\n    'extra_delay': 0.0001,\n    'extra_dir': 1,\n    'extra_stepsperrotation': 3200,\n\n    'routine_photocount':50,\n    'routine_projectname':'default',\n    'smb':true,\n    'ssh':true,\n    'status_cloud':'ready',\n    'status_internal_cam':'--READY--',\n    'status_uploadprogress':'',\n    'terms':false,\n    'token':'',\n\n    'uploadprogress':'',\n    'update_type':'beta',\n    'update_auto':true,\n    'turntable_mode':false,\n    'diskspace_threshold':4000,\n    'updateable':false,\n    'cam_focuspeak':false,\n    'cam_histogram':false,\n    'routine_secondpass':true,\n    'cam_output_resolution':20000000,\n    'cam_preview_resolution':2000000,\n    'cam_output_downscale':false,\n    'cam_sharparea':false,\n    'cam_sharpness':100,\n}}\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 60,
        "wires": [
            [
                "c77552216a8bb781"
            ]
        ]
    },
    {
        "id": "c77552216a8bb781",
        "type": "python3-function",
        "z": "e6f4d02efb300ea9",
        "name": "chk files",
        "func": "from os import listdir\n\nbasedir = '/home/pi/OpenScan/settings/'\n\nmsg['payload'] = ''\n\nfiles = listdir(basedir)\n\nfor i in msg['settings']:\n    if msg['overwrite'] != True:\n        if i not in files:\n            with open(basedir + i, 'w+') as file:\n                file.write(str(msg['settings'][i]))        \n    else:\n        with open(basedir + i, 'w+') as file:\n            file.write(str(msg['settings'][i])) \n\nmsg['payload'] = True\n\nreturn msg",
        "outputs": 1,
        "x": 540,
        "y": 60,
        "wires": [
            [
                "960912e90ba5b5bc"
            ]
        ]
    },
    {
        "id": "960912e90ba5b5bc",
        "type": "link out",
        "z": "e6f4d02efb300ea9",
        "name": "started1s",
        "mode": "link",
        "links": [
            "2f4c0f98.dee2",
            "397ab7f44b893c89",
            "65145c939b6647e2",
            "65b38bfeb3fee710",
            "6d1e12f51f9af0b6",
            "788fabff98c7973c",
            "9b2bc9849aee310b",
            "a1e14624058e74cd",
            "a67c18aaca2f5fa5",
            "bd80ec228fb9a86d",
            "cc9c4092edeb43cc",
            "d3fc91d87d5d5f62",
            "d7c1fb4c028b21a5",
            "e5f38b4a07a5e278",
            "f0b355967b33dfee",
            "d0104e0163745993",
            "5e7d5e4335d37794",
            "1dffb799fdf10cbc",
            "9fd259de91de1da1",
            "fd0258418489839d",
            "b4c843620c251c43",
            "3876d5cbd248592b",
            "a4c81754c148b86f",
            "2e9b29c70969cf01",
            "2477f81cddc8fa31",
            "29036b35dfd672c6",
            "592ec13d8f8923a9",
            "cb40b9341bd22a28",
            "d1efcd5fa9d25785",
            "da61581182b7299e"
        ],
        "x": 645,
        "y": 60,
        "wires": []
    },
    {
        "id": "325314c1a24fe5b4",
        "type": "python3-function",
        "z": "e6f4d02efb300ea9",
        "name": "create path",
        "func": "import os\n\npaths = ['/home/pi/OpenScan/scans/preview/','/home/pi/OpenScan/tmp2/']\n\n\nfor i in paths:\n    if not os.path.isdir(i):\n        os.mkdir(i)",
        "outputs": 1,
        "x": 270,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "168d72a54504b327",
        "type": "inject",
        "z": "e6f4d02efb300ea9",
        "name": "5/0.1s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0.1",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 100,
        "y": 380,
        "wires": [
            [
                "6c6ef2255a7d39e5"
            ]
        ]
    },
    {
        "id": "6c6ef2255a7d39e5",
        "type": "link out",
        "z": "e6f4d02efb300ea9",
        "name": "repeat 5s/0.1s",
        "mode": "link",
        "links": [
            "61990987acd0f263",
            "2415272f42ce468c",
            "6bf8344af427a6ba"
        ],
        "x": 205,
        "y": 380,
        "wires": []
    },
    {
        "id": "7a4a49f7dbe04e88",
        "type": "python3-function",
        "z": "e6f4d02efb300ea9",
        "name": "LED Status",
        "func": "from OpenScan import fade_led, check_hotspot_mode, load_int\n\npin = load_int(\"pin_ringlight1\")\n\nif check_hotspot_mode():\n    msg['mode'] = True\n    i=5\n    j=30\nelse:\n    msg['mode'] = False\n    i=3\n    j=30\n\nfor x in range (i):\n    fade_led(pin,j, 50, True)\n    fade_led(pin,j, 50, False)\n\nreturn msg",
        "outputs": 1,
        "x": 270,
        "y": 140,
        "wires": [
            [
                "eb1a2387a1eeea76"
            ]
        ]
    },
    {
        "id": "b1e2491c952f84c9",
        "type": "function",
        "z": "e6f4d02efb300ea9",
        "name": "global",
        "func": "global.set('light', 0)\nglobal.set('state1', 0)\nglobal.set('network_ssid',\"\")\nglobal.set('network_password',\"\")\nglobal.set('network_country',\"\")\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "fac6626127bba4f5",
        "type": "function",
        "z": "e6f4d02efb300ea9",
        "name": "enable",
        "func": "msg.enabled = true\nmsg.payload = \"\"\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 280,
        "wires": [
            [
                "200d4b9951b6e066"
            ]
        ]
    },
    {
        "id": "200d4b9951b6e066",
        "type": "link out",
        "z": "e6f4d02efb300ea9",
        "name": "enable",
        "mode": "link",
        "links": [
            "8367cfa0bf5bc5df",
            "c8b93b42c720b9cf",
            "65518f3d4e3095e5"
        ],
        "x": 345,
        "y": 280,
        "wires": []
    },
    {
        "id": "bc2f0adaf72f97e9",
        "type": "python3-function",
        "z": "e6f4d02efb300ea9",
        "name": "CAM init",
        "func": "from OpenScan import camera\n\ncamera(\"/picam2_init\")\n\nmotor_enable_pin = 22\n\nimport RPi.GPIO as GPIO           # import RPi.GPIO module\nGPIO.setmode(GPIO.BCM)            # choose BCM or BOARD\nGPIO.setwarnings(False)\nGPIO.setup(22, GPIO.OUT) # set a port/pin as an output\nGPIO.output(22, 0) \n",
        "outputs": 1,
        "x": 260,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "8def60b68e21e665",
        "type": "inject",
        "z": "e6f4d02efb300ea9",
        "name": "FACTORY DEFAULT",
        "props": [
            {
                "p": "overwrite",
                "v": "true",
                "vt": "bool"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.1",
        "topic": "",
        "x": 800,
        "y": 40,
        "wires": [
            [
                "544d20f02215011a"
            ]
        ]
    },
    {
        "id": "eb1a2387a1eeea76",
        "type": "link out",
        "z": "e6f4d02efb300ea9",
        "name": "enable LED",
        "mode": "link",
        "links": [
            "592ec13d8f8923a9",
            "5baf89a2682265f7"
        ],
        "x": 385,
        "y": 140,
        "wires": []
    },
    {
        "id": "0d8c6bc7887fb3c2",
        "type": "ui_template",
        "z": "e6f4d02efb300ea9",
        "group": "365a30d0dfa83e95",
        "name": "shutdown+background",
        "order": 14,
        "width": 7,
        "height": 1,
        "format": "<script id=\"titleScript\" type=\"text/javascript\">\n    $(function() {\n    if($('.md-toolbar-tools').length != 0){\n        load();\n    }else setTimeout(load, 500)\n});\n\nfunction load(){\n    $('#bmac').remove();\n    var toolbar = $('.md-toolbar-tools');\n    \n    var div = $('<div/>');\n    var p = $('<div/ id=\"bmac\">');\n    \n    div.append(p);\n    div[0].style.margin = '0px 0px 0px auto';\n    toolbar.append(div);\n\n    p.append(' ')\n    p.append('<a class=\"md-button2\" style=\"margin:0 5 0 5!important;\" href=\"http://openscan:1312/shutdown\"><i class=\"fa fa-power-off\" ></i></a>')\n    p.append('   ')\n    p.append('<a class=\"md-button2\" style=\"margin:10 0 10 0!important;\" href=\"http://openscan:1312/reboot\"><i class=\"fa fa-repeat\" ></i></a>')\n\n}\n\n</script>\n<style>\n    body {\n        background-image: url(\"/files/logo.jpg\");\n        background-repeat: no-repeat;\n        background-attachment: fixed;\n        background-position: center;\n\n    }\n\n    #OpenScan_Home {\n        background-color: transparent !important;\n        border-color: transparent !important;\n    }\n\n    [node-id=\"a291fc98e4269c1b\"] {\n        background-color: transparent !important;\n    }\n\n\n\n    #OpenScan_Update {\n        background-color: transparent !important;\n        border-color: transparent !important;\n    }\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 580,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "ac242724fe7605a6",
        "type": "python3-function",
        "z": "e6f4d02efb300ea9",
        "name": "rescue incomplete project",
        "func": "#if project has not been done properly, this is a way to rescue the file\n\nfrom os import system\nfrom os.path import isfile\nfrom time import strftime\nfrom OpenScan import load_str\n\nbasepath = '/home/pi/OpenScan/'\nzippath = basepath + 'tmp/tmp.zip'\nprojectname=load_str(\"routine_projectname\")\nprojectcode = strftime('20%y-%m-%d_%H.%M.%S-') + projectname\n\nif isfile(zippath):\n    system('mv '+ zippath + ' ' + basepath + 'scans/' + projectcode + '.zip')",
        "outputs": 1,
        "x": 310,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "4468f691.103eb8",
        "type": "ui_button",
        "z": "e6f4d02efb300ea9",
        "name": "",
        "group": "729f9ea6e3513c9b",
        "order": 1,
        "width": 3,
        "height": 2,
        "passthru": false,
        "label": "SCAN",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "1",
        "payloadType": "num",
        "topic": "",
        "topicType": "str",
        "x": 90,
        "y": 540,
        "wires": [
            [
                "62cd5288.2805fc"
            ]
        ]
    },
    {
        "id": "6560dd25.9e76c4",
        "type": "ui_button",
        "z": "e6f4d02efb300ea9",
        "name": "",
        "group": "729f9ea6e3513c9b",
        "order": 3,
        "width": 3,
        "height": 2,
        "passthru": false,
        "label": "Settings",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "3",
        "payloadType": "num",
        "topic": "",
        "topicType": "str",
        "x": 100,
        "y": 620,
        "wires": [
            [
                "62cd5288.2805fc"
            ]
        ]
    },
    {
        "id": "62cd5288.2805fc",
        "type": "ui_ui_control",
        "z": "e6f4d02efb300ea9",
        "name": "",
        "events": "all",
        "x": 280,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "71e72293.91c6fc",
        "type": "ui_button",
        "z": "e6f4d02efb300ea9",
        "name": "",
        "group": "729f9ea6e3513c9b",
        "order": 2,
        "width": 3,
        "height": 2,
        "passthru": false,
        "label": "Files",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "2",
        "payloadType": "num",
        "topic": "",
        "topicType": "str",
        "x": 90,
        "y": 580,
        "wires": [
            [
                "62cd5288.2805fc"
            ]
        ]
    },
    {
        "id": "e7306ef2.3b4df",
        "type": "ui_button",
        "z": "e6f4d02efb300ea9",
        "name": "",
        "group": "729f9ea6e3513c9b",
        "order": 4,
        "width": 3,
        "height": 2,
        "passthru": false,
        "label": "Update&Info",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "4",
        "payloadType": "num",
        "topic": "",
        "topicType": "str",
        "x": 110,
        "y": 660,
        "wires": [
            [
                "62cd5288.2805fc"
            ]
        ]
    },
    {
        "id": "8955d11554f55e63",
        "type": "ui_button",
        "z": "e6f4d02efb300ea9",
        "name": "",
        "group": "5b3e5aca21140e9a",
        "order": 1,
        "width": 6,
        "height": 3,
        "passthru": false,
        "label": "Install Updates",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "date",
        "topic": "",
        "topicType": "str",
        "x": 120,
        "y": 720,
        "wires": [
            [
                "1e7457ea9c2c5e09"
            ]
        ]
    },
    {
        "id": "1e7457ea9c2c5e09",
        "type": "link out",
        "z": "e6f4d02efb300ea9",
        "name": "update",
        "mode": "link",
        "links": [
            "39a502b38837273d"
        ],
        "x": 245,
        "y": 720,
        "wires": []
    },
    {
        "id": "245e4341d4fb611c",
        "type": "function",
        "z": "e6f4d02efb300ea9",
        "name": "pinmap_v2",
        "func": "msg = { \n'overwrite':true,\n'settings':{\n    'pin_rotor_endstop':27,\n    'pin_tt_endstop':5,\n    'pin_extra_endstop':26,\n    'pin_external':25,\n    'pin_ringlight1':24,\n    'pin_ringlight2':24,\n    'pin_rotor_dir':23,\n    'pin_rotor_enable':19,\n    'pin_rotor_step':22,\n    'pin_tt_dir':6,\n    'pin_tt_enable':19,\n    'pin_tt_step':16,\n    'pin_extra_dir':21,\n    'pin_extra_step':20,\n    'pin_extra_enable':19,\n    'extra_acc':1,\n    'extra_accramp':200,\n    'extra_angle':10,\n    'extra_delay':0.0001,\n    'extra_dir':1,\n    'extra_stepsperrotation':3200,\n}}\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 540,
        "wires": [
            [
                "627406f3611511dc"
            ]
        ]
    },
    {
        "id": "627406f3611511dc",
        "type": "python3-function",
        "z": "e6f4d02efb300ea9",
        "name": "write",
        "func": "from os import listdir\n\nbasedir = '/home/pi/OpenScan/settings/'\n\nmsg['payload'] = ''\n\nfiles = listdir(basedir)\n\nfor i in msg['settings']:\n    if msg['overwrite'] != True:\n        if i not in files:\n            with open(basedir + i, 'w+') as file:\n                file.write(str(msg['settings'][i]))        \n    else:\n        with open(basedir + i, 'w+') as file:\n            file.write(str(msg['settings'][i])) \n\nmsg['payload'] = True\n\nreturn msg",
        "outputs": 1,
        "x": 930,
        "y": 540,
        "wires": [
            [
                "50eeb3e362f9027f"
            ]
        ]
    },
    {
        "id": "88b1bddde110298a",
        "type": "inject",
        "z": "e6f4d02efb300ea9",
        "name": "",
        "props": [
            {
                "p": "overwrite",
                "v": "false",
                "vt": "bool"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.1",
        "topic": "",
        "x": 650,
        "y": 540,
        "wires": [
            [
                "245e4341d4fb611c"
            ]
        ]
    },
    {
        "id": "50eeb3e362f9027f",
        "type": "link out",
        "z": "e6f4d02efb300ea9",
        "name": "started1s",
        "mode": "link",
        "links": [
            "2f4c0f98.dee2",
            "397ab7f44b893c89",
            "65145c939b6647e2",
            "65b38bfeb3fee710",
            "6d1e12f51f9af0b6",
            "788fabff98c7973c",
            "9b2bc9849aee310b",
            "a1e14624058e74cd",
            "a67c18aaca2f5fa5",
            "bd80ec228fb9a86d",
            "cc9c4092edeb43cc",
            "d3fc91d87d5d5f62",
            "d7c1fb4c028b21a5",
            "e5f38b4a07a5e278",
            "f0b355967b33dfee",
            "d0104e0163745993",
            "5e7d5e4335d37794",
            "b4c843620c251c43",
            "3876d5cbd248592b",
            "a4c81754c148b86f",
            "2e9b29c70969cf01",
            "2477f81cddc8fa31",
            "29036b35dfd672c6",
            "592ec13d8f8923a9",
            "cb40b9341bd22a28",
            "d1efcd5fa9d25785",
            "da61581182b7299e"
        ],
        "x": 1015,
        "y": 540,
        "wires": []
    },
    {
        "id": "4f3121f158f06a61",
        "type": "python3-function",
        "z": "e6f4d02efb300ea9",
        "name": "motor run",
        "func": "from OpenScan import motorrun, load_int\nfrom time import sleep\n\nmotorrun('rotor',100,True)\n\nmotorrun('tt',360,True)\nmotorrun('extra',360,True)",
        "outputs": 1,
        "x": 860,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "4a8a04b1e5dca8fe",
        "type": "inject",
        "z": "e6f4d02efb300ea9",
        "name": "run rotor till endstop",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 690,
        "y": 580,
        "wires": [
            [
                "4f3121f158f06a61"
            ]
        ]
    },
    {
        "id": "c8167775e3401fad",
        "type": "ui_template",
        "z": "e6f4d02efb300ea9",
        "group": "729f9ea6e3513c9b",
        "name": "infotext",
        "order": 4,
        "width": 0,
        "height": 0,
        "format": "<h2>What's new?</h2>\n<ul>\n    <li>speed improvement 2-3x</li>\n    <li>currently tested on OpenScan Mini + IMX519 with RPi 4</li>\n    <li>optimized toolpath</li>\n    <li>more responsive user interface</li>\n    <li>hotspot mode (when no wireless network available ssid: <em>openscan</em> pw: <em>opensource</em></li>\n    <li>preview features and sharpness</li>\n    <li>partial background masking</li>\n    <li>no more autofocus --&gt; instead you can set a min and max focus distance</li>\n</ul>\nnote, that this is still an early beta and there might be some unintended bugs. please reach out to info@openscan.eu if you run into any issues.",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 600,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "6a3d9acbe097a3d2",
        "type": "function",
        "z": "481edaf6db5a7a54",
        "name": "loadI",
        "func": "var file = 'routine_photocount'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst data = fs.readFileSync(filepath+file, 'utf8');\nmsg.payload = parseInt(data);\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 120,
        "wires": [
            [
                "cb6ebdabaaf7d0da"
            ]
        ]
    },
    {
        "id": "7ef6f1b5c67201fe",
        "type": "function",
        "z": "481edaf6db5a7a54",
        "name": "write",
        "func": "const delay = 100; // 100 ms delay\n\nif (!context.timeout) {\n  context.timeout = setTimeout(() => {\n    node.send({ payload: msg.payload });\n    clearTimeout(context.timeout);\n    delete context.timeout;\n  }, delay);\n} else {\n  context.set(\"lastMessage\", msg.payload);\n  clearTimeout(context.timeout);\n  context.timeout = setTimeout(() => {\n    node.send({ payload: context.get(\"lastMessage\") });\n    clearTimeout(context.timeout);\n    delete context.timeout;\n  }, delay);\n}\n\nvar file = 'routine_photocount'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\n\nconst content = String(msg.payload)\nfs.writeFile(filepath + file, content, err => {\n  if (err) {\n    return\n  }\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "86f7d1b2d763f6e2",
        "type": "function",
        "z": "481edaf6db5a7a54",
        "name": "loadF",
        "func": "var file = 'cam_shutter'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst data = fs.readFileSync(filepath+file, 'utf8');\nmsg.payload = parseFloat(data) / 1000;\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 160,
        "wires": [
            [
                "c8a3fde5206ce1ae"
            ]
        ]
    },
    {
        "id": "fd799c931139764d",
        "type": "function",
        "z": "481edaf6db5a7a54",
        "name": "loadI",
        "func": "var file = 'cam_cropx'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst data = fs.readFileSync(filepath+file, 'utf8');\nmsg.payload = parseInt(data);\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 240,
        "wires": [
            [
                "87be854db758a9a6"
            ]
        ]
    },
    {
        "id": "d5140d455122c49a",
        "type": "function",
        "z": "481edaf6db5a7a54",
        "name": "loadI",
        "func": "var file = 'cam_cropy'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst data = fs.readFileSync(filepath+file, 'utf8');\nmsg.payload = parseInt(data);\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 280,
        "wires": [
            [
                "9daea4bd57f7a00e"
            ]
        ]
    },
    {
        "id": "194f3590dd4f6e3d",
        "type": "function",
        "z": "481edaf6db5a7a54",
        "name": "write",
        "func": "const delay = 100; // 100 ms delay\n\nif (!context.timeout) {\n  context.timeout = setTimeout(() => {\n    node.send({ payload: msg.payload });\n    clearTimeout(context.timeout);\n    delete context.timeout;\n  }, delay);\n} else {\n  context.set(\"lastMessage\", msg.payload);\n  clearTimeout(context.timeout);\n  context.timeout = setTimeout(() => {\n    node.send({ payload: context.get(\"lastMessage\") });\n    clearTimeout(context.timeout);\n    delete context.timeout;\n  }, delay);\n}\nvar file = 'cam_cropx'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\n\nconst content = String(msg.payload)\nfs.writeFile(filepath + file, content, err => {\n  if (err) {\n    return\n  }\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "2de69452e829d780",
        "type": "function",
        "z": "481edaf6db5a7a54",
        "name": "write",
        "func": "const delay = 100; // 100 ms delay\n\nif (!context.timeout) {\n  context.timeout = setTimeout(() => {\n    node.send({ payload: msg.payload });\n    clearTimeout(context.timeout);\n    delete context.timeout;\n  }, delay);\n} else {\n  context.set(\"lastMessage\", msg.payload);\n  clearTimeout(context.timeout);\n  context.timeout = setTimeout(() => {\n    node.send({ payload: context.get(\"lastMessage\") });\n    clearTimeout(context.timeout);\n    delete context.timeout;\n  }, delay);\n}\nvar file = 'cam_cropy'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\n\nconst content = String(msg.payload)\nfs.writeFile(filepath + file, content, err => {\n  if (err) {\n    return\n  }\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "58e565fea35cb667",
        "type": "ui_text_input",
        "z": "481edaf6db5a7a54",
        "name": "",
        "label": "",
        "tooltip": "",
        "group": "365a30d0dfa83e95",
        "order": 3,
        "width": 4,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": "0",
        "topic": "",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 320,
        "y": 80,
        "wires": [
            [
                "734ac3bff2df6837"
            ]
        ]
    },
    {
        "id": "97170908e1f4ac55",
        "type": "function",
        "z": "481edaf6db5a7a54",
        "name": "msg",
        "func": "msg.payload=\"default\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 80,
        "wires": [
            [
                "58e565fea35cb667"
            ]
        ]
    },
    {
        "id": "734ac3bff2df6837",
        "type": "function",
        "z": "481edaf6db5a7a54",
        "name": "write",
        "func": "const delay = 100; // 100 ms delay\n\nif (!context.timeout) {\n  context.timeout = setTimeout(() => {\n    node.send({ payload: msg.payload });\n    clearTimeout(context.timeout);\n    delete context.timeout;\n  }, delay);\n} else {\n  context.set(\"lastMessage\", msg.payload);\n  clearTimeout(context.timeout);\n  context.timeout = setTimeout(() => {\n    node.send({ payload: context.get(\"lastMessage\") });\n    clearTimeout(context.timeout);\n    delete context.timeout;\n  }, delay);\n}\n\nvar file = 'routine_projectname'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\n\nconst content = String(msg.payload).replace(/ /g, '_')\nfs.writeFile(filepath + file, content, err => {\n  if (err) {\n    return\n  }\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "1dffb799fdf10cbc",
        "type": "link in",
        "z": "481edaf6db5a7a54",
        "name": "start routine settings",
        "links": [
            "960912e90ba5b5bc",
            "50eeb3e362f9027f"
        ],
        "x": 55,
        "y": 80,
        "wires": [
            [
                "97170908e1f4ac55",
                "6a3d9acbe097a3d2",
                "86f7d1b2d763f6e2",
                "fd799c931139764d",
                "d5140d455122c49a"
            ]
        ]
    },
    {
        "id": "a0156eaac7dd35e5",
        "type": "python3-function",
        "z": "481edaf6db5a7a54",
        "name": "shutter",
        "func": "from time import time, sleep\nfrom OpenScan import load_str, load_bool, take_photo, camera, load_int,save\nimport math\n\n\ncamera('/picam2_exposure?exposure=' + str(int(msg['payload']*1000)))\n\nreturn msg\n",
        "outputs": 1,
        "x": 510,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "c7f5808d753480d4",
        "type": "inject",
        "z": "481edaf6db5a7a54",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "6",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 200,
        "wires": [
            [
                "11f41a6030578ef4"
            ]
        ]
    },
    {
        "id": "11f41a6030578ef4",
        "type": "function",
        "z": "481edaf6db5a7a54",
        "name": "loadF",
        "func": "var file = 'cam_shutter'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst data = fs.readFileSync(filepath+file, 'utf8');\nmsg.payload = parseFloat(data) / 1000;\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 200,
        "wires": [
            [
                "a0156eaac7dd35e5"
            ]
        ]
    },
    {
        "id": "855cbcadef1163c5",
        "type": "function",
        "z": "481edaf6db5a7a54",
        "name": "enable",
        "func": "msg.flag = global.get('flag')\nmsg.light = global.get('light')\nmsg.state1 = global.get('state1')\n\nvar min = 1;\nvar max = 100000;\nvar random = Math.floor(Math.random() * (max - min + 1)) + min;\n\nvar formatted = random.toString().padStart(3, '0');\nmsg.payload=\"/tmp2/preview.jpg?ts=\" + Date.now().toString();\n\nif (global.get('flag_pw') == false){\n    delete msg.payload;\n}\n\nreturn msg\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 840,
        "wires": [
            [
                "d1b87196ae5373ed",
                "41e6a4649b6afbfb",
                "2fd24f8e8e9c08b7",
                "85a268108250ba88"
            ]
        ]
    },
    {
        "id": "1a443e20a973d2f1",
        "type": "change",
        "z": "481edaf6db5a7a54",
        "name": "flag_pw true",
        "rules": [
            {
                "t": "set",
                "p": "flag_pw",
                "pt": "global",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 630,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "d1b87196ae5373ed",
        "type": "change",
        "z": "481edaf6db5a7a54",
        "name": "flag_pw false",
        "rules": [
            {
                "t": "set",
                "p": "flag_pw",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "03d92601c62b79d4",
        "type": "inject",
        "z": "481edaf6db5a7a54",
        "name": "4s/0.5",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0.2",
        "crontab": "",
        "once": true,
        "onceDelay": "4",
        "topic": "Repeat",
        "payload": "0.2",
        "payloadType": "str",
        "x": 100,
        "y": 840,
        "wires": [
            [
                "855cbcadef1163c5"
            ]
        ]
    },
    {
        "id": "41e6a4649b6afbfb",
        "type": "python3-function",
        "z": "481edaf6db5a7a54",
        "name": "Take Preview Shot",
        "func": "from time import time, sleep\nfrom OpenScan import load_str, load_bool, take_photo, camera, load_int,save\n\nstatus = load_str('status_internal_cam')\n\n#return msg\n\n#if msg['flag'] == False and not 'Routine' in status:\n#    return msg\n\nmsg['payload']=\"/tmp2/preview.jpg?ts=\"+str(int(time()))\n\n#if status!=\"--READY--\":\n#    return msg\n\n#msg['preview'] = True\n\ncamera('/picam2_take_photo')\n\nreturn msg\n",
        "outputs": 1,
        "x": 450,
        "y": 800,
        "wires": [
            [
                "1a443e20a973d2f1",
                "296636b7467fc745"
            ]
        ]
    },
    {
        "id": "85a268108250ba88",
        "type": "ui_template",
        "z": "481edaf6db5a7a54",
        "group": "90223f7ddc082321",
        "name": "preview_arducam",
        "order": 1,
        "width": 7,
        "height": 9,
        "format": "<style>\n  /* Define the color classes */\n  .btn-0 {\n    opacity: 0.4;\n  }\n\n  .btn-1 {\n    opacity: 1;\n\n  }\n\n  .btn-2 {\n    opacity: 1;\n  }\n</style>\n\n<div style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\">\n  <img ng-src=\"{{msg.payload}}\" style=\"width: 100%; height: 100%; object-position:top; object-fit: contain; vertical-align: top;\"/>\n  <div style=\"position: absolute; top: 3%; right: 3% ; height: 30% \">\n    <md-button class=\"button save\"\n      style=\"color: default; padding: 10px; margin: 0px 0px 0px 0px; width:100%; height: 27%;\"\n      ng-class=\"{'btn-0': msg.light == 0, 'btn-1': msg.light == 1, 'btn-2': msg.light == 2}\"\n      ng-click=\"send({light:toggleState()})\"><i class=\"fa fa-lightbulb-o fa-2x\"></i></md-button>\n  </div>\n  <div style=\"position: absolute; top: 13%; right: 3% ; width:10%; height: 30% \">\n    <md-button class=\"button save\"\n      style=\"color: default; padding: 10px; margin: 0px 0px 0px 0px; width:100%; height: 27%;\"\n      ng-class=\"{'btn-0': msg.state1 == 0, 'btn-1': msg.state1 == 2, }\" ng-click=\"send({state1:toggleState1()})\">\n      <i class=\"fa fa-cog\"></i>\n    </md-button>\n  </div>\n\n  <div\n    style=\"position: absolute; top: 20px; left: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center; width: 130px; height: 130px;\">\n\n\n\n    <div\n      style=\"display: flex; justify-content: center; align-items: center; width: 100%; height: 33.33%; margin-bottom: 10px;\">\n      <md-button class=\"button save\"\n        style=\"color: default; padding: 10px; margin: 0px 0px 0px 0px; width: 33.33%; height: 100%;\"\n        ng-click=\"send({payload: 'up'})\"><i class=\"fa fa-arrow-up\"></i></md-button>\n    </div>\n    <div\n      style=\"display: flex; justify-content: space-between; align-items: center; width: 100%; height: 33.33%; margin-bottom: 10px;\">\n      <md-button class=\"button save\" style=\"color: default; padding: 10px; margin: 0; width: 33.33%; height: 100%;\"\n        ng-click=\"send({payload: 'left'})\"><i class=\"fa fa-arrow-left\"></i></md-button>\n      <md-button class=\"button save\"\n        style=\"opacity: 0; color: default; padding: 10px; margin: 0; width: 33.33%; height: 100%; pointer-events: none;\">\n      </md-button>\n      <md-button class=\"button save\" style=\"color: default; padding: 10px; margin: 0; width: 33.33%; height: 100%;\"\n        ng-click=\"send({payload: 'right'})\"><i class=\"fa fa-arrow-right\"></i></md-button>\n    </div>\n    <div style=\"display: flex; justify-content: center; align-items: center; width: 100%; height: 33.33%;\">\n      <md-button class=\"button save\"\n        style=\"color: default; padding: 10px; margin: 0px 0px 0px 0px; width: 33.33%; height: 100%;\"\n        ng-click=\"send({payload: 'down'})\"><i class=\"fa fa-arrow-down\"></i></md-button>\n    </div>\n  </div>\n</div>\n\n<script>\n  // Define the button state and label\nvar state = 1;\nvar state1 = 0;\n\n// Initialize the button state and label\nfunction init() {\n    // Get the current state from the incoming message, if any\n    var msg = scope.$parent.msg;\n    if (msg) {\n        state = msg.light;\n        state1 = msg.state1\n    }\n}\n\n// Toggle the button state and label\nfunction toggleState() {\n    state = (state + 1) % 2\n    return state\n}\nfunction toggleState1() {\n    state1 = (state1 + 1) % 2\n    return state1\n}\nscope.toggleState1 = toggleState1;\nscope.state1 = state1;\nscope.toggleState = toggleState;\nscope.state = state;\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 450,
        "y": 840,
        "wires": [
            [
                "417f653ca0dfdcfc",
                "180476141c2a44ad"
            ]
        ]
    },
    {
        "id": "2c58a1a66c4a8c11",
        "type": "link in",
        "z": "481edaf6db5a7a54",
        "name": "preview",
        "links": [
            "f20da2fc4978b7bf",
            "296636b7467fc745"
        ],
        "x": 145,
        "y": 800,
        "wires": [
            [
                "855cbcadef1163c5"
            ]
        ]
    },
    {
        "id": "296636b7467fc745",
        "type": "link out",
        "z": "481edaf6db5a7a54",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "2c58a1a66c4a8c11"
        ],
        "x": 575,
        "y": 800,
        "wires": []
    },
    {
        "id": "417f653ca0dfdcfc",
        "type": "delay",
        "z": "481edaf6db5a7a54",
        "name": "lmt 0.2/s",
        "pauseType": "rate",
        "timeout": "0.1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "0.2",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 640,
        "y": 840,
        "wires": [
            [
                "e864254b18c23dd1"
            ]
        ]
    },
    {
        "id": "e864254b18c23dd1",
        "type": "python3-function",
        "z": "481edaf6db5a7a54",
        "name": "motorrun",
        "func": "from OpenScan import motorrun, load_int\n\nif 'payload' not in msg:\n    return\n\nif msg['payload'] == \"up\":\n    motorrun('rotor',load_int('rotor_angle'))\nif msg['payload'] == \"down\":\n    motorrun('rotor',-load_int('rotor_angle'))\nif msg['payload'] == \"left\":\n    motorrun('tt',load_int('tt_angle'))\nif msg['payload'] == \"right\":\n    motorrun('tt',-load_int('tt_angle'))\n\n",
        "outputs": 1,
        "x": 780,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "180476141c2a44ad",
        "type": "function",
        "z": "481edaf6db5a7a54",
        "name": "global",
        "func": "if (typeof msg.light !== \"undefined\"){\n    global.set('light',msg.light)\n}\nif (typeof msg.state1 !== \"undefined\"){\n    global.set('state1',msg.state1)\n}\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 880,
        "wires": [
            [
                "8cbdbfecbd12ef83"
            ]
        ]
    },
    {
        "id": "1fe18f3b0b52aabd",
        "type": "python3-function",
        "z": "481edaf6db5a7a54",
        "name": "LED",
        "func": "from OpenScan import ringlight\nfrom time import time\n\nstarttime = time()\n\nif 'light' in msg:\n    val = msg['light']\n    while time()-starttime<0.02:\n        if val == 0:\n            ringlight(1,False)\n        elif val == 1:\n            ringlight(1,True)\n\nreturn msg",
        "outputs": 1,
        "x": 870,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "2fd24f8e8e9c08b7",
        "type": "python3-function",
        "z": "481edaf6db5a7a54",
        "name": "load advanced",
        "func": "from OpenScan import load_bool\n\nif 'state1' in msg:\n    if msg['state1'] == 0:\n        msg['payload']={\"group\":{\"hide\":[\"Scan_advanced\"],\"show\":[]}}\n    else:\n        msg['payload']={\"group\":{\"hide\":[],\"show\":[\"Scan_advanced\"]}}\n    return msg",
        "outputs": 1,
        "x": 440,
        "y": 720,
        "wires": [
            [
                "923be3b2b25224b4"
            ]
        ]
    },
    {
        "id": "923be3b2b25224b4",
        "type": "ui_ui_control",
        "z": "481edaf6db5a7a54",
        "name": "change visibility",
        "events": "all",
        "x": 640,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "c8a3fde5206ce1ae",
        "type": "ui_template",
        "z": "481edaf6db5a7a54",
        "group": "365a30d0dfa83e95",
        "name": "shutter",
        "order": 4,
        "width": 7,
        "height": 1,
        "format": "<div\n  style=\"overflow:hidden; position: absolute; top: 0; left: 4px; width: 98%; height: 100%;transform: translateY(-35%);\">\n  <md-card>\n    <style>\n      .slider-container {\n        transform: translateY(-20%);\n        display: flex;\n        flex-direction: column;\n        width: 100%;\n        overflow: hidden;\n        margin: 0 0;\n      }\n\n      .slider-container::-webkit-scrollbar-thumb {\n        background-color: transparent;\n      }\n\n      .slider-container::-webkit-scrollbar-track {\n        background-color: transparent;\n      }\n\n      .top-row {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        position: relative;\n        vertical-align: text-top;\n        z-index: 1;\n        top: -35%;\n      }\n\n      .slider-label {\n        text-align: left;\n      }\n\n      .value-input {\n        width: 20%;\n        text-align: middle;\n        transform: translateY(12%) !important;\n      }\n\n      .value-input input::-webkit-inner-spin-button,\n      .value-input input::-webkit-outer-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n      }\n\n      .value-input input {\n        -moz-appearance: textfield;\n      }\n\n      .slider-row {\n        position: relative;\n        left: 5% !important;\n        width: 70% !important;\n        top: -100% !important;\n        transform: translateY(-120%) !important;\n        z-index: 1;\n      }\n    </style>\n    <div class=\"slider-container\">\n      <div class=\"top-row\">\n        <div class=\"slider-label\">\n          <span>{{sliderName}}</span>\n        </div>\n        <div class=\"value-input\" style=\"text-align: center;\">\n          <md-input-container>\n            <input aria-label=\"value\" type=\"number\" ng-model=\"sliderValue\" ng-change=\"validateAndUpdateValue(sliderValue)\">\n          </md-input-container>\n        </div>\n      </div>\n      <div class=\"slider-row\">\n        <md-slider flex min=\"{{minValue}}\" max=\"{{maxValue}}\" ng-model=\"sliderValue\"          ng-change=\"updateSliderValue(sliderValue)\" aria-label=\"slider\" step=\"{{stepValue}}\">\n        </md-slider>\n      </div>\n    </div>\n</div>\n<script>\n  (function(scope) {\n        scope.sliderValue = 0;\n        scope.minValue = 0.1;\n        scope.maxValue = 300;\n        scope.stepValue = 0.1;\n        scope.sliderName =\"Shutterspeed (ms)\";\n\n        scope.updateSliderValue = function(value) {\n          scope.send({payload: value});\n        };\n\n        scope.validateAndUpdateValue = function(value) {\n          if (value < scope.minValue) {\n            scope.sliderValue = scope.minValue;\n          } else if (value > scope.maxValue) {\n            scope.sliderValue = scope.maxValue;\n          } else {\n            scope.sliderValue = value;\n          }\n          scope.updateSliderValue(scope.sliderValue);\n        };\n\n        scope.$watch('msg', function(msg) {\n          if (msg && msg.hasOwnProperty('payload')) {\n            scope.sliderValue = msg.payload;\n          }\n        });\n    })(scope);\n</script>\n</md-card>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 310,
        "y": 160,
        "wires": [
            [
                "034ec9f59e50a361",
                "a0156eaac7dd35e5"
            ]
        ]
    },
    {
        "id": "034ec9f59e50a361",
        "type": "function",
        "z": "481edaf6db5a7a54",
        "name": "rate",
        "func": "const delay = 100; // 100 ms delay\n\nif (!context.timeout) {\n    context.timeout = setTimeout(() => {\n        node.send({ payload: msg.payload });\n        clearTimeout(context.timeout);\n        delete context.timeout;\n    }, delay);\n} else {\n    context.set(\"lastMessage\", msg.payload);\n    clearTimeout(context.timeout);\n    context.timeout = setTimeout(() => {\n        node.send({ payload: context.get(\"lastMessage\") });\n        clearTimeout(context.timeout);\n        delete context.timeout;\n    }, delay);\n}\nvar file = 'cam_shutter'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst content = String(msg.payload * 1000)\nfs.writeFile(filepath + file, content, err => {\n    if (err) {\n        return\n    }\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "87be854db758a9a6",
        "type": "ui_template",
        "z": "481edaf6db5a7a54",
        "group": "365a30d0dfa83e95",
        "name": "Cropy",
        "order": 7,
        "width": 7,
        "height": 1,
        "format": "<div\n  style=\"overflow:hidden; position: absolute; top: 0; left: 4px; width: 98%; height: 100%;transform: translateY(-35%);\">\n  <md-card>\n    <style>\n      .slider-container {\n        transform: translateY(-20%);\n        display: flex;\n        flex-direction: column;\n        width: 100%;\n        overflow: hidden;\n        margin: 0 0;\n      }\n\n      .slider-container::-webkit-scrollbar-thumb {\n        background-color: transparent;\n      }\n\n      .slider-container::-webkit-scrollbar-track {\n        background-color: transparent;\n      }\n\n      .top-row {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        position: relative;\n        vertical-align: text-top;\n        z-index: 1;\n        top: -35%;\n      }\n\n      .slider-label {\n        text-align: left;\n      }\n\n      .value-input {\n        width: 20%;\n        text-align: middle;\n        transform: translateY(12%) !important;\n      }\n\n      .value-input input::-webkit-inner-spin-button,\n      .value-input input::-webkit-outer-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n      }\n\n      .value-input input {\n        -moz-appearance: textfield;\n      }\n\n      .slider-row {\n        position: relative;\n        left: 5% !important;\n        width: 70% !important;\n        top: -100% !important;\n        transform: translateY(-120%) !important;\n        z-index: 1;\n      }\n    </style>\n    <div class=\"slider-container\">\n      <div class=\"top-row\">\n        <div class=\"slider-label\">\n          <span>{{sliderName}}</span>\n        </div>\n        <div class=\"value-input\" style=\"text-align: center;\">\n          <md-input-container>\n            <input aria-label=\"value\" type=\"number\" ng-model=\"sliderValue\" ng-change=\"validateAndUpdateValue(sliderValue)\">\n          </md-input-container>\n        </div>\n      </div>\n      <div class=\"slider-row\">\n        <md-slider flex min=\"{{minValue}}\" max=\"{{maxValue}}\" ng-model=\"sliderValue\"\n          ng-change=\"updateSliderValue(sliderValue)\" aria-label=\"slider\" step=\"{{stepValue}}\">\n        </md-slider>\n      </div>\n    </div>\n</div>\n<script>\n  (function(scope) {\n        scope.sliderValue = 0;\n        scope.minValue = 0;\n        scope.maxValue = 100;\n        scope.stepValue = 1;\n        scope.sliderName = \"Crop Y (%)\";\n\n        scope.updateSliderValue = function(value) {\n          scope.send({payload: value});\n        };\n\n        scope.validateAndUpdateValue = function(value) {\n          if (value < scope.minValue) {\n            scope.sliderValue = scope.minValue;\n          } else if (value > scope.maxValue) {\n            scope.sliderValue = scope.maxValue;\n          } else {\n            scope.sliderValue = value;\n          }\n          scope.updateSliderValue(scope.sliderValue);\n        };\n\n        scope.$watch('msg', function(msg) {\n          if (msg && msg.hasOwnProperty('payload')) {\n            scope.sliderValue = msg.payload;\n          }\n        });\n    })(scope);\n</script>\n</md-card>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 310,
        "y": 240,
        "wires": [
            [
                "194f3590dd4f6e3d"
            ]
        ]
    },
    {
        "id": "9daea4bd57f7a00e",
        "type": "ui_template",
        "z": "481edaf6db5a7a54",
        "group": "365a30d0dfa83e95",
        "name": "Cropx",
        "order": 6,
        "width": 7,
        "height": 1,
        "format": "<div\n  style=\"overflow:hidden; position: absolute; top: 0; left: 4px; width: 98%; height: 100%;transform: translateY(-35%);\">\n  <md-card>\n    <style>\n      .slider-container {\n        transform: translateY(-20%);\n        display: flex;\n        flex-direction: column;\n        width: 100%;\n        overflow: hidden;\n        margin: 0 0;\n      }\n\n      .slider-container::-webkit-scrollbar-thumb {\n        background-color: transparent;\n      }\n\n      .slider-container::-webkit-scrollbar-track {\n        background-color: transparent;\n      }\n\n      .top-row {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        position: relative;\n        vertical-align: text-top;\n        z-index: 1;\n        top: -35%;\n      }\n\n      .slider-label {\n        text-align: left;\n      }\n\n      .value-input {\n        width: 20%;\n        text-align: middle;\n        transform: translateY(12%) !important;\n      }\n\n      .value-input input::-webkit-inner-spin-button,\n      .value-input input::-webkit-outer-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n      }\n\n      .value-input input {\n        -moz-appearance: textfield;\n      }\n\n      .slider-row {\n        position: relative;\n        left: 5% !important;\n        width: 70% !important;\n        top: -100% !important;\n        transform: translateY(-120%) !important;\n        z-index: 1;\n      }\n    </style>\n    <div class=\"slider-container\">\n      <div class=\"top-row\">\n        <div class=\"slider-label\">\n          <span>{{sliderName}}</span>\n        </div>\n        <div class=\"value-input\" style=\"text-align: center;\">\n          <md-input-container>\n            <input aria-label=\"value\" type=\"number\" ng-model=\"sliderValue\" ng-change=\"validateAndUpdateValue(sliderValue)\">\n          </md-input-container>\n        </div>\n      </div>\n      <div class=\"slider-row\">\n        <md-slider flex min=\"{{minValue}}\" max=\"{{maxValue}}\" ng-model=\"sliderValue\"          ng-change=\"updateSliderValue(sliderValue)\" aria-label=\"slider\" step=\"{{stepValue}}\">\n        </md-slider>\n      </div>\n    </div>\n</div>\n<script>\n  (function(scope) {\n        scope.sliderValue = 0;\n        scope.minValue = 0;\n        scope.maxValue = 100;\n        scope.stepValue = 1;\n        scope.sliderName = \"Crop x (%)\";\n\n        scope.updateSliderValue = function(value) {\n          scope.send({payload: value});\n        };\n\n        scope.validateAndUpdateValue = function(value) {\n          if (value < scope.minValue) {\n            scope.sliderValue = scope.minValue;\n          } else if (value > scope.maxValue) {\n            scope.sliderValue = scope.maxValue;\n          } else {\n            scope.sliderValue = value;\n          }\n          scope.updateSliderValue(scope.sliderValue);\n        };\n\n        scope.$watch('msg', function(msg) {\n          if (msg && msg.hasOwnProperty('payload')) {\n            scope.sliderValue = msg.payload;\n          }\n        });\n    })(scope);\n</script>\n</md-card>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 310,
        "y": 280,
        "wires": [
            [
                "2de69452e829d780"
            ]
        ]
    },
    {
        "id": "cb6ebdabaaf7d0da",
        "type": "ui_template",
        "z": "481edaf6db5a7a54",
        "group": "365a30d0dfa83e95",
        "name": "Photos",
        "order": 5,
        "width": 7,
        "height": 1,
        "format": "<div\n  style=\"overflow:hidden; position: absolute; top: 0; left: 4px; width: 98%; height: 100%;transform: translateY(-35%);\">\n  <md-card>\n    <style>\n      .slider-container {\n        transform: translateY(-20%);\n        display: flex;\n        flex-direction: column;\n        width: 100%;\n        overflow: hidden;\n        margin: 0 0;\n      }\n\n      .slider-container::-webkit-scrollbar-thumb {\n        background-color: transparent;\n      }\n\n      .slider-container::-webkit-scrollbar-track {\n        background-color: transparent;\n      }\n\n      .top-row {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        position: relative;\n        vertical-align: text-top;\n        z-index: 1;\n        top: -35%;\n      }\n\n      .slider-label {\n        text-align: left;\n      }\n\n      .value-input {\n        width: 20%;\n        text-align: middle;\n        transform: translateY(12%) !important;\n      }\n\n      .value-input input::-webkit-inner-spin-button,\n      .value-input input::-webkit-outer-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n      }\n\n      .value-input input {\n        -moz-appearance: textfield;\n      }\n\n      .slider-row {\n        position: relative;\n        left: 5% !important;\n        width: 70% !important;\n        top: -100% !important;\n        transform: translateY(-120%) !important;\n        z-index: 1;\n      }\n    </style>\n    <div class=\"slider-container\">\n      <div class=\"top-row\">\n        <div class=\"slider-label\">\n          <span>{{sliderName}}</span>\n        </div>\n        <div class=\"value-input\" style=\"text-align: center;\">\n          <md-input-container>\n            <input aria-label=\"value\" type=\"number\" ng-model=\"sliderValue\" ng-change=\"validateAndUpdateValue(sliderValue)\">\n          </md-input-container>\n        </div>\n      </div>\n      <div class=\"slider-row\">\n        <md-slider flex min=\"{{minValue}}\" max=\"{{maxValue}}\" ng-model=\"sliderValue\"          ng-change=\"updateSliderValue(sliderValue)\" aria-label=\"slider\" step=\"{{stepValue}}\">\n        </md-slider>\n      </div>\n    </div>\n</div>\n<script>\n  (function(scope) {\n        scope.sliderValue = 0;\n        scope.minValue = 10;\n        scope.maxValue = 400;\n        scope.stepValue = 10;\n        scope.sliderName =\"Photos\";\n\n        scope.updateSliderValue = function(value) {\n          scope.send({payload: value});\n        };\n\n        scope.validateAndUpdateValue = function(value) {\n          if (value < scope.minValue) {\n            scope.sliderValue = scope.minValue;\n          } else if (value > scope.maxValue) {\n            scope.sliderValue = scope.maxValue;\n          } else {\n            scope.sliderValue = value;\n          }\n          scope.updateSliderValue(scope.sliderValue);\n        };\n\n        scope.$watch('msg', function(msg) {\n          if (msg && msg.hasOwnProperty('payload')) {\n            scope.sliderValue = msg.payload;\n          }\n        });\n    })(scope);\n</script>\n</md-card>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 320,
        "y": 120,
        "wires": [
            [
                "7ef6f1b5c67201fe"
            ]
        ]
    },
    {
        "id": "82ecd3cd971cb7ea",
        "type": "ui_text",
        "z": "481edaf6db5a7a54",
        "group": "365a30d0dfa83e95",
        "order": 2,
        "width": 3,
        "height": 1,
        "name": "projectname",
        "label": "Projectname",
        "format": "",
        "layout": "row-left",
        "className": "",
        "x": 530,
        "y": 40,
        "wires": []
    },
    {
        "id": "ed2974731fb8a84e",
        "type": "ui_template",
        "z": "481edaf6db5a7a54",
        "group": "ac7409105cfecac6",
        "name": "threshold",
        "order": 5,
        "width": 7,
        "height": 1,
        "format": "<div\n  style=\"overflow:hidden; position: absolute; top: 0; left: 4px; width: 98%; height: 100%;transform: translateY(-35%);\">\n  <md-card>\n    <style>\n      .slider-container {\n        transform: translateY(-20%);\n        display: flex;\n        flex-direction: column;\n        width: 100%;\n        overflow: hidden;\n        margin: 0 0;\n      }\n\n      .slider-container::-webkit-scrollbar-thumb {\n        background-color: transparent;\n      }\n\n      .slider-container::-webkit-scrollbar-track {\n        background-color: transparent;\n      }\n\n      .top-row {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        position: relative;\n        vertical-align: text-top;\n        z-index: 1;\n        top: -35%;\n      }\n\n      .slider-label {\n        text-align: left;\n      }\n\n      .value-input {\n        width: 20%;\n        text-align: middle;\n        transform: translateY(12%) !important;\n      }\n\n      .value-input input::-webkit-inner-spin-button,\n      .value-input input::-webkit-outer-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n      }\n\n      .value-input input {\n        -moz-appearance: textfield;\n      }\n\n      .slider-row {\n        position: relative;\n        left: 5% !important;\n        width: 70% !important;\n        top: -100% !important;\n        transform: translateY(-120%) !important;\n        z-index: 1;\n      }\n    </style>\n    <div class=\"slider-container\">\n      <div class=\"top-row\">\n        <div class=\"slider-label\">\n          <span>{{sliderName}}</span>\n        </div>\n        <div class=\"value-input\" style=\"text-align: center;\">\n          <md-input-container>\n            <input aria-label=\"value\" type=\"number\" ng-model=\"sliderValue\" ng-change=\"validateAndUpdateValue(sliderValue)\">\n          </md-input-container>\n        </div>\n      </div>\n      <div class=\"slider-row\">\n        <md-slider flex min=\"{{minValue}}\" max=\"{{maxValue}}\" ng-model=\"sliderValue\"          ng-change=\"updateSliderValue(sliderValue)\" aria-label=\"slider\" step=\"{{stepValue}}\">\n        </md-slider>\n      </div>\n    </div>\n</div>\n<script>\n  (function(scope) {\n        scope.sliderValue = 1;\n        scope.minValue = 0;\n        scope.maxValue = 255;\n        scope.stepValue = 1;\n        scope.sliderName =\"Mask Threshold (1-255)\";\n\n        scope.updateSliderValue = function(value) {\n          scope.send({payload: value});\n        };\n\n        scope.validateAndUpdateValue = function(value) {\n          if (value < scope.minValue) {\n            scope.sliderValue = scope.minValue;\n          } else if (value > scope.maxValue) {\n            scope.sliderValue = scope.maxValue;\n          } else {\n            scope.sliderValue = value;\n          }\n          scope.updateSliderValue(scope.sliderValue);\n        };\n\n        scope.$watch('msg', function(msg) {\n          if (msg && msg.hasOwnProperty('payload')) {\n            scope.sliderValue = msg.payload;\n          }\n        });\n    })(scope);\n</script>\n</md-card>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 320,
        "y": 520,
        "wires": [
            [
                "06e1e19835a9816e"
            ]
        ]
    },
    {
        "id": "8cbdbfecbd12ef83",
        "type": "python3-function",
        "z": "481edaf6db5a7a54",
        "name": "led",
        "func": "from OpenScan import fade_led, ringlight, load_int\n\npin = load_int('pin_ringlight1')\n\nif 'light' in msg:\n    val = msg['light']\n\n    if val ==1:\n        fade_led(pin,50, 100, True)\n    else:\n        fade_led(pin,50, 100, False)\n\nreturn msg",
        "outputs": 1,
        "x": 750,
        "y": 880,
        "wires": [
            [
                "1fe18f3b0b52aabd"
            ]
        ]
    },
    {
        "id": "06e1e19835a9816e",
        "type": "function",
        "z": "481edaf6db5a7a54",
        "name": "write",
        "func": "const delay = 100; // 100 ms delay\n\nif (!context.timeout) {\n  context.timeout = setTimeout(() => {\n    node.send({ payload: msg.payload });\n    clearTimeout(context.timeout);\n    delete context.timeout;\n  }, delay);\n} else {\n  context.set(\"lastMessage\", msg.payload);\n  clearTimeout(context.timeout);\n  context.timeout = setTimeout(() => {\n    node.send({ payload: context.get(\"lastMessage\") });\n    clearTimeout(context.timeout);\n    delete context.timeout;\n  }, delay);\n}\nvar file = 'cam_mask_threshold'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\n\nconst content = String(msg.payload)\nfs.writeFile(filepath + file, content, err => {\n  if (err) {\n    return\n  }\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "2d5b1eb4380ae5a8",
        "type": "function",
        "z": "481edaf6db5a7a54",
        "name": "loadI",
        "func": "var file = 'cam_mask_threshold'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst data = fs.readFileSync(filepath+file, 'utf8');\nmsg.payload = parseInt(data);\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 520,
        "wires": [
            [
                "ed2974731fb8a84e"
            ]
        ]
    },
    {
        "id": "7dd287f40385922f",
        "type": "ui_button",
        "z": "481edaf6db5a7a54",
        "name": "start ",
        "group": "365a30d0dfa83e95",
        "order": 10,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-play",
        "payload": "",
        "payloadType": "date",
        "topic": "enabled",
        "topicType": "str",
        "x": 130,
        "y": 1040,
        "wires": [
            [
                "33d94a04b96a2de0",
                "6d15f717d5a11002",
                "9a6b30a0175a8ecd"
            ]
        ]
    },
    {
        "id": "579f2211199fd6ab",
        "type": "ui_button",
        "z": "481edaf6db5a7a54",
        "name": "stop",
        "group": "365a30d0dfa83e95",
        "order": 12,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-stop",
        "payload": "numberofphotos",
        "payloadType": "global",
        "topic": "",
        "topicType": "str",
        "x": 490,
        "y": 1100,
        "wires": [
            [
                "1787f08ed7070ddd",
                "c1c044f3c2139f68"
            ]
        ]
    },
    {
        "id": "1787f08ed7070ddd",
        "type": "python3-function",
        "z": "481edaf6db5a7a54",
        "name": "stop",
        "func": "from OpenScan import load_str, save\n\nstatus = load_str('status_internal_cam')\n\nif status == 'no camera found' or status[:5]=='Featu' or status =='--READY--':\n    return\n\nsave('status_internal_cam', 'Routine-stopping')",
        "outputs": 1,
        "x": 630,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "e9b13dfd9f8d3711",
        "type": "link out",
        "z": "481edaf6db5a7a54",
        "name": "",
        "mode": "link",
        "links": [
            "8367cfa0bf5bc5df",
            "b33d604c.5f1a6",
            "c8b93b42c720b9cf"
        ],
        "x": 395,
        "y": 1000,
        "wires": []
    },
    {
        "id": "9654deebb668e012",
        "type": "inject",
        "z": "481edaf6db5a7a54",
        "name": "1s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 1140,
        "wires": [
            [
                "c1c044f3c2139f68"
            ]
        ]
    },
    {
        "id": "8367cfa0bf5bc5df",
        "type": "link in",
        "z": "481edaf6db5a7a54",
        "name": "start routine",
        "links": [
            "200d4b9951b6e066",
            "8689e938.dd9e38",
            "e9b13dfd9f8d3711",
            "f20f2dbc.0f123",
            "fb13752beddee9f2"
        ],
        "x": 45,
        "y": 1040,
        "wires": [
            [
                "7dd287f40385922f"
            ]
        ]
    },
    {
        "id": "fb13752beddee9f2",
        "type": "link out",
        "z": "481edaf6db5a7a54",
        "name": "",
        "mode": "link",
        "links": [
            "2f4c0f98.dee2",
            "8367cfa0bf5bc5df",
            "b33d604c.5f1a6",
            "c8b93b42c720b9cf"
        ],
        "x": 525,
        "y": 1040,
        "wires": []
    },
    {
        "id": "33d94a04b96a2de0",
        "type": "function",
        "z": "481edaf6db5a7a54",
        "name": "enable",
        "func": "global.set('flag', false)\n\nvar file = 'status_internal_cam'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nvar data = fs.readFileSync(filepath+file, 'utf8');\n\n\nif (data === 'no camera found' || data.substring(0,5) === 'Featu'){\n    return\n}\n\nmsg.enabled = true\nreturn msg\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 1100,
        "wires": [
            [
                "579f2211199fd6ab"
            ]
        ]
    },
    {
        "id": "c1c044f3c2139f68",
        "type": "function",
        "z": "481edaf6db5a7a54",
        "name": "msg",
        "func": "msg.enabled = false\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1140,
        "wires": [
            [
                "579f2211199fd6ab"
            ]
        ]
    },
    {
        "id": "1daf9e3a5bd5ab48",
        "type": "function",
        "z": "481edaf6db5a7a54",
        "name": "msg",
        "func": "global.set('flag_pw', true)\nglobal.set('flag', true)\nmsg.enabled = true\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1040,
        "wires": [
            [
                "fb13752beddee9f2"
            ]
        ]
    },
    {
        "id": "6d15f717d5a11002",
        "type": "function",
        "z": "481edaf6db5a7a54",
        "name": "disable",
        "func": "msg.enabled = false\nmsg.payload = false\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 1000,
        "wires": [
            [
                "e9b13dfd9f8d3711"
            ]
        ]
    },
    {
        "id": "9a6b30a0175a8ecd",
        "type": "python3-function",
        "z": "481edaf6db5a7a54",
        "name": "Routine",
        "func": "from OpenScan import load_bool, load_str, load_int, load_float, motorrun, sort_spherical_coordinates_deg, create_coordinates, take_photo, save, \\\n    load_bool, camera\nfrom time import sleep, strftime, time\nfrom zipfile import ZipFile, ZIP_DEFLATED\nfrom os import system\nfrom os.path import isfile\nimport math\nimport threading\nimport numpy as np\n\nif load_str(\"status_internal_cam\") == \"no camera found\" or load_str(\"status_internal_cam\")[:5] == \"Featu\":\n    return\n\n#motorrun('rotor', 140, ES_enable=True, ES_start_state=True)\n#motorrun('rotor', 10)\n\n\n\nsave('status_internal_cam', 'Routine-preparing')\ncamera('/picam2_switch_mode?mode=1')\n\nsave('cam_sharparea', False)\nsave('cam_features', False)\n\n\nprojectname = load_str(\"routine_projectname\")\nangle_max = load_int('rotor_anglemax')\nangle_min = load_int('rotor_anglemin')\nangle_start = load_int('rotor_anglestart')\nphotocount = load_int('routine_photocount')\n\nfocus_min = load_float('cam_focus_min')\nfocus_max = load_float('cam_focus_max')\nstacksize = load_int('cam_stacksize')\n\nif focus_min == focus_max:\n    stacksize = 1\n\nfocuslist = []\nif stacksize == 1:\n    steps = 3 + int(abs(focus_max-focus_min)*0.8)\nelse:\n    steps = stacksize\n\nfor i in range (steps):\n    focuslist.append(min(focus_min,focus_max) + i * abs(focus_max-focus_min)/(steps-1))\n\nmsg['payload'] = focuslist\nmsg['payload2'] = []\ncounter = 0\n\nbasepath = '/home/pi/OpenScan/'\ntemppath = basepath + 'tmp2/preview.jpg'\nzippath = basepath + 'tmp.zip'\n\nprojectcode = strftime('20%y-%m-%d_%H.%M.%S-') + projectname\n\nif isfile(zippath):\n    system('rm ' + zippath)\nsleep(1)\n\ncoordinates = create_coordinates(angle_min, angle_max, photocount)\n\n#for i in range (36):\n#    coordinates.append((-25,10*i))\n\ncoordinates = sort_spherical_coordinates_deg(coordinates)\n\n#coordinates = [[45,0],[0,0],[-10,0]]\n\nmsg['payload'] = coordinates\n\nposition_last = (angle_start, 0)\n\nzip = ZipFile(zippath, \"a\", ZIP_DEFLATED, allowZip64=True)\n\nstarttime = time()\n\ndef photo(counter2):\n    camera('/picam2_take_photo')\n    returning[0] = focus(returning[0])\n    zip.write(temppath, projectname + '_' + str(counter) + \".jpg\")\n\ndef photo_stack():\n    c2 = 0\n    for f in focuslist:\n        if load_str('status_internal_cam') == \"Routine-stopping\":\n            break\n        save('status_internal_cam', 'Routine-Photo ' + str(counter) + '/' + str(photocount) + \"-F\"+ str(c2+1))\n        camera('/picam2_take_photo')\n        camera('/picam2_focus?focus=' + str(f))        \n        sleep(0.1)\n        zip.write(temppath, projectname + '_' + str(counter) + \"-\" + str(c2) + \".jpg\")\n        c2 += 1\n\ndef move_motor():\n    sleep(1.5 * load_int('cam_shutter') / 1000000)\n    rotor_angle = position[0] - position_last[0]\n    msg['payload2'].append(rotor_angle)\n    #if abs(rotor_angle) > 180:\n    #    rotor_angle = -360 * rotor_angle / abs(rotor_angle) + rotor_angle\n    tt_angle = position_last[1] - position[1]\n    if tt_angle > 180:\n        tt_angle -= 360\n    elif tt_angle < -180:\n        tt_angle += 360\n\n    motorrun('tt',tt_angle)\n    motorrun('rotor',rotor_angle)\n    return\n\n    # THE FOLLOWING DOES NOT WORK PROPERLY WITH THREADING ?!\n\n    tt_thread = threading.Thread(target=motorrun, args=('tt', tt_angle))\n    rotor_thread = threading.Thread(target=motorrun, args=('rotor', rotor_angle))\n    tt_thread.start()\n    rotor_thread.start()\n    tt_thread.join()\n    rotor_thread.join()\n\n\ncounter2 = 0\n\n\ndef focus(i):\n    f = focuslist[i]\n    camera('/picam2_focus?focus=' + str(f))\n    if i < len(focuslist) - 1:\n        i += 1\n    else:\n        i = 0\n    return i\n\n\nfor position in coordinates:\n    counter += 1\n    filepath = basepath + 'tmp/' + projectname + '_' + str(counter) + \".jpg\"\n    if load_str('status_internal_cam') == \"Routine-stopping\":\n        break\n    if counter < 6:\n        ETA = ''\n    \n    save('status_internal_cam', 'Routine-Photo ' + str(counter) + '/' + str(photocount) + ETA)\n\n    sleep(load_float(\"cam_delay_before\"))\n    \n    if stacksize ==1:\n        returning = [counter2]\n        photo_thread = threading.Thread(target=photo, args=(returning,))\n        photo_thread.start()\n\n        motor_thread = threading.Thread(target=move_motor)\n        motor_thread.start()\n        photo_thread.join()\n        motor_thread.join()\n        counter2 = returning[0]\n\n    else:\n        photo_stack()\n        move_motor()\n    \n\n    sleep(load_float(\"cam_delay_after\"))\n    ETA = '-ETA:' + str(int((photocount / counter - 1) * (time() - starttime))) + '/' + str(\n        int(photocount / counter * (time() - starttime))) + 's'\n    position_last = position\n\nzip.close()\ncamera('/picam2_switch_mode?mode=0')\n\nsave('status_internal_cam', 'Routine-done')\n\nmotorrun('rotor', -position_last[0] )\nmotorrun('tt', position_last[1])\n\nsave('status_internal_cam', '--READY--')\n\nsystem('mv ' + zippath + \" \" + basepath + \"scans/\" + projectcode + \".zip\")\n\nreturn msg\n",
        "outputs": 1,
        "x": 300,
        "y": 1040,
        "wires": [
            [
                "1daf9e3a5bd5ab48",
                "d3d9c51cac4510d0"
            ]
        ]
    },
    {
        "id": "afe47a9eaae6f67f",
        "type": "ui_text",
        "z": "481edaf6db5a7a54",
        "group": "365a30d0dfa83e95",
        "order": 1,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "Current Status:",
        "format": "<font color= {{msg.color}} > {{msg.payload}} </font>",
        "layout": "row-spread",
        "className": "",
        "x": 340,
        "y": 40,
        "wires": []
    },
    {
        "id": "8608517d0567d63f",
        "type": "function",
        "z": "481edaf6db5a7a54",
        "name": "loadS",
        "func": "var file = 'status_internal_cam'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst data = fs.readFileSync(filepath+file, 'utf8');\nmsg.payload = String(data);\n\nif (data === 'no camera found'){\n    msg.color = 'red'\n}\n\nreturn msg\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 40,
        "wires": [
            [
                "afe47a9eaae6f67f"
            ]
        ]
    },
    {
        "id": "6bf8344af427a6ba",
        "type": "link in",
        "z": "481edaf6db5a7a54",
        "name": "start status",
        "links": [
            "6c6ef2255a7d39e5"
        ],
        "x": 55,
        "y": 40,
        "wires": [
            [
                "8608517d0567d63f"
            ]
        ]
    },
    {
        "id": "78cfe60013a1bea4",
        "type": "ui_switch",
        "z": "481edaf6db5a7a54",
        "name": "",
        "label": "Show Sharpness",
        "tooltip": "",
        "group": "ac7409105cfecac6",
        "order": 2,
        "width": 7,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 350,
        "y": 380,
        "wires": [
            [
                "9774e7ad3b506354"
            ]
        ]
    },
    {
        "id": "9774e7ad3b506354",
        "type": "python3-function",
        "z": "481edaf6db5a7a54",
        "name": "focus",
        "func": "from OpenScan import save\nsave('cam_sharparea',msg['payload'])\n\nif not 'flag' in msg:\n    msg['flag'] = True\n    msg['payload'] = False\n    return msg",
        "outputs": 1,
        "x": 510,
        "y": 380,
        "wires": [
            [
                "f0af909f3e739b22"
            ]
        ]
    },
    {
        "id": "39c744466a21735e",
        "type": "ui_template",
        "z": "481edaf6db5a7a54",
        "group": "90223f7ddc082321",
        "name": "focus_min",
        "order": 3,
        "width": 7,
        "height": 1,
        "format": "<div\n  style=\"overflow:hidden; position: absolute; top: 0; left: 4px; width: 98%; height: 100%;transform: translateY(-35%);\">\n  <md-card>\n    <style>\n      .slider-container {\n        transform: translateY(-20%);\n        display: flex;\n        flex-direction: column;\n        width: 100%;\n        overflow: hidden;\n        margin: 0 0;\n      }\n\n      .slider-container::-webkit-scrollbar-thumb {\n        background-color: transparent;\n      }\n\n      .slider-container::-webkit-scrollbar-track {\n        background-color: transparent;\n      }\n\n      .top-row {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        position: relative;\n        vertical-align: text-top;\n        z-index: 1;\n        top: -35%;\n      }\n\n      .slider-label {\n        text-align: left;\n      }\n\n      .value-input {\n        width: 20%;\n        text-align: middle;\n        transform: translateY(12%) !important;\n      }\n\n      .value-input input::-webkit-inner-spin-button,\n      .value-input input::-webkit-outer-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n      }\n\n      .value-input input {\n        -moz-appearance: textfield;\n      }\n\n      .slider-row {\n        position: relative;\n        left: 5% !important;\n        width: 70% !important;\n        top: -100% !important;\n        transform: translateY(-120%) !important;\n        z-index: 1;\n      }\n    </style>\n    <div class=\"slider-container\">\n      <div class=\"top-row\">\n        <div class=\"slider-label\">\n          <span>{{sliderName}}</span>\n        </div>\n        <div class=\"value-input\" style=\"text-align: center;\">\n          <md-input-container>\n            <input aria-label=\"value\" type=\"number\" ng-model=\"sliderValue\" ng-change=\"validateAndUpdateValue(sliderValue)\">\n          </md-input-container>\n        </div>\n      </div>\n      <div class=\"slider-row\">\n        <md-slider flex min=\"{{minValue}}\" max=\"{{maxValue}}\" ng-model=\"sliderValue\"          ng-change=\"updateSliderValue(sliderValue)\" aria-label=\"slider\" step=\"{{stepValue}}\">\n        </md-slider>\n      </div>\n    </div>\n</div>\n<script>\n  (function(scope) {\n        scope.sliderValue = 11.5;\n        scope.minValue = 1;\n        scope.maxValue = 15;\n        scope.stepValue = 0.1;\n        scope.sliderName =\"Focus_min\";\n\n        scope.updateSliderValue = function(value) {\n          scope.send({payload: value});\n        };\n\n        scope.validateAndUpdateValue = function(value) {\n          if (value < scope.minValue) {\n            scope.sliderValue = scope.minValue;\n          } else if (value > scope.maxValue) {\n            scope.sliderValue = scope.maxValue;\n          } else {\n            scope.sliderValue = value;\n          }\n          scope.updateSliderValue(scope.sliderValue);\n        };\n\n        scope.$watch('msg', function(msg) {\n          if (msg && msg.hasOwnProperty('payload')) {\n            scope.sliderValue = msg.payload;\n          }\n        });\n    })(scope);\n</script>\n</md-card>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 990,
        "y": 40,
        "wires": [
            [
                "fa181d22775c2ce6"
            ]
        ]
    },
    {
        "id": "61aab497fa50898e",
        "type": "ui_template",
        "z": "481edaf6db5a7a54",
        "group": "90223f7ddc082321",
        "name": "focus_max",
        "order": 4,
        "width": 7,
        "height": 1,
        "format": "<div\n  style=\"overflow:hidden; position: absolute; top: 0; left: 4px; width: 98%; height: 100%;transform: translateY(-35%);\">\n  <md-card>\n    <style>\n      .slider-container {\n        transform: translateY(-20%);\n        display: flex;\n        flex-direction: column;\n        width: 100%;\n        overflow: hidden;\n        margin: 0 0;\n      }\n\n      .slider-container::-webkit-scrollbar-thumb {\n        background-color: transparent;\n      }\n\n      .slider-container::-webkit-scrollbar-track {\n        background-color: transparent;\n      }\n\n      .top-row {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        position: relative;\n        vertical-align: text-top;\n        z-index: 1;\n        top: -35%;\n      }\n\n      .slider-label {\n        text-align: left;\n      }\n\n      .value-input {\n        width: 20%;\n        text-align: middle;\n        transform: translateY(12%) !important;\n      }\n\n      .value-input input::-webkit-inner-spin-button,\n      .value-input input::-webkit-outer-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n      }\n\n      .value-input input {\n        -moz-appearance: textfield;\n      }\n\n      .slider-row {\n        position: relative;\n        left: 5% !important;\n        width: 70% !important;\n        top: -100% !important;\n        transform: translateY(-120%) !important;\n        z-index: 1;\n      }\n    </style>\n    <div class=\"slider-container\">\n      <div class=\"top-row\">\n        <div class=\"slider-label\">\n          <span>{{sliderName}}</span>\n        </div>\n        <div class=\"value-input\" style=\"text-align: center;\">\n          <md-input-container>\n            <input aria-label=\"value\" type=\"number\" ng-model=\"sliderValue\" ng-change=\"validateAndUpdateValue(sliderValue)\">\n          </md-input-container>\n        </div>\n      </div>\n      <div class=\"slider-row\">\n        <md-slider flex min=\"{{minValue}}\" max=\"{{maxValue}}\" ng-model=\"sliderValue\"          ng-change=\"updateSliderValue(sliderValue)\" aria-label=\"slider\" step=\"{{stepValue}}\">\n        </md-slider>\n      </div>\n    </div>\n</div>\n<script>\n  (function(scope) {\n        scope.sliderValue = 11.5;\n        scope.minValue = 1;\n        scope.maxValue = 15;\n        scope.stepValue = 0.1;\n        scope.sliderName =\"Focus_max\";\n\n        scope.updateSliderValue = function(value) {\n          scope.send({payload: value});\n        };\n\n        scope.validateAndUpdateValue = function(value) {\n          if (value < scope.minValue) {\n            scope.sliderValue = scope.minValue;\n          } else if (value > scope.maxValue) {\n            scope.sliderValue = scope.maxValue;\n          } else {\n            scope.sliderValue = value;\n          }\n          scope.updateSliderValue(scope.sliderValue);\n        };\n\n        scope.$watch('msg', function(msg) {\n          if (msg && msg.hasOwnProperty('payload')) {\n            scope.sliderValue = msg.payload;\n          }\n        });\n    })(scope);\n</script>\n</md-card>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 990,
        "y": 80,
        "wires": [
            [
                "c615034ea6b26174"
            ]
        ]
    },
    {
        "id": "5e83b653850fa16e",
        "type": "ui_template",
        "z": "481edaf6db5a7a54",
        "group": "ac7409105cfecac6",
        "name": "stacksize",
        "order": 4,
        "width": 7,
        "height": 1,
        "format": "<div\n  style=\"overflow:hidden; position: absolute; top: 0; left: 4px; width: 98%; height: 100%;transform: translateY(-35%);\">\n  <md-card>\n    <style>\n      .slider-container {\n        transform: translateY(-20%);\n        display: flex;\n        flex-direction: column;\n        width: 100%;\n        overflow: hidden;\n        margin: 0 0;\n      }\n\n      .slider-container::-webkit-scrollbar-thumb {\n        background-color: transparent;\n      }\n\n      .slider-container::-webkit-scrollbar-track {\n        background-color: transparent;\n      }\n\n      .top-row {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        position: relative;\n        vertical-align: text-top;\n        z-index: 1;\n        top: -35%;\n      }\n\n      .slider-label {\n        text-align: left;\n      }\n\n      .value-input {\n        width: 20%;\n        text-align: middle;\n        transform: translateY(12%) !important;\n      }\n\n      .value-input input::-webkit-inner-spin-button,\n      .value-input input::-webkit-outer-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n      }\n\n      .value-input input {\n        -moz-appearance: textfield;\n      }\n\n      .slider-row {\n        position: relative;\n        left: 5% !important;\n        width: 70% !important;\n        top: -100% !important;\n        transform: translateY(-120%) !important;\n        z-index: 1;\n      }\n    </style>\n    <div class=\"slider-container\">\n      <div class=\"top-row\">\n        <div class=\"slider-label\">\n          <span>{{sliderName}}</span>\n        </div>\n        <div class=\"value-input\" style=\"text-align: center;\">\n          <md-input-container>\n            <input aria-label=\"value\" type=\"number\" ng-model=\"sliderValue\" ng-change=\"validateAndUpdateValue(sliderValue)\">\n          </md-input-container>\n        </div>\n      </div>\n      <div class=\"slider-row\">\n        <md-slider flex min=\"{{minValue}}\" max=\"{{maxValue}}\" ng-model=\"sliderValue\"          ng-change=\"updateSliderValue(sliderValue)\" aria-label=\"slider\" step=\"{{stepValue}}\">\n        </md-slider>\n      </div>\n    </div>\n</div>\n<script>\n  (function(scope) {\n        scope.sliderValue = 1;\n        scope.minValue = 1;\n        scope.maxValue = 10;\n        scope.stepValue = 1;\n        scope.sliderName =\"Stacking\";\n\n        scope.updateSliderValue = function(value) {\n          scope.send({payload: value});\n        };\n\n        scope.validateAndUpdateValue = function(value) {\n          if (value < scope.minValue) {\n            scope.sliderValue = scope.minValue;\n          } else if (value > scope.maxValue) {\n            scope.sliderValue = scope.maxValue;\n          } else {\n            scope.sliderValue = value;\n          }\n          scope.updateSliderValue(scope.sliderValue);\n        };\n\n        scope.$watch('msg', function(msg) {\n          if (msg && msg.hasOwnProperty('payload')) {\n            scope.sliderValue = msg.payload;\n          }\n        });\n    })(scope);\n</script>\n</md-card>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 320,
        "y": 480,
        "wires": [
            [
                "237c2135cdad86ea"
            ]
        ]
    },
    {
        "id": "dd7fb8791d34c751",
        "type": "function",
        "z": "481edaf6db5a7a54",
        "name": "enable",
        "func": "global.set('light', 1)\nmsg.light = 1\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 880,
        "wires": [
            [
                "180476141c2a44ad"
            ]
        ]
    },
    {
        "id": "5baf89a2682265f7",
        "type": "link in",
        "z": "481edaf6db5a7a54",
        "name": "enable led",
        "links": [
            "eb1a2387a1eeea76"
        ],
        "x": 145,
        "y": 880,
        "wires": [
            [
                "dd7fb8791d34c751"
            ]
        ]
    },
    {
        "id": "6a26e8a7253d708c",
        "type": "function",
        "z": "481edaf6db5a7a54",
        "name": "loadF",
        "func": "var file = 'cam_focus_min'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst data = fs.readFileSync(filepath+file, 'utf8');\nmsg.payload = parseFloat(data);\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 40,
        "wires": [
            [
                "39c744466a21735e"
            ]
        ]
    },
    {
        "id": "35ad7e55833836c1",
        "type": "function",
        "z": "481edaf6db5a7a54",
        "name": "loadF",
        "func": "var file = 'cam_focus_max'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst data = fs.readFileSync(filepath+file, 'utf8');\nmsg.payload = parseFloat(data);\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 80,
        "wires": [
            [
                "61aab497fa50898e"
            ]
        ]
    },
    {
        "id": "9fd259de91de1da1",
        "type": "link in",
        "z": "481edaf6db5a7a54",
        "name": "start routine settings",
        "links": [
            "960912e90ba5b5bc",
            "50eeb3e362f9027f"
        ],
        "x": 735,
        "y": 40,
        "wires": [
            [
                "6a26e8a7253d708c",
                "35ad7e55833836c1"
            ]
        ]
    },
    {
        "id": "fa181d22775c2ce6",
        "type": "function",
        "z": "481edaf6db5a7a54",
        "name": "rate",
        "func": "const delay = 100; // 100 ms delay\n\nif (!context.timeout) {\n    context.timeout = setTimeout(() => {\n        node.send({ payload: msg.payload });\n        clearTimeout(context.timeout);\n        delete context.timeout;\n    }, delay);\n} else {\n    context.set(\"lastMessage\", msg.payload);\n    clearTimeout(context.timeout);\n    context.timeout = setTimeout(() => {\n        node.send({ payload: context.get(\"lastMessage\") });\n        clearTimeout(context.timeout);\n        delete context.timeout;\n    }, delay);\n}\nvar file = 'cam_focus_min'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst content = String(msg.payload)\nfs.writeFile(filepath + file, content, err => {\n    if (err) {\n        return\n    }\n    return msg\n});\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 40,
        "wires": [
            [
                "ae5ee8787145906d"
            ]
        ]
    },
    {
        "id": "c615034ea6b26174",
        "type": "function",
        "z": "481edaf6db5a7a54",
        "name": "rate",
        "func": "const delay = 100; // 100 ms delay\n\nif (!context.timeout) {\n    context.timeout = setTimeout(() => {\n        node.send({ payload: msg.payload });\n        clearTimeout(context.timeout);\n        delete context.timeout;\n    }, delay);\n} else {\n    context.set(\"lastMessage\", msg.payload);\n    clearTimeout(context.timeout);\n    context.timeout = setTimeout(() => {\n        node.send({ payload: context.get(\"lastMessage\") });\n        clearTimeout(context.timeout);\n        delete context.timeout;\n    }, delay);\n}\nvar file = 'cam_focus_max'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst content = String(msg.payload)\nfs.writeFile(filepath + file, content, err => {\n    if (err) {\n        return\n    }\n    return msg\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 80,
        "wires": [
            [
                "ae5ee8787145906d"
            ]
        ]
    },
    {
        "id": "ae5ee8787145906d",
        "type": "python3-function",
        "z": "481edaf6db5a7a54",
        "name": "focus",
        "func": "from OpenScan import camera\ncamera('/picam2_focus?focus=' + str(msg['payload']))\n\nreturn msg",
        "outputs": 1,
        "x": 1290,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "f0af909f3e739b22",
        "type": "ui_switch",
        "z": "481edaf6db5a7a54",
        "name": "",
        "label": "Show Features",
        "tooltip": "",
        "group": "ac7409105cfecac6",
        "order": 1,
        "width": 7,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 340,
        "y": 420,
        "wires": [
            [
                "710fc2dbb5ef0167"
            ]
        ]
    },
    {
        "id": "710fc2dbb5ef0167",
        "type": "python3-function",
        "z": "481edaf6db5a7a54",
        "name": "focus",
        "func": "from OpenScan import save\nsave('cam_features',msg['payload'])\n\n\nif not 'flag' in msg:\n    msg['flag'] = True\n    msg['payload'] = False\n    return msg",
        "outputs": 1,
        "x": 510,
        "y": 420,
        "wires": [
            [
                "78cfe60013a1bea4"
            ]
        ]
    },
    {
        "id": "d93c2b67bcf23b9a",
        "type": "function",
        "z": "481edaf6db5a7a54",
        "name": "loadI",
        "func": "var file = 'cam_stacksize'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst data = fs.readFileSync(filepath+file, 'utf8');\nmsg.payload = parseInt(data);\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 480,
        "wires": [
            [
                "5e83b653850fa16e"
            ]
        ]
    },
    {
        "id": "237c2135cdad86ea",
        "type": "function",
        "z": "481edaf6db5a7a54",
        "name": "write",
        "func": "const delay = 100; // 100 ms delay\n\nif (!context.timeout) {\n  context.timeout = setTimeout(() => {\n    node.send({ payload: msg.payload });\n    clearTimeout(context.timeout);\n    delete context.timeout;\n  }, delay);\n} else {\n  context.set(\"lastMessage\", msg.payload);\n  clearTimeout(context.timeout);\n  context.timeout = setTimeout(() => {\n    node.send({ payload: context.get(\"lastMessage\") });\n    clearTimeout(context.timeout);\n    delete context.timeout;\n  }, delay);\n}\nvar file = 'cam_stacksize'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\n\nconst content = String(msg.payload)\nfs.writeFile(filepath + file, content, err => {\n  if (err) {\n    return\n  }\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "fd0258418489839d",
        "type": "link in",
        "z": "481edaf6db5a7a54",
        "name": "start routine settings",
        "links": [
            "960912e90ba5b5bc",
            "50eeb3e362f9027f"
        ],
        "x": 95,
        "y": 480,
        "wires": [
            [
                "2d5b1eb4380ae5a8",
                "d93c2b67bcf23b9a"
            ]
        ]
    },
    {
        "id": "c6f281351e11b58a",
        "type": "inject",
        "z": "481edaf6db5a7a54",
        "name": "",
        "props": [
            {
                "p": "enabled",
                "v": "true",
                "vt": "bool"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 600,
        "wires": [
            [
                "ed2974731fb8a84e"
            ]
        ]
    },
    {
        "id": "ca4ca7fae36d312d",
        "type": "inject",
        "z": "481edaf6db5a7a54",
        "name": "",
        "props": [
            {
                "p": "enabled",
                "v": "false",
                "vt": "bool"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 640,
        "wires": [
            [
                "ed2974731fb8a84e"
            ]
        ]
    },
    {
        "id": "c8b93b42c720b9cf",
        "type": "link in",
        "z": "481edaf6db5a7a54",
        "name": "sharpness/features",
        "links": [
            "200d4b9951b6e066",
            "e9b13dfd9f8d3711",
            "fb13752beddee9f2"
        ],
        "x": 85,
        "y": 380,
        "wires": [
            [
                "78cfe60013a1bea4"
            ]
        ]
    },
    {
        "id": "d3d9c51cac4510d0",
        "type": "debug",
        "z": "481edaf6db5a7a54",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 980,
        "wires": []
    },
    {
        "id": "ea54fcc2.cfcc2",
        "type": "python3-function",
        "z": "80a3942785a26c29",
        "name": "get dirs",
        "func": "from glob import glob\nimport os\nfrom zipfile import ZipFile\nfrom datetime import datetime\nfrom PIL import Image\n\ndef set_stats(stat):\n    try:\n        with open(directory+set[:-4]+\"/\"+stat,\"r\") as file:\n            stat=file.read()\n    except:\n        stat=\"\"\n    return stat\n\ntable=[]\ndirectory=\"/home/pi/OpenScan/scans/\"\n\nfor d in glob(directory+\"*.zip\"):\n    set=os.path.basename(d)\n\n    try:\n        with ZipFile(d, 'r') as f:\n            photos = len(f.namelist())\n        \n            if not os.path.isfile(directory + 'preview/' + os.path.basename(d)[:-4]+'.jpg'):\n                image = f.open(f.namelist()[int(photos/2)])\n                img = Image.open(image)\n                width, height = img.size\n                width_factor = width/300\n                height_factor = height/295\n                if height_factor>=width_factor and height_factor > 1:\n                    new_size=(int(width/height_factor), int(height/height_factor))\n                    img = img.resize(new_size)\n                elif height_factor<width_factor and width_factor > 1:\n                    new_size=(int(width/width_factor),int(height/width_factor))\n                    img = img.resize(new_size)\n                img.save(directory + 'preview/' + os.path.basename(d)[:-4] +'.jpg')\n        list=[]\n        for fi in f.filelist:\n            list.append(f.getinfo(fi.filename).date_time)\n        \n        duration = str(datetime(*max(list)) - datetime(*min(list)))\n        \n        size = float(int(float(os.path.getsize(d))/100000))/10\n        size_full= os.path.getsize(d)\n        status=set_stats(\"status\")\n        expiration=set_stats(\"expiration\")\n        download=set_stats(\"download\")\n    \n        if len(download)!=0:\n            table.append({\n                \"Set\":set,\n                \"Photos\":photos,\n                \"Size\":str(size)+\"MB\",\n                \"Date\":set[:16],\n                \"Name\":(set[20:-4]),\n                \"Status\":status,\n                \"Download\":\"<a href=\"+download+\">RESULT</a>\",\n                \"Size_full\":size_full,\n                \"Duration\":duration,\n                })\n        else:\n            table.append({\n                \"Set\":set,\n                \"Photos\":photos,\n                \"Size\":str(size)+\"MB\",\n                \"Date\":set[:16],\n                \"Name\":(set[20:-4]),\n                \"Status\":status,\n                \"Size_full\":size_full,\n                \"Duration\":duration,\n\n                })\n    except:\n        pass\n\nmsg['payload']=table\nmsg['topic']=\"\"\nreturn msg",
        "outputs": 1,
        "x": 480,
        "y": 180,
        "wires": [
            [
                "f3662f8c7d3d7a2d",
                "01e4783e148c6698"
            ]
        ]
    },
    {
        "id": "2f4c0f98.dee2",
        "type": "link in",
        "z": "80a3942785a26c29",
        "name": "filelist",
        "links": [
            "960912e90ba5b5bc",
            "a4f09e25.02569",
            "ed35109311335099",
            "fb13752beddee9f2",
            "50eeb3e362f9027f"
        ],
        "x": 355,
        "y": 220,
        "wires": [
            [
                "ea54fcc2.cfcc2"
            ]
        ]
    },
    {
        "id": "952ce286.4ffd4",
        "type": "ui_text",
        "z": "80a3942785a26c29",
        "group": "db43d646.2074c8",
        "order": 4,
        "width": 6,
        "height": 1,
        "name": "Status",
        "label": "Status",
        "format": "{{msg.status}}",
        "layout": "row-spread",
        "className": "",
        "x": 250,
        "y": 60,
        "wires": []
    },
    {
        "id": "d4383424.7807c8",
        "type": "python3-function",
        "z": "80a3942785a26c29",
        "name": "upload",
        "func": "import os\nfrom OpenScan import OpenScanCloud, load_str, load_int, save\nfrom subprocess import getoutput\n\nbasedir = '/home/pi/OpenScan/'\n\nif load_str(\"feedback_terms\")==\"False\":\n    msg['payload']=\"Please read and agree to the Terms of Use (See Settings Menu) before you can use the OpenScanCloud\"\n    msg['topic'] = 'OpenScanCloud - Terms of Use'\n    return None,msg\n\nmsg = msg['payload']\n\ndef upload(filelist, ulinks):\n    pid = getoutput('pidof curl')\n    if pid != \"\":\n        os.system('kill ' + pid)\n\n    i = 0\n    for file in filelist:\n        link = ulinks[i]\n        save('status_cloud', 'uploading ' + str(i+1) + '/' + str(len(filelist)))\n        cmd = 'curl -# -X POST ' + link + ' --header Content-Type:application/octet-stream --data-binary @\"' + file + '\" 2>&1 | tee /home/pi/OpenScan/settings/status_uploadprogress'\n        i = i+1\n        os.system(cmd)\n\n########\nif not os.path.isfile(basedir + 'settings/token'):\n    msg['flag'] = True\n    save('status_cloud', 'please enter token first')\n    return msg\nwith open(basedir + 'settings/token', 'r') as file:\n    token = file.read().strip('\\n')\n\n########\nr = OpenScanCloud('getTokenInfo', {'token':token})\n\nif r.status_code == 400:\n    msg['topic'] = 'Invalid Token'\n    msg['payload'] = 'Please enter a valid token (settings --> OpenScanCloud)'\n    save('status_cloud', 'invalid/missing token')\n    return None,msg\nelif r.status_code == 200:\n    pass\nelse:\n    msg['topic'] = 'Connection Error'\n    msg['payload'] = 'Not able to establish a connection to OpenScanCloud.'\n    return None,msg\n\nmsg1 = r.json()\n\n########\nif msg['Photos'] > msg1['limit_photos'] or msg['Size_full'] > msg1['limit_filesize']:\n    msg['flag'] = True\n    save('status_cloud', 'limit(s) exceeded')\n    return msg\n\n########\ntemp =  OpenScanCloud('getProjectInfo', {'token':token, 'project':msg['Set']})\nif temp.status_code not in (200,401):\n    msg['topic'] = 'Connection to OpenScanCloud failed'\n    msg['payload'] = 'Please check your internet connection'\n    return None,msg\n\nif temp.status_code != 401:\n    temp = temp.json()\n    if 'status' in temp:\n        if temp['status'] != 'created':\n            save('status_cloud','already exists')\n            with open(basedir + 'scans/' + msg['Set'][:-4] + '/status', 'w') as file:\n                file.write(temp['status'])\n            return msg\n#####\n\nmsg2={}\nmsg2['token'] = token\nmsg2['parts'] = 1\nmsg['partslist']=[]\n\n#######\nsize_to_split = load_int('osc_splitsize')\n\nif msg['Size_full'] > size_to_split:\n    tempdir = basedir + 'tmp/split/'\n    if os.path.isdir(tempdir):\n        os.system('rm -r ' + tempdir)\n    os.mkdir(tempdir)\n    save('status_cloud', 'zipping files, please wait ...')\n    cmd = 'split -b ' + str(size_to_split) + ' ' + basedir + 'scans/' + msg['Set'] + ' ' + tempdir + msg['Set']\n    os.system(cmd)\n    save('status_cloud', 'zip done')\n    list = os.listdir(tempdir)\n    for l in list:\n        msg['partslist'].append(tempdir + l)\n        msg['partslist'].sort()\n    msg2['parts']=len(msg['partslist'])\nelse:\n    msg['partslist'] = [basedir + 'scans/' +msg['Set']]\n\n#######\nmsg2['photos'] = msg['Photos']\nmsg2['filesize'] = msg['Size_full']\nmsg2['project'] = msg['Set']\n\nr = OpenScanCloud('createProject', msg2)\nif r.status_code != 200:\n    msg['topic'] = 'Connection to OpenScanCloud failed'\n    msg['payload'] = 'Please check your internet connection'\n    return None,msg\n\nmsg1 = r.json()\n\nif not os.path.isdir(basedir+ 'scans/' + msg['Set'][:-4]):\n    os.mkdir(basedir+ 'scans/' + msg['Set'][:-4])\nwith open(basedir+ 'scans/' + msg['Set'][:-4]+'/status', 'w+') as file:\n    file.write('prepared')\n\nsave('status_cloud', 'uploading')\nupload(msg['partslist'], msg1['ulink'])\n\nr = OpenScanCloud('startProject', msg2)\nif r.status_code != 200:\n    msg['topic'] = 'Upload failed'\n    msg['payload'] = 'please try again'\n    save('status_cloud', 'upload failed')\n    return None,msg\n\nsave('status_cloud', 'uploaded')\n\nsave('status_cloud', 'project started')\n\ntry:\n    os.system('rm -r ' + tempdir)\nexcept:\n    pass\n\nreturn msg",
        "outputs": 2,
        "x": 530,
        "y": 460,
        "wires": [
            [
                "9a132ab1.b21658"
            ],
            [
                "3d16b3789632784d",
                "9a132ab1.b21658"
            ]
        ]
    },
    {
        "id": "50710948.71c308",
        "type": "change",
        "z": "80a3942785a26c29",
        "name": "set",
        "rules": [
            {
                "t": "set",
                "p": "set",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 180,
        "wires": [
            [
                "ada1b6f7cccc9344",
                "85839a17fb7b58b9"
            ]
        ]
    },
    {
        "id": "834046a4.647938",
        "type": "ui_text",
        "z": "80a3942785a26c29",
        "group": "db43d646.2074c8",
        "order": 5,
        "width": 6,
        "height": 1,
        "name": "Set",
        "label": "Set:",
        "format": "{{msg.payload.Name}}",
        "layout": "row-spread",
        "className": "",
        "x": 750,
        "y": 220,
        "wires": []
    },
    {
        "id": "9a132ab1.b21658",
        "type": "change",
        "z": "80a3942785a26c29",
        "name": "flag.true",
        "rules": [
            {
                "t": "set",
                "p": "flag",
                "pt": "global",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 460,
        "wires": [
            [
                "8689e938.dd9e38"
            ]
        ]
    },
    {
        "id": "3c67e97b.9d19a6",
        "type": "function",
        "z": "80a3942785a26c29",
        "name": "enable",
        "func": "//if (global.get('flag') === false){\n//    msg.enabled = false\n//    msg.color=\"white\"\n//}\n//else{\n\n    msg.enabled = true\n    msg.color=\"red\"\n    \n//}\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 340,
        "wires": [
            [
                "7a93d1e18254685c",
                "e434ef42bd6b92e8",
                "d5d840183025d91b",
                "ab9e90ab5a53a0dd",
                "478994f671a3907d"
            ]
        ]
    },
    {
        "id": "bfc01f26.c32cf",
        "type": "change",
        "z": "80a3942785a26c29",
        "name": "flag.false",
        "rules": [
            {
                "t": "set",
                "p": "flag",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 500,
        "wires": [
            [
                "f20f2dbc.0f123"
            ]
        ]
    },
    {
        "id": "b33d604c.5f1a6",
        "type": "link in",
        "z": "80a3942785a26c29",
        "name": "enable cloud",
        "links": [
            "4082b136.dae18",
            "8689e938.dd9e38",
            "bd75f33b8a57c522",
            "e9b13dfd9f8d3711",
            "f20f2dbc.0f123",
            "fb13752beddee9f2"
        ],
        "x": 35,
        "y": 340,
        "wires": [
            [
                "3c67e97b.9d19a6"
            ]
        ]
    },
    {
        "id": "f6bd1a04.470838",
        "type": "change",
        "z": "80a3942785a26c29",
        "name": "set",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "set",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 410,
        "y": 460,
        "wires": [
            [
                "d4383424.7807c8"
            ]
        ]
    },
    {
        "id": "4082b136.dae18",
        "type": "link out",
        "z": "80a3942785a26c29",
        "name": "",
        "links": [
            "b33d604c.5f1a6",
            "87574a42938afec4"
        ],
        "x": 715,
        "y": 140,
        "wires": []
    },
    {
        "id": "f20f2dbc.0f123",
        "type": "link out",
        "z": "80a3942785a26c29",
        "name": "",
        "mode": "link",
        "links": [
            "8367cfa0bf5bc5df",
            "b33d604c.5f1a6",
            "149e2e46b9623a2d"
        ],
        "x": 515,
        "y": 500,
        "wires": []
    },
    {
        "id": "8689e938.dd9e38",
        "type": "link out",
        "z": "80a3942785a26c29",
        "name": "",
        "mode": "link",
        "links": [
            "8367cfa0bf5bc5df",
            "b33d604c.5f1a6",
            "149e2e46b9623a2d"
        ],
        "x": 875,
        "y": 460,
        "wires": []
    },
    {
        "id": "15de0ebb.616d61",
        "type": "ui_toast",
        "z": "80a3942785a26c29",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "No",
        "cancel": "Yes",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 550,
        "y": 380,
        "wires": [
            [
                "a7d89487.ee8858"
            ]
        ]
    },
    {
        "id": "a7d89487.ee8858",
        "type": "python3-function",
        "z": "80a3942785a26c29",
        "name": "del",
        "func": "import os\nimport shutil\n\ndir=\"/home/pi/OpenScan/scans/\"\n\nif msg['payload']==\"No\":\n    return\n\ntry:\n    os.remove(dir+msg['Set'])\n    shutil.rmtree(dir+msg['Set'][:-4])\nexcept:\n    pass\nreturn msg",
        "outputs": 1,
        "x": 690,
        "y": 380,
        "wires": [
            [
                "a4f09e25.02569"
            ]
        ]
    },
    {
        "id": "a4f09e25.02569",
        "type": "link out",
        "z": "80a3942785a26c29",
        "name": "",
        "mode": "link",
        "links": [
            "2f4c0f98.dee2"
        ],
        "x": 775,
        "y": 360,
        "wires": []
    },
    {
        "id": "7a93d1e18254685c",
        "type": "link out",
        "z": "80a3942785a26c29",
        "name": "",
        "mode": "link",
        "links": [
            "809c9427e14e2448",
            "92c98e6ce7cd25f9"
        ],
        "x": 235,
        "y": 500,
        "wires": []
    },
    {
        "id": "4d99c601c9881680",
        "type": "python3-function",
        "z": "80a3942785a26c29",
        "name": "refresh",
        "func": "from time import sleep\nimport os\nfrom OpenScan import load_str, OpenScanCloud, save, load_bool\n\nbasepath = '/home/pi/OpenScan/scans/'\n\nif load_bool(\"terms\")==False:\n    msg['payload']=\"Please read and agree to the Terms of Use (See Settings Menu) before you can use the OpenScanCloud\"\n    msg['topic']='OpenScanCloud - Terms of Use'\n    return None,msg\n\nsave('status_cloud','refreshing')\ntoken = load_str('token')\n\ntest = OpenScanCloud('getTokenInfo',{'token':token})\nif test.status_code == 400:\n    msg['topic'] = 'Invalid Token'\n    msg['payload'] = 'Please enter a valid token (settings --> OpenScanCloud)'\n    return None,msg\nelif test.status_code == 200:\n    pass\nelse:\n    msg['topic'] = 'Connection Error'\n    msg['payload'] = 'Not able to establish a connection to OpenScanCloud.'\n    return None,msg\n\nstats = test.json()\nfor i in stats:\n    save('osc_'+i, stats[i])\n    pass\n\nmsg={}\nprojects = []\nfor i in os.listdir(basepath):\n    if i == 'preview':\n        continue\n    if os.path.isdir(basepath + i):\n        if os.path.isfile(basepath + i + '/status'):\n            with open(basepath + i + '/status', 'r') as file:\n                status = file.read().strip('\\n')\n                if status in ['expired', 'processing done', 'processing failed']:\n                    continue\n        projects.append(i)\n\nfor p in projects:\n    r = OpenScanCloud('getProjectInfo',{'token':token, 'project':p+'.zip'})\n    if r.status_code == 200:\n        answer = r.json()\n        if answer == {}:\n            os.system('rm -r ' + basepath + p)\n        else:\n            with open(basepath + p + '/status', 'w+') as file:\n                file.write(answer['status'])\n            with open(basepath + p + '/download', 'w+') as file:\n                file.write(answer['dlink'])\n\nmsg['list'] = projects\nsleep(0.5)\nsave('status_cloud','ready')\nreturn msg, None\n",
        "outputs": 2,
        "x": 320,
        "y": 180,
        "wires": [
            [
                "ea54fcc2.cfcc2",
                "b42e061fb1f1f3d7"
            ],
            [
                "6434e713f088012b"
            ]
        ]
    },
    {
        "id": "372e95797a3f2f3b",
        "type": "python3-function",
        "z": "80a3942785a26c29",
        "name": "limit :)",
        "func": "from time import sleep\n\nmsg2={}\nmsg2['enabled'] = True\n\nmsg['enabled'] = False\nnode.send(msg)\n\nwait = 15\n\nfor i in range (wait):\n    msg['text'] = ' ('+ str(wait - i)+')'\n    node.send(msg)\n\nmsg['enabled'] = True\nmsg['text']=\"\"\n\n\nreturn msg",
        "outputs": 1,
        "x": 90,
        "y": 220,
        "wires": [
            [
                "573edbfdb7500ddc"
            ]
        ]
    },
    {
        "id": "573edbfdb7500ddc",
        "type": "delay",
        "z": "80a3942785a26c29",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 230,
        "y": 220,
        "wires": [
            [
                "c46e10b9c201913e"
            ]
        ]
    },
    {
        "id": "dacb1f078b624e10",
        "type": "ui_toast",
        "z": "80a3942785a26c29",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "No",
        "cancel": "Yes",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 550,
        "y": 340,
        "wires": [
            [
                "c8d65cc7c2ff7c36"
            ]
        ]
    },
    {
        "id": "92c98e6ce7cd25f9",
        "type": "link in",
        "z": "80a3942785a26c29",
        "name": "",
        "links": [
            "7a93d1e18254685c",
            "bd75f33b8a57c522"
        ],
        "x": 35,
        "y": 180,
        "wires": [
            [
                "c46e10b9c201913e"
            ]
        ]
    },
    {
        "id": "3d16b3789632784d",
        "type": "ui_toast",
        "z": "80a3942785a26c29",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Terms",
        "x": 770,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "6434e713f088012b",
        "type": "ui_toast",
        "z": "80a3942785a26c29",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Terms",
        "x": 470,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "c8d65cc7c2ff7c36",
        "type": "python3-function",
        "z": "80a3942785a26c29",
        "name": "del",
        "func": "import os\nimport shutil\n\ndir=\"/home/pi/OpenScan/scans/\"\n\nif msg['payload']==\"No\":\n    return\n\nfor i in os.listdir(dir):\n    if os.path.isdir(dir + i):\n        shutil.rmtree(dir + i)\n    else:\n        os.remove(dir + i)\n\nreturn msg",
        "outputs": 1,
        "x": 690,
        "y": 340,
        "wires": [
            [
                "a4f09e25.02569"
            ]
        ]
    },
    {
        "id": "f4e9a4bd79b4221f",
        "type": "function",
        "z": "80a3942785a26c29",
        "name": "msg",
        "func": "msg.payload = 'Are you sure to delete ALL saved image sets? This can not be undone!'\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 340,
        "wires": [
            [
                "dacb1f078b624e10"
            ]
        ]
    },
    {
        "id": "2806bf08ea21216d",
        "type": "function",
        "z": "80a3942785a26c29",
        "name": "msg",
        "func": "msg.Set=global.get('set')['Set']\nmsg.payload = 'Are you sure to delete ' + msg.Set + '?'\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 380,
        "wires": [
            [
                "15de0ebb.616d61"
            ]
        ]
    },
    {
        "id": "61990987acd0f263",
        "type": "link in",
        "z": "80a3942785a26c29",
        "name": "",
        "links": [
            "6c6ef2255a7d39e5"
        ],
        "x": 45,
        "y": 60,
        "wires": [
            [
                "51579603bce21e98"
            ]
        ]
    },
    {
        "id": "e8e488a6dd5d0b33",
        "type": "ui_template",
        "z": "80a3942785a26c29",
        "group": "db43d646.2074c8",
        "name": "Download",
        "order": 8,
        "width": 3,
        "height": 1,
        "format": "<md-button style=\"background-color:default ; color:default;width:100%; height:100%;\"   target=\"_blank\" ng-href={{msg.download}}>\n <div class=\"center\" style=\"position: relative; top: 30%;\">Download\n</div></md-button>\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 880,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "0c387c0291d6c131",
        "type": "function",
        "z": "80a3942785a26c29",
        "name": "msg",
        "func": "msg.download = '/scans/' + String(msg.payload.Set)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 260,
        "wires": [
            [
                "e8e488a6dd5d0b33"
            ]
        ]
    },
    {
        "id": "e5f38b4a07a5e278",
        "type": "link in",
        "z": "80a3942785a26c29",
        "name": "",
        "links": [
            "960912e90ba5b5bc",
            "50eeb3e362f9027f"
        ],
        "x": 655,
        "y": 220,
        "wires": [
            [
                "834046a4.647938"
            ]
        ]
    },
    {
        "id": "e434ef42bd6b92e8",
        "type": "ui_template",
        "z": "80a3942785a26c29",
        "group": "db43d646.2074c8",
        "name": "upload2",
        "order": 7,
        "width": 3,
        "height": 1,
        "format": "<md-button class=\"button save\" style=\"padding:0 0, margin:0 ;width:100%; height:100%;\"ng-click=\"send({payload:'1'})\">upload</md-button></md-button>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 280,
        "y": 460,
        "wires": [
            [
                "f6bd1a04.470838"
            ]
        ]
    },
    {
        "id": "c46e10b9c201913e",
        "type": "ui_template",
        "z": "80a3942785a26c29",
        "group": "db43d646.2074c8",
        "name": "refresh",
        "order": 2,
        "width": 4,
        "height": 1,
        "format": "<md-button class=\"button save\" style=\"padding:0 0, margin:0 ;width:100%; height:100%;\"ng-click=\"send({payload:'1'})\">refresh{{msg.text}}</md-button></md-button>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 160,
        "y": 180,
        "wires": [
            [
                "372e95797a3f2f3b",
                "4d99c601c9881680"
            ]
        ]
    },
    {
        "id": "d5d840183025d91b",
        "type": "ui_template",
        "z": "80a3942785a26c29",
        "group": "db43d646.2074c8",
        "name": "del set",
        "order": 11,
        "width": 2,
        "height": 1,
        "format": "<md-button class=\"button save\" style=\"padding:0 0, margin:0 ;color:red; width:100%; height:100%;\"ng-click=\"send({payload:'1'})\">delete set</md-button></md-button>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 270,
        "y": 380,
        "wires": [
            [
                "2806bf08ea21216d"
            ]
        ]
    },
    {
        "id": "ab9e90ab5a53a0dd",
        "type": "ui_template",
        "z": "80a3942785a26c29",
        "group": "db43d646.2074c8",
        "name": "del ",
        "order": 10,
        "width": 2,
        "height": 1,
        "format": "<md-button class=\"button save\" style=\"color:red; padding:0 0; margin:0 ;width:100%; height:100%;\"ng-click=\"send({payload:'1'})\">delete all</md-button></md-button>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 270,
        "y": 340,
        "wires": [
            [
                "f4e9a4bd79b4221f"
            ]
        ]
    },
    {
        "id": "478994f671a3907d",
        "type": "ui_template",
        "z": "80a3942785a26c29",
        "group": "db43d646.2074c8",
        "name": "combine",
        "order": 9,
        "width": 2,
        "height": 1,
        "format": "<md-button class=\"button save\" style=\"color:red; padding:0 0; margin:0 ;width:100%; height:100%;\"ng-click=\"send({payload:'1'})\">combine</md-button></md-button>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 280,
        "y": 540,
        "wires": [
            [
                "51bfd0fb7b1d292e"
            ]
        ]
    },
    {
        "id": "189c1eed09624a7b",
        "type": "function",
        "z": "80a3942785a26c29",
        "name": "combine",
        "func": "combine = global.get('combine')\ncombine_set = global.get('set').Set\n\nif (combine === true && global.get('combine_set') !== combine_set){\n    msg.set1 = global.get('combine_set')\n    msg.set2 = combine_set\n    global.set('combine', false)\n    msg.topic = 'Combine the following two sets:'\n    msg.payload = msg.set1 + '<br>' + msg.set2 + '<br>FILES WILL BE MERGED INTO ON FILE!'\n    return msg\n}\nglobal.set('combine_set' , combine_set)\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 580,
        "wires": [
            [
                "1493398979a63775"
            ]
        ]
    },
    {
        "id": "51bfd0fb7b1d292e",
        "type": "function",
        "z": "80a3942785a26c29",
        "name": "combine",
        "func": "global.set('combine', true)\ncombine_set = global.get('set').Set\nmsg.topic = 'Merge two sets into one (can not be undone)!'\nmsg.payload = combine_set\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "da325be8e74179be",
        "type": "python3-function",
        "z": "80a3942785a26c29",
        "name": "combine",
        "func": "from os.path import getsize\nfrom shutil import copy\nfrom os import rename, remove\nimport zipfile as z\nfrom OpenScan import save\n\nfrom time import sleep\n\nif msg['payload'] != 'OK':\n    return\n\nbasepath = '/home/pi/OpenScan/scans/'\ntmp1 = basepath + msg['set1']\ntmp2 = basepath + msg['set2']\n\nif getsize(tmp1) > getsize(tmp2):\n    set1 = tmp1\n    set2 = tmp2\nelse:\n    set1 = tmp2\n    set2 = tmp1\n\nzips = [set1, set2]\n\nwith z.ZipFile(set1, 'a') as z1:\n    z2 = z.ZipFile(set2, 'r')\n    i = 0\n    for n in z2.namelist():\n        i += 1\n        n2 = n\n        save('status_cloud','writing ' + str(i) + '/' + str(len(z2.namelist())))\n        while 'X'+n in z1.namelist():\n            n = 'X' + n\n        z1.writestr('X'+n, z2.open(n2).read())\nsave('status_cloud','ready')\n\nos.rename(set1, set1[:-4] + 'X.zip')\nos.remove(set2)\n\nreturn msg",
        "outputs": 1,
        "x": 560,
        "y": 580,
        "wires": [
            [
                "ed35109311335099"
            ]
        ]
    },
    {
        "id": "ed35109311335099",
        "type": "link out",
        "z": "80a3942785a26c29",
        "name": "",
        "mode": "link",
        "links": [
            "809c9427e14e2448",
            "2f4c0f98.dee2"
        ],
        "x": 655,
        "y": 580,
        "wires": []
    },
    {
        "id": "1493398979a63775",
        "type": "ui_toast",
        "z": "80a3942785a26c29",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": true,
        "className": "",
        "topic": "",
        "name": "Combine",
        "x": 420,
        "y": 580,
        "wires": [
            [
                "da325be8e74179be"
            ]
        ]
    },
    {
        "id": "ada1b6f7cccc9344",
        "type": "link out",
        "z": "80a3942785a26c29",
        "name": "combine",
        "mode": "link",
        "links": [
            "6dd356510c446cf4"
        ],
        "x": 835,
        "y": 180,
        "wires": []
    },
    {
        "id": "6dd356510c446cf4",
        "type": "link in",
        "z": "80a3942785a26c29",
        "name": "combine",
        "links": [
            "ada1b6f7cccc9344"
        ],
        "x": 175,
        "y": 580,
        "wires": [
            [
                "189c1eed09624a7b"
            ]
        ]
    },
    {
        "id": "b42e061fb1f1f3d7",
        "type": "link out",
        "z": "80a3942785a26c29",
        "name": "",
        "mode": "link",
        "links": [
            "397ab7f44b893c89",
            "3876d5cbd248592b"
        ],
        "x": 435,
        "y": 140,
        "wires": []
    },
    {
        "id": "b99505440832439f",
        "type": "python3-function",
        "z": "80a3942785a26c29",
        "name": "diskspace",
        "func": "from subprocess import getoutput\nfrom OpenScan import load_int\n\ndiskspace_threshold = load_int('diskspace_threshold')\n\ndiskspace = getoutput('df -h / | awk \"{print $5}\"').split('\\n')[1]\n\navailable = int(float(diskspace.replace(' ','').split('G')[2])*1000)\n\n\nif available < diskspace_threshold:\n    msg['topic'] = 'Low diskspace remaining! ('+str(available)+'MB)' \n    msg['payload'] = 'Please delete some/all locally stored files.'\n    msg['color'] = 'red'\n    return msg\n",
        "outputs": 1,
        "x": 800,
        "y": 100,
        "wires": [
            [
                "92047434f8e9f927"
            ]
        ]
    },
    {
        "id": "92047434f8e9f927",
        "type": "ui_toast",
        "z": "80a3942785a26c29",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 950,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "f3662f8c7d3d7a2d",
        "type": "delay",
        "z": "80a3942785a26c29",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 650,
        "y": 100,
        "wires": [
            [
                "b99505440832439f"
            ]
        ]
    },
    {
        "id": "51579603bce21e98",
        "type": "python3-function",
        "z": "80a3942785a26c29",
        "name": "read",
        "func": "from OpenScan import load_str\nfrom os import listdir, path\n\nstatus = load_str('status_cloud')\n\nif status[0:9] == 'uploading':\n    progress = load_str('status_uploadprogress')[-6:]\n    if progress[-1:] == '%':\n        status = status + ' (' + progress + ')'\n\nif status[0:7] == 'zipping':\n    path1 = '/home/pi/OpenScan/tmp/split/'\n    files = listdir(path1)\n    size1 = 0\n    for file in files:\n        size1 += path.getsize(path1+file)\n    size2 = path.getsize('/home/pi/OpenScan/scans/'+ files[0][:-2])\n    \n    status = 'zipping files (' + str(float(int(1000*size1/size2))/10) + '%)'\n\nmsg['status'] = status\nreturn msg\n",
        "outputs": 1,
        "x": 130,
        "y": 60,
        "wires": [
            [
                "952ce286.4ffd4"
            ]
        ]
    },
    {
        "id": "9a5baae623355f9d",
        "type": "ui_template",
        "z": "80a3942785a26c29",
        "group": "db43d646.2074c8",
        "name": "preview",
        "order": 6,
        "width": 6,
        "height": 6,
        "format": "<div align=\"center\" >\n<img ng-src= {{msg.payload}} style=\"width: auto; height: auto;max-width: 301px;max-height: 301px\"/>\n\n</div>\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1020,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "85839a17fb7b58b9",
        "type": "python3-function",
        "z": "80a3942785a26c29",
        "name": "preview",
        "func": "from time import time\nimport os\n\npath = '/home/pi/OpenScan/scans/preview/'\nimage = os.path.basename(msg['payload']['Set'])[:-4] +'.jpg'\n\nmsg['payload']=\"/scans/preview/\" + image +\"?ts=\"+str(int(time()*10))\nreturn msg",
        "outputs": 1,
        "x": 880,
        "y": 220,
        "wires": [
            [
                "9a5baae623355f9d"
            ]
        ]
    },
    {
        "id": "50020809fbd23673",
        "type": "inject",
        "z": "80a3942785a26c29",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 260,
        "wires": [
            [
                "ea54fcc2.cfcc2"
            ]
        ]
    },
    {
        "id": "01e4783e148c6698",
        "type": "ui_table",
        "z": "80a3942785a26c29",
        "group": "b5fdd57b.15eda8",
        "name": "",
        "order": 1,
        "width": 13,
        "height": 7,
        "columns": [
            {
                "field": "Date",
                "title": "Date",
                "width": "150",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Name",
                "title": "Name",
                "width": "150",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Photos",
                "title": "Photos",
                "width": "80",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Duration",
                "title": "ΔT",
                "width": "60",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Size",
                "title": "Size",
                "width": "80",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Status",
                "title": "Status",
                "width": "140",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 610,
        "y": 180,
        "wires": [
            [
                "4082b136.dae18",
                "50710948.71c308",
                "834046a4.647938",
                "0c387c0291d6c131"
            ]
        ]
    },
    {
        "id": "cb3437ec113e1b6f",
        "type": "ui_switch",
        "z": "e43a27722b508115",
        "name": "",
        "label": "SSH",
        "tooltip": "",
        "group": "4390b2ebcbbe104c",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 390,
        "y": 360,
        "wires": [
            [
                "c24f61b87e3226dd"
            ]
        ]
    },
    {
        "id": "60fd0adce1cfeb82",
        "type": "ui_switch",
        "z": "e43a27722b508115",
        "name": "",
        "label": "Samba",
        "tooltip": "",
        "group": "4390b2ebcbbe104c",
        "order": 4,
        "width": 6,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "test2",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 400,
        "y": 400,
        "wires": [
            [
                "441d3ef525e901da"
            ]
        ]
    },
    {
        "id": "c24f61b87e3226dd",
        "type": "python3-function",
        "z": "e43a27722b508115",
        "name": "ssh",
        "func": "from OpenScan import load_bool, save\n\nstate = msg['payload']\n\nif state != load_bool('ssh'):\n    save('ssh', state)\n\nif state == True:\n    os.system('/etc/init.d/ssh start')\nelse:\n    os.system('/etc/init.d/ssh stop')",
        "outputs": 1,
        "x": 530,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "c013e836e759a085",
        "type": "ui_button",
        "z": "e43a27722b508115",
        "name": "",
        "group": "4390b2ebcbbe104c",
        "order": 2,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Terms Of Use",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 120,
        "y": 320,
        "wires": [
            [
                "b78346ca3ce70c68"
            ]
        ]
    },
    {
        "id": "f0d8dbcca76a1926",
        "type": "ui_toast",
        "z": "e43a27722b508115",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "Agree",
        "cancel": "Disagree",
        "raw": true,
        "className": "",
        "topic": "",
        "name": "",
        "x": 410,
        "y": 320,
        "wires": [
            [
                "e95b86cbac1b03b9"
            ]
        ]
    },
    {
        "id": "34374044c0030625",
        "type": "ui_button",
        "z": "e43a27722b508115",
        "name": "General",
        "group": "4390b2ebcbbe104c",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "transparent",
        "className": "",
        "icon": "fa-question-circle",
        "payload": "<h1>General Settings</h1> <p><strong>Terms Of Use</strong></p> <p style=\"margin-left: 20px;\">In order to use the OpenScanCloud, please read the terms of use as files will be transmitted from your device to the OpenScan Servers.</p> <p><strong>SSH</strong></p> <p style=\"margin-left: 20px;\">SSH can be used to access the Raspberry Pi and modify core files of the operating system. Please deactivate, if you do not want to use this feature.</p> <p style=\"margin-left: 20px;\">If you want to use it, the default user is <strong>pi</strong>, password: <strong>raspberry. Please change the password&nbsp;</strong><strong>immediately.</strong>&nbsp;</p> <p><strong>Samba</strong></p> <p style=\"margin-left: 20px;\">Samba s a network local file sharing server, which allows accessing the Raspberry Pi&apos;s file system through the explorer (and other programs like FileZilla). You can use it to transfer custom photo sets to the device in order to use the OpenScanCloud. Therefore, you need to transfer the zip file containing your photos to the following folder /OpenScan/scans/</p> <p style=\"margin-left: 20px;\">You can access the Raspberry Pis file system by inserting the following line into your Windows explorer:&nbsp;</p> <p style=\"margin-left: 20px;\">\\\\OpenScan/PiShare/OpenScan/scans/</p> <p style=\"margin-left: 20px;\">username: pi, password: raspberry</p> <p style=\"margin-left: 20px;\"><strong>Please deactivate the local file sharing if you do not intend to use it</strong></p> <p><strong>Advanced Settings</strong></p> <p style=\"margin-left: 20px;\">Enable a ton of additional settings, which should be changed only if you know what you are doing ;)</p> <p><strong>Model</strong></p> <p style=\"margin-left: 20px;\">Device model you are using: OpenScan Mini or OpenScan Classic. Setting the device affects the settings of the motor (gear ratio, acceleration, speed). You can change those values manually in the advanced settings.</p> <p><strong>Camera</strong></p> <p style=\"margin-left: 20px;\">A wide range of camera modules is supported (Pi camera v1.3, v2.1, HQ, Arducam IMX519, IMX290, IMX378, OV9281). If you encounter any issues with those models, please check the orientation of the camera ribbon cable and its connectors.</p> <p style=\"margin-left: 20px;\"><u>DSLR (gphoto)</u> - connect a wide range of DSLR cameras to the device through USB. See <a href=\"http://www.gphoto.org/proj/libgphoto2/support.php\" rel=\"noopener noreferrer\" target=\"_blank\">GPhoto</a> for a full list of supported devices.</p> <p style=\"margin-left: 20px;\"><u>External camera</u> - triggering any camera through an isolated GPIO signal on the front side of the pi shield.</p> <p><strong>Shutdown/Reboot</strong></p> <p style=\"margin-left: 20px;\">Always use the shutdown button before you power off your Raspberry Pi.</p> <p><strong>Restore Default Settings</strong></p> <p style=\"margin-left: 20px;\">In case you want to restore the default settings</p>",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 740,
        "y": 220,
        "wires": [
            [
                "5fff689f9f8bc1ca"
            ]
        ]
    },
    {
        "id": "b2b6bf23c9989133",
        "type": "ui_button",
        "z": "e43a27722b508115",
        "name": "Pinout",
        "group": "70d0be671bf03ca7",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "transparent",
        "className": "",
        "icon": "fa-question-circle",
        "payload": "<h1><span style=\"color: rgb(226, 80, 65);\">Pinout</span></h1> <p><span style=\"color: rgb(226, 80, 65);\"><strong><span style=\"font-size: 19px;\">ONLY CHANGE THE PINOUT IF YOU ARE ABSOLUTELY SURE! CHANGES CAN DAMAGE THE RASPBERRY PI AND ANY PERIPHERALS!</span></strong></span></p> <p><br></p>",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 430,
        "y": 220,
        "wires": [
            [
                "5fff689f9f8bc1ca"
            ]
        ]
    },
    {
        "id": "441d3ef525e901da",
        "type": "python3-function",
        "z": "e43a27722b508115",
        "name": "smb",
        "func": "from OpenScan import load_bool, save\n\nstate = msg['payload']\n\nif state != load_bool('smb'):\n    save('smb', state)\nif state == True:\n    os.system('/etc/init.d/smbd start')\nelse:\n    os.system('/etc/init.d/smbd stop')\n\n\n",
        "outputs": 1,
        "x": 530,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "3256bab150113a48",
        "type": "ui_button",
        "z": "e43a27722b508115",
        "name": "Motor",
        "group": "7a3279eea439bcdd",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "transparent",
        "className": "",
        "icon": "fa-question-circle",
        "payload": "<h1>Motor Settings</h1> <p><strong>Turntable Mode</strong></p> <p style=\"margin-left: 20px;\">Activate turntable mode in order to deactivate the rotor. The routine will only move the turntable and take a given number of photos.</p> <p><strong>Rotor - Start Angle, Min and Max Angle</strong></p> <p style=\"margin-left: 20px;\">Since this version of OpenScan does not have an endstop (yet), it is necessary to tell the device its position when the routine is being started. 0&deg; corresponds to the horizontal (natural) orientation.</p> <p style=\"margin-left: 20px;\">After that, the device will equally space the image positions between angle min and angle max.</p> <p><strong>Rotor/Turntable</strong></p> <p style=\"margin-left: 20px;\"><u>Steps per rotation</u> - &nbsp;defines the number of steps it takes to move the axis 360&deg;. It is defined by A*B*C, where A is the number of steps for one revolution of the given stepper motor (normally 200), B is the microstepping used (normally 16), and C the gear ratio (1 for the turntable and 15 or 5,33 for the OpenScan Mini and Classic respectively)</p> <p style=\"margin-left: 20px;\"><u>Delay</u> - time in microseconds between each step of the motor. Lower this value if the movement is too fast</p> <p style=\"margin-left: 20px;\"><u>Acceleration</u> - a factor defining how fast the delay time between each step is being changed during acceleration and deceleration phases. Lower this value in order to make the movement smoother.</p> <p style=\"margin-left: 20px;\"><u>Acceleration ramp</u> - the number of steps allowed for the acceleration processes. Increase this value, if you want smoother movement.</p> <p style=\"margin-left: 20px;\"><u>Manual Angle</u> - Defines the degree value for the manual movement through the arrow buttons in the scan menu</p> <p style=\"margin-left: 20px;\"><u>Direction</u> - If needed, reverse the movement (in case the arrow buttons and movement do not correspond). Alternatively, you can flip the motor cable 180&deg; (BUT MAKE SURE TO POWER OFF THE DEVICE!)</p> <p style=\"margin-left: 20px;\"><a href=\"%5C%22mailto:cloud@openscan.eu%5C%22\"></a></p> <p><br></p>",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 430,
        "y": 140,
        "wires": [
            [
                "5fff689f9f8bc1ca"
            ]
        ]
    },
    {
        "id": "7a186669a17daa71",
        "type": "ui_button",
        "z": "e43a27722b508115",
        "name": "camera",
        "group": "d324f0b852c2df0a",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "transparent",
        "className": "",
        "icon": "fa-question-circle",
        "payload": "<h1>Camera Settings</h1> <p><strong>Jpeg quality</strong></p> <p style=\"margin-left: 20px;\">Value in percent, which usually does not need to be changed.</p> <p><strong>Downscale Preview</strong></p> <p style=\"margin-left: 20px;\">The preview image has to be scaled down depending on your network speed. If you want to have a higher quality preview image, you can increase this value, which defines the maximal width/height value. If the value is too high, the preview window might not update</p> <p><strong>Image Rotation</strong></p> <p style=\"margin-left: 20px;\">Change the image rotation, if needed.</p> <p><strong>Timeout</strong></p> <p style=\"margin-left: 20px;\">Defines the time in seconds, when the libcamera command (used for the camera modules) will timeout. Increase this value, if the camera does not get triggered in each position.</p> <p><strong>Delay Before/After</strong></p> <p style=\"margin-left: 20px;\">A fixed delay in seconds before and/or after a photo is taken. Increase this value when the photos have visual motion blur.</p> <p><strong>AWBG, Gain, Contrast, Saturation</strong></p> <p style=\"margin-left: 20px;\">Under most circumstances, you do not need to touch these values.</p>",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 420,
        "y": 180,
        "wires": [
            [
                "5fff689f9f8bc1ca"
            ]
        ]
    },
    {
        "id": "edac7dd292e7e486",
        "type": "comment",
        "z": "e43a27722b508115",
        "name": "General Settings",
        "info": "",
        "x": 120,
        "y": 280,
        "wires": []
    },
    {
        "id": "161b52034e578ee2",
        "type": "comment",
        "z": "e43a27722b508115",
        "name": "Network",
        "info": "",
        "x": 100,
        "y": 720,
        "wires": []
    },
    {
        "id": "f6d6cc35679ede63",
        "type": "ui_switch",
        "z": "e43a27722b508115",
        "name": "more sets",
        "label": "Advanced Settings",
        "tooltip": "",
        "group": "4390b2ebcbbe104c",
        "order": 5,
        "width": 6,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 400,
        "y": 460,
        "wires": [
            [
                "f06a7bcad524e9f9"
            ]
        ]
    },
    {
        "id": "29745a36fc157f3f",
        "type": "python3-function",
        "z": "e43a27722b508115",
        "name": "more sets",
        "func": "from OpenScan import save\n\nif msg['payload'] != 'OK':\n    msg['payload'] = False\n    return None,msg\n    \nsave('advanced_settings', True)\n\nreturn msg",
        "outputs": 2,
        "x": 820,
        "y": 460,
        "wires": [
            [
                "8750ad979e9ea246"
            ],
            [
                "f6d6cc35679ede63"
            ]
        ]
    },
    {
        "id": "bf23328f9fb11b22",
        "type": "ui_ui_control",
        "z": "e43a27722b508115",
        "name": "change visibility",
        "events": "all",
        "x": 600,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "b37be1d222bc70c9",
        "type": "inject",
        "z": "e43a27722b508115",
        "name": "1s_repeater",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 60,
        "wires": [
            [
                "89eedf29b404f750"
            ]
        ]
    },
    {
        "id": "89eedf29b404f750",
        "type": "python3-function",
        "z": "e43a27722b508115",
        "name": "load advanced",
        "func": "from OpenScan import load_bool\n\nif load_bool('advanced_settings') == False:\n    msg['payload']={\"group\":{\"hide\":[\"Settings_Camera\",\"Settings_Motor\",\"Settings_Pinout\",],\"show\":[\"Settings_General\",\"Settings_Network\",\"Settings_OpenScanCloud\"]}}\nelse:\n    msg['payload']={\"group\":{\"hide\":[],\"show\":[\"Settings_General\",\"Settings_Network\",\"Settings_OpenScanCloud\",\"Settings_Camera\",\"Settings_Motor\",\"Settings_Pinout\",]}}\nreturn msg",
        "outputs": 1,
        "x": 360,
        "y": 60,
        "wires": [
            [
                "bf23328f9fb11b22"
            ]
        ]
    },
    {
        "id": "2050de5d9e02f69f",
        "type": "comment",
        "z": "e43a27722b508115",
        "name": "Info Texts",
        "info": "",
        "x": 100,
        "y": 140,
        "wires": []
    },
    {
        "id": "ded3086945a6d4b5",
        "type": "python3-function",
        "z": "e43a27722b508115",
        "name": "check ip address",
        "func": "import socket\nimport subprocess\n\ntestIP = \"8.8.8.8\"\ns = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\ns.connect((testIP, 0))\nipaddr = s.getsockname()[0]\nhost = socket.gethostname()\n\nmsg['ip']=ipaddr\n\nreturn msg",
        "outputs": 1,
        "x": 250,
        "y": 940,
        "wires": [
            [
                "3cfe464506f46ecd"
            ]
        ]
    },
    {
        "id": "3cfe464506f46ecd",
        "type": "ui_text",
        "z": "e43a27722b508115",
        "group": "8ab79a98e536e0d6",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Your local IP:",
        "format": "{{msg.ip}}",
        "layout": "row-spread",
        "className": "",
        "x": 430,
        "y": 940,
        "wires": []
    },
    {
        "id": "bd206ad109831e6a",
        "type": "comment",
        "z": "e43a27722b508115",
        "name": "OpenScanCloud",
        "info": "",
        "x": 120,
        "y": 1260,
        "wires": []
    },
    {
        "id": "b70a9a665c1e4d36",
        "type": "ui_button",
        "z": "e43a27722b508115",
        "name": "Cloud-settings",
        "group": "12b719cba49817c9",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "transparent",
        "className": "",
        "icon": "fa-question-circle",
        "payload": "<h1>OpenScanCloud</h1> <p style=\"margin-left: 20px;\">OpenScanCloud is a free/donation-based cloud processing service, which will convert your photos into 3d models using latest photogrammetry technology. Feel free to support the project with a small donation at <a href=\"%5C%22https://www.buymeacoffee.com/OpenScan%5C%22\" rel='\\\"noopener' target='\\\"_blank\\\"'>BuyMeACoffee</a>.</p> <p style=\"margin-left: 20px;\">The only requirement to use this service is a one-time, free-of-charge registration (which is solely an anti-spam measure). By filling out the registration form, you will receive an individual access token.</p> <p><strong>Register</strong></p> <p style=\"margin-left: 20px;\">In order to use the OpenScanCloud, you will have to enter your name and email. It might take 1-3 days to create the access token, which will be sent to your mail address. Please check your spam folder.</p> <p><strong>Enter Token</strong></p> <p style=\"margin-left: 20px;\">Please enter your individual token here in order to activate the cloud functionality. The token will be verified immediately. In case of any problems, please contact <a href=\"%5C%22mailto:cloud@openscan.eu%5C%22\">cloud@openscan.eu</a></p> <p><strong>Token</strong></p> <p style=\"margin-left: 20px;\">A shorted version of your token will be displayed here. Please include a copy of this shorted token in any support requests <a href=\"%5C%22mailto:cloud@openscan.eu%5C%22\">cloud@openscan.eu</a></p> <p><strong>Credit (GB)</strong></p> <p style=\"margin-left: 20px;\">Each token comes with a given amount of &apos;credit&apos; which is another measure against spam. The given number in Gigabyte indicates the amount of data, that you can process on the servers.&nbsp;</p> <p style=\"margin-left: 20px;\">IMPORTANT: The credit can be increased at any time by sending a (nice) mail to <a href=\"%5C%22mailto:cloud@openscan.eu%5C%22\">cloud@openscan.eu</a></p>",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 580,
        "y": 200,
        "wires": [
            [
                "5fff689f9f8bc1ca"
            ]
        ]
    },
    {
        "id": "c9f0566601a3e130",
        "type": "ui_text",
        "z": "e43a27722b508115",
        "group": "12b719cba49817c9",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Max. Number of Photos:",
        "format": "{{msg.limit_photos}}",
        "layout": "row-spread",
        "className": "",
        "x": 410,
        "y": 1400,
        "wires": []
    },
    {
        "id": "9bd86d27ea499a2a",
        "type": "ui_text",
        "z": "e43a27722b508115",
        "group": "12b719cba49817c9",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Max. Filesize (GB):",
        "format": "{{msg.limit_filesize}}",
        "layout": "row-spread",
        "className": "",
        "x": 390,
        "y": 1440,
        "wires": []
    },
    {
        "id": "2c37f7030810d234",
        "type": "ui_text",
        "z": "e43a27722b508115",
        "group": "12b719cba49817c9",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Credit (GB):",
        "format": "{{msg.credit}}",
        "layout": "row-spread",
        "className": "",
        "x": 370,
        "y": 1480,
        "wires": []
    },
    {
        "id": "f40286c18afd4501",
        "type": "python3-function",
        "z": "e43a27722b508115",
        "name": "save",
        "func": "import requests\nimport os\nfrom OpenScan import save, OpenScanCloud\n\nif msg['payload']!=\"Yes\":\n    return None,msg\n\ntry:\n    r = OpenScanCloud('getTokenInfo', {'token':msg['token']})\n    if r.status_code != 200:\n        msg['payload'] = 'Could not verify token'\n        return msg \n    \n    msg1 = r.json()\n    \n    save('osc_credit',msg1['credit'])\n    save('osc_limit_filesize',msg1['limit_filesize'])\n    save('osc_limit_photos',msg1['limit_photos'])\n    msg1['enabled'] = True\nexcept:\n    pass\n\nsave('token',msg['token'])\n    \nmsg['payload'] = 'Token verified and saved'\nreturn msg, msg1",
        "outputs": 2,
        "x": 750,
        "y": 1340,
        "wires": [
            [
                "455a5266017ea121",
                "50f73cee213ec05c"
            ],
            [
                "264eece408043021"
            ]
        ]
    },
    {
        "id": "455a5266017ea121",
        "type": "ui_toast",
        "z": "e43a27722b508115",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 890,
        "y": 1300,
        "wires": [
            []
        ]
    },
    {
        "id": "c368df68593bc2bf",
        "type": "ui_text_input",
        "z": "e43a27722b508115",
        "name": "",
        "label": "Token",
        "tooltip": "",
        "group": "12b719cba49817c9",
        "order": 2,
        "width": 6,
        "height": 1,
        "passthru": false,
        "mode": "text",
        "delay": "0",
        "topic": "",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 350,
        "y": 1360,
        "wires": [
            [
                "18fd1afa768187b3"
            ]
        ]
    },
    {
        "id": "18fd1afa768187b3",
        "type": "python3-function",
        "z": "e43a27722b508115",
        "name": "Save?",
        "func": "msg['token'] = msg['payload']\n\nif len(msg['payload'])>=14:\n    \n    msg[\"payload\"]='Save and verify token: ' + msg['payload']\n    return msg\nelse:\n    return None,msg",
        "outputs": 2,
        "x": 470,
        "y": 1360,
        "wires": [
            [
                "418aea2ec65573a0"
            ],
            [
                "9792c89c5f4429f9"
            ]
        ]
    },
    {
        "id": "f90a98899b7a71d0",
        "type": "python3-function",
        "z": "e43a27722b508115",
        "name": "text",
        "func": "from OpenScan import load_str\n\ntoken = load_str('token')[0:8]\nmsg['payload']= token + '...'\nif len(token)==0:\n    msg['payload']=\"enter token\"\nreturn msg",
        "outputs": 1,
        "x": 230,
        "y": 1360,
        "wires": [
            [
                "c368df68593bc2bf"
            ]
        ]
    },
    {
        "id": "b4c843620c251c43",
        "type": "link in",
        "z": "e43a27722b508115",
        "name": "token",
        "links": [
            "960912e90ba5b5bc",
            "50f73cee213ec05c",
            "9792c89c5f4429f9",
            "50eeb3e362f9027f"
        ],
        "x": 75,
        "y": 1360,
        "wires": [
            [
                "f90a98899b7a71d0"
            ]
        ]
    },
    {
        "id": "418aea2ec65573a0",
        "type": "ui_toast",
        "z": "e43a27722b508115",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "No",
        "cancel": "Yes",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 610,
        "y": 1340,
        "wires": [
            [
                "f40286c18afd4501"
            ]
        ]
    },
    {
        "id": "9792c89c5f4429f9",
        "type": "link out",
        "z": "e43a27722b508115",
        "name": "",
        "mode": "link",
        "links": [
            "b4c843620c251c43"
        ],
        "x": 555,
        "y": 1380,
        "wires": []
    },
    {
        "id": "264eece408043021",
        "type": "link out",
        "z": "e43a27722b508115",
        "name": "",
        "links": [
            "5d267acc10020091",
            "3876d5cbd248592b"
        ],
        "x": 835,
        "y": 1380,
        "wires": []
    },
    {
        "id": "3876d5cbd248592b",
        "type": "link in",
        "z": "e43a27722b508115",
        "name": "OSCparameters",
        "links": [
            "960912e90ba5b5bc",
            "264eece408043021",
            "b42e061fb1f1f3d7",
            "50eeb3e362f9027f"
        ],
        "x": 75,
        "y": 1400,
        "wires": [
            [
                "5daca3ec47f8e7fc"
            ]
        ]
    },
    {
        "id": "50f73cee213ec05c",
        "type": "link out",
        "z": "e43a27722b508115",
        "name": "",
        "links": [
            "b4c843620c251c43",
            "5d267acc10020091"
        ],
        "x": 835,
        "y": 1340,
        "wires": []
    },
    {
        "id": "95578e54a9b61cba",
        "type": "ui_toast",
        "z": "e43a27722b508115",
        "position": "prompt",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 250,
        "y": 1540,
        "wires": [
            [
                "d7a5693da7855da8"
            ]
        ]
    },
    {
        "id": "d7a5693da7855da8",
        "type": "python3-function",
        "z": "e43a27722b508115",
        "name": "msg",
        "func": "import re\n\nif msg['payload'] == 'Cancel':\n    return\n\nmail = msg['payload']\nemail_regex = re.compile(r\"[^@]+@[^@]+\\.[^@]+\")\n\nif email_regex.match(mail) != None:\n    msg['mail'] = mail\n    msg['topic'] = 'OpenScanCloud Registration (2/3)'\n    msg['payload'] = 'Enter your first name'\n    return msg\nmsg['payload'] = 'invalid input'\nreturn None,msg\n",
        "outputs": 2,
        "x": 390,
        "y": 1540,
        "wires": [
            [
                "2b02b97dd1614e52"
            ],
            [
                "183a629accb417b1"
            ]
        ]
    },
    {
        "id": "183a629accb417b1",
        "type": "ui_toast",
        "z": "e43a27722b508115",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 530,
        "y": 1580,
        "wires": [
            []
        ]
    },
    {
        "id": "2b02b97dd1614e52",
        "type": "ui_toast",
        "z": "e43a27722b508115",
        "position": "prompt",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 530,
        "y": 1540,
        "wires": [
            [
                "3e4c15d7b538f816"
            ]
        ]
    },
    {
        "id": "3bf622f344172721",
        "type": "ui_toast",
        "z": "e43a27722b508115",
        "position": "prompt",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "SUBMIT",
        "cancel": "Cancel",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 810,
        "y": 1540,
        "wires": [
            [
                "e431cb2b8d217cee"
            ]
        ]
    },
    {
        "id": "e431cb2b8d217cee",
        "type": "python3-function",
        "z": "e43a27722b508115",
        "name": "msg",
        "func": "import requests\nimport os\nfrom OpenScan import OpenScanCloud\n\nif msg['payload'] == 'Cancel':\n    return\n\nmsg['lastname'] = msg['payload']\n\nmsg2 = {}\n\nfor i in ['forename','lastname','mail']:\n    msg2[i] = msg[i]\n\nr = OpenScanCloud('requestToken',msg2)\n\nstatus = r.status_code\n\nmsg['topic'] = 'OpenScanCloud Registration - Success'\nmsg['payload'] = 'registration done, you will get an email with your token within the next one or two days :)'\n\nif status != 200:\n    msg['topic'] = 'OpenScanCloud Registration - Failed'\n    msg['payload'] = 'Registration failed, please try again.'\n\nmsg['status'] = status\n\nreturn msg",
        "outputs": 1,
        "x": 950,
        "y": 1540,
        "wires": [
            [
                "106874534890f229"
            ]
        ]
    },
    {
        "id": "a38d7fde5c73210f",
        "type": "ui_button",
        "z": "e43a27722b508115",
        "name": "Register",
        "group": "12b719cba49817c9",
        "order": 6,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Register",
        "tooltip": "testtesttest",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "Please enter your email address:",
        "payloadType": "str",
        "topic": "Requesting an OpenScanCloud Token",
        "topicType": "str",
        "x": 100,
        "y": 1540,
        "wires": [
            [
                "95578e54a9b61cba"
            ]
        ]
    },
    {
        "id": "106874534890f229",
        "type": "ui_toast",
        "z": "e43a27722b508115",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1090,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "5daca3ec47f8e7fc",
        "type": "python3-function",
        "z": "e43a27722b508115",
        "name": "msg",
        "func": "from OpenScan import load_int\n\nmsg = {}\n\ntry:\n    msg['credit'] = float(int(load_int('osc_credit')/10000000))/100\n    msg['limit_filesize'] = float(int(load_int('osc_limit_filesize')/10000000))/100\n    msg['limit_photos'] = load_int('osc_limit_photos')\n    return msg\nexcept:\n    pass",
        "outputs": 1,
        "x": 230,
        "y": 1400,
        "wires": [
            [
                "c9f0566601a3e130",
                "9bd86d27ea499a2a",
                "2c37f7030810d234"
            ]
        ]
    },
    {
        "id": "f34de19d4cf810a9",
        "type": "comment",
        "z": "e43a27722b508115",
        "name": "Motor",
        "info": "",
        "x": 90,
        "y": 1620,
        "wires": []
    },
    {
        "id": "26c2b58e21f97475",
        "type": "comment",
        "z": "e43a27722b508115",
        "name": "Camera",
        "info": "",
        "x": 90,
        "y": 2260,
        "wires": []
    },
    {
        "id": "a8ec972bad47a9a8",
        "type": "comment",
        "z": "e43a27722b508115",
        "name": "Pinout",
        "info": "",
        "x": 90,
        "y": 2720,
        "wires": []
    },
    {
        "id": "b03e8b51187e88eb",
        "type": "ui_slider",
        "z": "e43a27722b508115",
        "name": "Rotor_delay (ms)",
        "label": "",
        "tooltip": "",
        "group": "7a3279eea439bcdd",
        "order": 12,
        "width": 3,
        "height": 1,
        "passthru": false,
        "outs": "end",
        "topic": "",
        "topicType": "str",
        "min": "0.01",
        "max": "0.2",
        "step": "0.005",
        "className": "",
        "x": 450,
        "y": 1860,
        "wires": [
            [
                "11fd3363416433f9"
            ]
        ]
    },
    {
        "id": "6aae9d4fddf08cc0",
        "type": "ui_slider",
        "z": "e43a27722b508115",
        "name": "tt delay",
        "label": "",
        "tooltip": "",
        "group": "7a3279eea439bcdd",
        "order": 25,
        "width": 3,
        "height": 1,
        "passthru": false,
        "outs": "end",
        "topic": "",
        "topicType": "str",
        "min": "0.01",
        "max": "0.2",
        "step": "0.005",
        "className": "",
        "x": 420,
        "y": 2100,
        "wires": [
            [
                "e50492d1e18f43c6"
            ]
        ]
    },
    {
        "id": "543e1690693acbeb",
        "type": "ui_slider",
        "z": "e43a27722b508115",
        "name": "rotor_acc",
        "label": "",
        "tooltip": "",
        "group": "7a3279eea439bcdd",
        "order": 14,
        "width": 3,
        "height": 1,
        "passthru": false,
        "outs": "end",
        "topic": "",
        "topicType": "str",
        "min": "0.1",
        "max": "2",
        "step": "0.1",
        "className": "",
        "x": 420,
        "y": 1900,
        "wires": [
            [
                "e8b24efb0f30288e"
            ]
        ]
    },
    {
        "id": "9a56c087d941f1da",
        "type": "ui_slider",
        "z": "e43a27722b508115",
        "name": "rotor_accramp",
        "label": "",
        "tooltip": "",
        "group": "7a3279eea439bcdd",
        "order": 16,
        "width": 3,
        "height": 1,
        "passthru": false,
        "outs": "end",
        "topic": "",
        "topicType": "str",
        "min": "100",
        "max": "5000",
        "step": "100",
        "className": "",
        "x": 440,
        "y": 1940,
        "wires": [
            [
                "29f576be9e292232"
            ]
        ]
    },
    {
        "id": "dfdebe10dbf0e198",
        "type": "ui_text_input",
        "z": "e43a27722b508115",
        "name": "rotor_stepsperrotation",
        "label": "",
        "tooltip": "",
        "group": "7a3279eea439bcdd",
        "order": 10,
        "width": 3,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 460,
        "y": 1820,
        "wires": [
            [
                "78e256083f59f66f"
            ]
        ]
    },
    {
        "id": "af8dfe78cbd0c301",
        "type": "ui_text",
        "z": "e43a27722b508115",
        "group": "7a3279eea439bcdd",
        "order": 15,
        "width": 3,
        "height": 1,
        "name": "rotor Accramp",
        "label": "Acceleration ramp",
        "format": "",
        "layout": "row-left",
        "className": "",
        "x": 780,
        "y": 1900,
        "wires": []
    },
    {
        "id": "ee4b8908a5b83880",
        "type": "ui_text",
        "z": "e43a27722b508115",
        "group": "7a3279eea439bcdd",
        "order": 9,
        "width": 3,
        "height": 1,
        "name": "rotor_Steps per Rotation",
        "label": "Steps per Rotation",
        "format": "",
        "layout": "row-spread",
        "className": "",
        "x": 810,
        "y": 1940,
        "wires": []
    },
    {
        "id": "c4deaa38c1b0adbf",
        "type": "ui_text",
        "z": "e43a27722b508115",
        "group": "7a3279eea439bcdd",
        "order": 13,
        "width": 3,
        "height": 1,
        "name": "rotor Acc",
        "label": "Acceleration",
        "format": "",
        "layout": "row-left",
        "className": "",
        "x": 760,
        "y": 1860,
        "wires": []
    },
    {
        "id": "baec873a95fff48a",
        "type": "ui_text",
        "z": "e43a27722b508115",
        "group": "7a3279eea439bcdd",
        "order": 11,
        "width": 3,
        "height": 1,
        "name": "rotor_delay",
        "label": "Delay",
        "format": "",
        "layout": "row-left",
        "className": "",
        "x": 770,
        "y": 1820,
        "wires": []
    },
    {
        "id": "355e89ab4e5484e4",
        "type": "ui_text",
        "z": "e43a27722b508115",
        "group": "7a3279eea439bcdd",
        "order": 21,
        "width": 6,
        "height": 1,
        "name": "tt",
        "label": "TURNTABLE",
        "format": "",
        "layout": "row-center",
        "className": "",
        "x": 90,
        "y": 2060,
        "wires": []
    },
    {
        "id": "10687d331a732790",
        "type": "ui_slider",
        "z": "e43a27722b508115",
        "name": "tt_acc",
        "label": "",
        "tooltip": "",
        "group": "7a3279eea439bcdd",
        "order": 27,
        "width": 3,
        "height": 1,
        "passthru": false,
        "outs": "end",
        "topic": "",
        "topicType": "str",
        "min": "0.1",
        "max": "2",
        "step": "0.1",
        "className": "",
        "x": 410,
        "y": 2140,
        "wires": [
            [
                "af88b9da72917d62"
            ]
        ]
    },
    {
        "id": "721b9680a3fa460e",
        "type": "ui_slider",
        "z": "e43a27722b508115",
        "name": "tt_accramp",
        "label": "",
        "tooltip": "",
        "group": "7a3279eea439bcdd",
        "order": 29,
        "width": 3,
        "height": 1,
        "passthru": false,
        "outs": "end",
        "topic": "",
        "topicType": "str",
        "min": "1",
        "max": "500",
        "step": "1",
        "className": "",
        "x": 430,
        "y": 2180,
        "wires": [
            [
                "b1b4678827d3a6dd"
            ]
        ]
    },
    {
        "id": "c6642c7470d3820c",
        "type": "ui_text_input",
        "z": "e43a27722b508115",
        "name": "tt_stepsperrotation",
        "label": "",
        "tooltip": "",
        "group": "7a3279eea439bcdd",
        "order": 23,
        "width": 3,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 450,
        "y": 2060,
        "wires": [
            [
                "eef89545ec0f6aa8"
            ]
        ]
    },
    {
        "id": "18e5918748660109",
        "type": "ui_text",
        "z": "e43a27722b508115",
        "group": "7a3279eea439bcdd",
        "order": 28,
        "width": 3,
        "height": 1,
        "name": "ttAccramp",
        "label": "Acceleration ramp",
        "format": "",
        "layout": "row-left",
        "className": "",
        "x": 760,
        "y": 2180,
        "wires": []
    },
    {
        "id": "8e805244dc1899e8",
        "type": "ui_text",
        "z": "e43a27722b508115",
        "group": "7a3279eea439bcdd",
        "order": 22,
        "width": 3,
        "height": 1,
        "name": "tt_steps per Rotation",
        "label": "Steps per Rotation",
        "format": "",
        "layout": "row-spread",
        "className": "",
        "x": 800,
        "y": 2060,
        "wires": []
    },
    {
        "id": "a09e5fbea861bfb1",
        "type": "ui_text",
        "z": "e43a27722b508115",
        "group": "7a3279eea439bcdd",
        "order": 26,
        "width": 3,
        "height": 1,
        "name": "tt Acc",
        "label": "Acceleration",
        "format": "",
        "layout": "row-left",
        "className": "",
        "x": 750,
        "y": 2140,
        "wires": []
    },
    {
        "id": "7b06448b3b222011",
        "type": "ui_text",
        "z": "e43a27722b508115",
        "group": "7a3279eea439bcdd",
        "order": 24,
        "width": 3,
        "height": 1,
        "name": "tt_delay",
        "label": "Delay",
        "format": "",
        "layout": "row-left",
        "className": "",
        "x": 760,
        "y": 2100,
        "wires": []
    },
    {
        "id": "0dfc86d90258f9bb",
        "type": "ui_slider",
        "z": "e43a27722b508115",
        "name": "rotor_angle",
        "label": "",
        "tooltip": "",
        "group": "7a3279eea439bcdd",
        "order": 18,
        "width": 3,
        "height": 1,
        "passthru": false,
        "outs": "end",
        "topic": "",
        "topicType": "str",
        "min": "1",
        "max": "180",
        "step": "1",
        "className": "",
        "x": 430,
        "y": 1980,
        "wires": [
            [
                "c4b5a38c5c1df3d2"
            ]
        ]
    },
    {
        "id": "9319d7d4f34c6d22",
        "type": "ui_text",
        "z": "e43a27722b508115",
        "group": "7a3279eea439bcdd",
        "order": 17,
        "width": 3,
        "height": 1,
        "name": "rotor_angle",
        "label": "Manual angle",
        "format": "",
        "layout": "row-spread",
        "className": "",
        "x": 770,
        "y": 1980,
        "wires": []
    },
    {
        "id": "1610895f430b9aca",
        "type": "ui_slider",
        "z": "e43a27722b508115",
        "name": "tt_angle",
        "label": "",
        "tooltip": "",
        "group": "7a3279eea439bcdd",
        "order": 31,
        "width": 3,
        "height": 1,
        "passthru": false,
        "outs": "end",
        "topic": "",
        "topicType": "str",
        "min": "1",
        "max": "180",
        "step": "1",
        "className": "",
        "x": 420,
        "y": 2220,
        "wires": [
            [
                "0f3367983bb8e159"
            ]
        ]
    },
    {
        "id": "96a9febc0928b6f0",
        "type": "ui_text",
        "z": "e43a27722b508115",
        "group": "7a3279eea439bcdd",
        "order": 30,
        "width": 3,
        "height": 1,
        "name": "tt_angle",
        "label": "Manual angle",
        "format": "",
        "layout": "row-spread",
        "className": "",
        "x": 760,
        "y": 2220,
        "wires": []
    },
    {
        "id": "e2c5ea8c16a5ea32",
        "type": "ui_text",
        "z": "e43a27722b508115",
        "group": "7a3279eea439bcdd",
        "order": 2,
        "width": 6,
        "height": 1,
        "name": "rotor",
        "label": "ROTOR",
        "format": "",
        "layout": "row-center",
        "className": "",
        "x": 90,
        "y": 1700,
        "wires": []
    },
    {
        "id": "277037c4716d85bf",
        "type": "ui_slider",
        "z": "e43a27722b508115",
        "name": "tt_dir",
        "label": "",
        "tooltip": "",
        "group": "7a3279eea439bcdd",
        "order": 33,
        "width": 3,
        "height": 1,
        "passthru": false,
        "outs": "end",
        "topic": "",
        "topicType": "str",
        "min": "0",
        "max": "1",
        "step": "1",
        "className": "",
        "x": 410,
        "y": 2260,
        "wires": [
            [
                "c9d2e31514def4fc"
            ]
        ]
    },
    {
        "id": "1361134e9847f003",
        "type": "ui_slider",
        "z": "e43a27722b508115",
        "name": "rotor_dir",
        "label": "",
        "tooltip": "",
        "group": "7a3279eea439bcdd",
        "order": 20,
        "width": 3,
        "height": 1,
        "passthru": false,
        "outs": "end",
        "topic": "",
        "topicType": "str",
        "min": "0",
        "max": "1",
        "step": "1",
        "className": "",
        "x": 420,
        "y": 2020,
        "wires": [
            [
                "523717b0f218a5fd"
            ]
        ]
    },
    {
        "id": "6b0d58943ecb8bb2",
        "type": "ui_text",
        "z": "e43a27722b508115",
        "group": "7a3279eea439bcdd",
        "order": 32,
        "width": 3,
        "height": 1,
        "name": "tt_dir",
        "label": "Direction",
        "format": "",
        "layout": "row-spread",
        "className": "",
        "x": 750,
        "y": 2260,
        "wires": []
    },
    {
        "id": "08f93dd2aeedb391",
        "type": "ui_text",
        "z": "e43a27722b508115",
        "group": "7a3279eea439bcdd",
        "order": 19,
        "width": 3,
        "height": 1,
        "name": "rotor_dir",
        "label": "Direction",
        "format": "",
        "layout": "row-spread",
        "className": "",
        "x": 760,
        "y": 2020,
        "wires": []
    },
    {
        "id": "46b91bef44714366",
        "type": "link in",
        "z": "e43a27722b508115",
        "name": "advanced settings",
        "links": [
            "8750ad979e9ea246"
        ],
        "x": 95,
        "y": 100,
        "wires": [
            [
                "89eedf29b404f750"
            ]
        ]
    },
    {
        "id": "8750ad979e9ea246",
        "type": "link out",
        "z": "e43a27722b508115",
        "name": "",
        "mode": "link",
        "links": [
            "46b91bef44714366"
        ],
        "x": 955,
        "y": 460,
        "wires": []
    },
    {
        "id": "2522f888dc58972f",
        "type": "ui_slider",
        "z": "e43a27722b508115",
        "name": "cam_delay_before",
        "label": "",
        "tooltip": "",
        "group": "d324f0b852c2df0a",
        "order": 7,
        "width": 3,
        "height": 1,
        "passthru": false,
        "outs": "end",
        "topic": "",
        "topicType": "str",
        "min": "0",
        "max": "1",
        "step": "0.02",
        "className": "",
        "x": 430,
        "y": 2360,
        "wires": [
            [
                "5c752757090c49d2"
            ]
        ]
    },
    {
        "id": "30e8df3d616512d8",
        "type": "ui_slider",
        "z": "e43a27722b508115",
        "name": "cam_gain",
        "label": "",
        "tooltip": "",
        "group": "d324f0b852c2df0a",
        "order": 11,
        "width": 3,
        "height": 1,
        "passthru": false,
        "outs": "end",
        "topic": "",
        "topicType": "str",
        "min": "0",
        "max": "10",
        "step": "0.1",
        "className": "",
        "x": 400,
        "y": 2400,
        "wires": [
            [
                "a1769f0277834f6d"
            ]
        ]
    },
    {
        "id": "d855d926df89d65b",
        "type": "ui_slider",
        "z": "e43a27722b508115",
        "name": "cam_contrast",
        "label": "",
        "tooltip": "",
        "group": "d324f0b852c2df0a",
        "order": 13,
        "width": 3,
        "height": 1,
        "passthru": false,
        "outs": "end",
        "topic": "",
        "topicType": "str",
        "min": "0",
        "max": "5",
        "step": "0.1",
        "className": "",
        "x": 420,
        "y": 2520,
        "wires": [
            [
                "1a8b0ba21b4f3005",
                "654bc70a18820828"
            ]
        ]
    },
    {
        "id": "7617517dc8ba2859",
        "type": "ui_slider",
        "z": "e43a27722b508115",
        "name": "cam_saturation",
        "label": "",
        "tooltip": "",
        "group": "d324f0b852c2df0a",
        "order": 15,
        "width": 3,
        "height": 1,
        "passthru": false,
        "outs": "end",
        "topic": "",
        "topicType": "str",
        "min": "0",
        "max": "5",
        "step": "0.1",
        "className": "",
        "x": 420,
        "y": 2560,
        "wires": [
            [
                "dc8fc962ff7d594b",
                "e64feb03a791ca33"
            ]
        ]
    },
    {
        "id": "cbaa23c34e10fae1",
        "type": "ui_slider",
        "z": "e43a27722b508115",
        "name": "cam_jpeg_q",
        "label": "",
        "tooltip": "",
        "group": "d324f0b852c2df0a",
        "order": 3,
        "width": 3,
        "height": 1,
        "passthru": false,
        "outs": "end",
        "topic": "",
        "topicType": "str",
        "min": "1",
        "max": "100",
        "step": "1",
        "className": "",
        "x": 410,
        "y": 2600,
        "wires": [
            [
                "00e7836ccb3c4d0c"
            ]
        ]
    },
    {
        "id": "bbe443b039a14e21",
        "type": "ui_text",
        "z": "e43a27722b508115",
        "group": "d324f0b852c2df0a",
        "order": 6,
        "width": 3,
        "height": 1,
        "name": "delay_before",
        "label": "Delay before",
        "format": "",
        "layout": "row-spread",
        "className": "",
        "x": 760,
        "y": 2360,
        "wires": []
    },
    {
        "id": "d320ed3d701e6cc2",
        "type": "ui_text",
        "z": "e43a27722b508115",
        "group": "d324f0b852c2df0a",
        "order": 10,
        "width": 3,
        "height": 1,
        "name": "gain",
        "label": "Gain",
        "format": "",
        "layout": "row-spread",
        "className": "",
        "x": 740,
        "y": 2400,
        "wires": []
    },
    {
        "id": "f5834dd4646c8af9",
        "type": "ui_text",
        "z": "e43a27722b508115",
        "group": "d324f0b852c2df0a",
        "order": 12,
        "width": 3,
        "height": 1,
        "name": "contrast",
        "label": "Contrast",
        "format": "",
        "layout": "row-spread",
        "className": "",
        "x": 750,
        "y": 2520,
        "wires": []
    },
    {
        "id": "ae9a4e19469813ef",
        "type": "ui_text",
        "z": "e43a27722b508115",
        "group": "d324f0b852c2df0a",
        "order": 14,
        "width": 3,
        "height": 1,
        "name": "saturation",
        "label": "Saturation",
        "format": "",
        "layout": "row-spread",
        "className": "",
        "x": 750,
        "y": 2560,
        "wires": []
    },
    {
        "id": "bd629d0d31233c8b",
        "type": "ui_text",
        "z": "e43a27722b508115",
        "group": "d324f0b852c2df0a",
        "order": 2,
        "width": 3,
        "height": 1,
        "name": "jpegQ",
        "label": "Jpeg Quality",
        "format": "",
        "layout": "row-spread",
        "className": "",
        "x": 740,
        "y": 2600,
        "wires": []
    },
    {
        "id": "e89f61dbe6a6cffe",
        "type": "ui_text_input",
        "z": "e43a27722b508115",
        "name": "ext",
        "label": "",
        "tooltip": "",
        "group": "70d0be671bf03ca7",
        "order": 3,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 390,
        "y": 2760,
        "wires": [
            [
                "885bc559fafec5f2"
            ]
        ]
    },
    {
        "id": "ece38cb172a12d75",
        "type": "ui_text",
        "z": "e43a27722b508115",
        "group": "70d0be671bf03ca7",
        "order": 2,
        "width": 4,
        "height": 1,
        "name": "ext",
        "label": "External Camera",
        "format": "",
        "layout": "row-spread",
        "className": "",
        "x": 730,
        "y": 2760,
        "wires": []
    },
    {
        "id": "70014da0b6ab6698",
        "type": "ui_text_input",
        "z": "e43a27722b508115",
        "name": "light1",
        "label": "",
        "tooltip": "",
        "group": "70d0be671bf03ca7",
        "order": 5,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 390,
        "y": 2800,
        "wires": [
            [
                "f70321c96bf81360"
            ]
        ]
    },
    {
        "id": "29634ea5f6d666df",
        "type": "ui_text",
        "z": "e43a27722b508115",
        "group": "70d0be671bf03ca7",
        "order": 4,
        "width": 4,
        "height": 1,
        "name": "light1",
        "label": "Light 1",
        "format": "",
        "layout": "row-spread",
        "className": "",
        "x": 730,
        "y": 2800,
        "wires": []
    },
    {
        "id": "2544963852c6881a",
        "type": "ui_text_input",
        "z": "e43a27722b508115",
        "name": "light2",
        "label": "",
        "tooltip": "",
        "group": "70d0be671bf03ca7",
        "order": 7,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 390,
        "y": 2840,
        "wires": [
            [
                "95e1603bbd06a69d"
            ]
        ]
    },
    {
        "id": "27903533cd85a59e",
        "type": "ui_text",
        "z": "e43a27722b508115",
        "group": "70d0be671bf03ca7",
        "order": 6,
        "width": 4,
        "height": 1,
        "name": "light2",
        "label": "Light 2",
        "format": "",
        "layout": "row-spread",
        "className": "",
        "x": 730,
        "y": 2840,
        "wires": []
    },
    {
        "id": "a1394401246eb735",
        "type": "ui_text_input",
        "z": "e43a27722b508115",
        "name": "rotordir",
        "label": "",
        "tooltip": "",
        "group": "70d0be671bf03ca7",
        "order": 9,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 400,
        "y": 2880,
        "wires": [
            [
                "a8f92ea6bf394640"
            ]
        ]
    },
    {
        "id": "bc0aa4bacdfa94ea",
        "type": "ui_text",
        "z": "e43a27722b508115",
        "group": "70d0be671bf03ca7",
        "order": 8,
        "width": 4,
        "height": 1,
        "name": "rotordir",
        "label": "Rotor direction",
        "format": "",
        "layout": "row-spread",
        "className": "",
        "x": 740,
        "y": 2880,
        "wires": []
    },
    {
        "id": "f15ca4518b5f223e",
        "type": "ui_text_input",
        "z": "e43a27722b508115",
        "name": "rotorstep",
        "label": "",
        "tooltip": "",
        "group": "70d0be671bf03ca7",
        "order": 11,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 400,
        "y": 2920,
        "wires": [
            [
                "06397bb46b3bb541"
            ]
        ]
    },
    {
        "id": "0d2924b160e7e383",
        "type": "ui_text",
        "z": "e43a27722b508115",
        "group": "70d0be671bf03ca7",
        "order": 10,
        "width": 4,
        "height": 1,
        "name": "rotorstep",
        "label": "Rotor step",
        "format": "",
        "layout": "row-spread",
        "className": "",
        "x": 740,
        "y": 2920,
        "wires": []
    },
    {
        "id": "49900bb9047dd965",
        "type": "ui_text_input",
        "z": "e43a27722b508115",
        "name": "rotoren",
        "label": "",
        "tooltip": "",
        "group": "70d0be671bf03ca7",
        "order": 13,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 400,
        "y": 2960,
        "wires": [
            [
                "687dcdc1ede11700"
            ]
        ]
    },
    {
        "id": "a4d743ca73ee1622",
        "type": "ui_text",
        "z": "e43a27722b508115",
        "group": "70d0be671bf03ca7",
        "order": 12,
        "width": 4,
        "height": 1,
        "name": "rotoren",
        "label": "Rotor enable",
        "format": "",
        "layout": "row-spread",
        "className": "",
        "x": 740,
        "y": 2960,
        "wires": []
    },
    {
        "id": "5a90224dc998b417",
        "type": "ui_text_input",
        "z": "e43a27722b508115",
        "name": "ttdir",
        "label": "",
        "tooltip": "",
        "group": "70d0be671bf03ca7",
        "order": 15,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 390,
        "y": 3000,
        "wires": [
            [
                "e220740c0d38ccb0"
            ]
        ]
    },
    {
        "id": "67dc1b544c4ddf9f",
        "type": "ui_text",
        "z": "e43a27722b508115",
        "group": "70d0be671bf03ca7",
        "order": 14,
        "width": 4,
        "height": 1,
        "name": "ttdir",
        "label": "Turntable direction",
        "format": "",
        "layout": "row-spread",
        "className": "",
        "x": 730,
        "y": 3000,
        "wires": []
    },
    {
        "id": "d2364ab09627fe94",
        "type": "ui_text_input",
        "z": "e43a27722b508115",
        "name": "ttstep",
        "label": "",
        "tooltip": "",
        "group": "70d0be671bf03ca7",
        "order": 17,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 390,
        "y": 3040,
        "wires": [
            [
                "79d7e5a705ab813a"
            ]
        ]
    },
    {
        "id": "145b67ac40721ba6",
        "type": "ui_text",
        "z": "e43a27722b508115",
        "group": "70d0be671bf03ca7",
        "order": 16,
        "width": 4,
        "height": 1,
        "name": "ttstep",
        "label": "Turntable step",
        "format": "",
        "layout": "row-spread",
        "className": "",
        "x": 730,
        "y": 3040,
        "wires": []
    },
    {
        "id": "eef25405472acfee",
        "type": "ui_text_input",
        "z": "e43a27722b508115",
        "name": "endstop1",
        "label": "",
        "tooltip": "",
        "group": "70d0be671bf03ca7",
        "order": 19,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 400,
        "y": 3080,
        "wires": [
            [
                "12d20f2274bcc511"
            ]
        ]
    },
    {
        "id": "35eb252a41413531",
        "type": "ui_text",
        "z": "e43a27722b508115",
        "group": "70d0be671bf03ca7",
        "order": 18,
        "width": 4,
        "height": 1,
        "name": "endstop1",
        "label": "Endstop Rotor",
        "format": "",
        "layout": "row-spread",
        "className": "",
        "x": 740,
        "y": 3080,
        "wires": []
    },
    {
        "id": "74e455136b5ca5dd",
        "type": "ui_text_input",
        "z": "e43a27722b508115",
        "name": "endstop2",
        "label": "",
        "tooltip": "",
        "group": "70d0be671bf03ca7",
        "order": 21,
        "width": 2,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 400,
        "y": 3120,
        "wires": [
            [
                "a4a89668ce4c9f05"
            ]
        ]
    },
    {
        "id": "3a74f653800eb831",
        "type": "ui_text",
        "z": "e43a27722b508115",
        "group": "70d0be671bf03ca7",
        "order": 20,
        "width": 4,
        "height": 1,
        "name": "endstop2",
        "label": "Endstop Turntable",
        "format": "",
        "layout": "row-spread",
        "className": "",
        "x": 740,
        "y": 3120,
        "wires": []
    },
    {
        "id": "5fcef1cb2e9e4788",
        "type": "ui_toast",
        "z": "e43a27722b508115",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": true,
        "className": "",
        "topic": "",
        "name": "confirm",
        "x": 680,
        "y": 460,
        "wires": [
            [
                "29745a36fc157f3f"
            ]
        ]
    },
    {
        "id": "f06a7bcad524e9f9",
        "type": "python3-function",
        "z": "e43a27722b508115",
        "name": "msg",
        "func": "from OpenScan import save, load_bool\n\nif msg['payload'] == True and not load_bool('advanced_settings'):\n    msg['payload'] = '''<p style=\"text-align: center;\"><span style=\"font-size: 22px;\"><strong><u>PLEASE READ :)</u></strong></span></p>\n<p style=\"margin-left: 20px; text-align: center;\"><strong>Modifying the advanced settings can potentially damage your device and/or the connected peripherals.</strong></p>\n<p style=\"margin-left: 20px; text-align: center;\"><strong>Please read the given information texts carefully and only change settings, when you are sure about the consequences!</strong></p>\n'''\n    return msg\nelif not msg['payload']: \n    save('advanced_settings', False)\n",
        "outputs": 1,
        "x": 530,
        "y": 460,
        "wires": [
            [
                "5fcef1cb2e9e4788"
            ]
        ]
    },
    {
        "id": "f455fb39039617ae",
        "type": "ui_slider",
        "z": "e43a27722b508115",
        "name": "cam_rotation",
        "label": "",
        "tooltip": "",
        "group": "d324f0b852c2df0a",
        "order": 5,
        "width": 3,
        "height": 1,
        "passthru": false,
        "outs": "end",
        "topic": "",
        "topicType": "str",
        "min": "0",
        "max": "270",
        "step": "90",
        "className": "",
        "x": 410,
        "y": 2640,
        "wires": [
            [
                "3019576de193d9d6"
            ]
        ]
    },
    {
        "id": "fdfbc900fe424eb9",
        "type": "ui_text",
        "z": "e43a27722b508115",
        "group": "d324f0b852c2df0a",
        "order": 4,
        "width": 3,
        "height": 1,
        "name": "cam_rot",
        "label": "Image Rotation",
        "format": "",
        "layout": "row-spread",
        "className": "",
        "x": 750,
        "y": 2640,
        "wires": []
    },
    {
        "id": "c3699d6b9664ccca",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "loadI",
        "func": "var file = 'rotor_stepsperrotation'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst data = fs.readFileSync(filepath+file, 'utf8');\nmsg.payload = parseInt(data);\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 1820,
        "wires": [
            [
                "dfdebe10dbf0e198"
            ]
        ]
    },
    {
        "id": "78e256083f59f66f",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "write",
        "func": "var file = 'rotor_stepsperrotation'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst content = String(msg.payload)\nfs.writeFile(filepath + file, content, err => {\n  if (err) {\n    return\n  }\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1820,
        "wires": [
            []
        ]
    },
    {
        "id": "0f9141b401322374",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "loadI",
        "func": "var file = 'rotor_accramp'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst data = fs.readFileSync(filepath+file, 'utf8');\nmsg.payload = parseInt(data);\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 1940,
        "wires": [
            [
                "9a56c087d941f1da"
            ]
        ]
    },
    {
        "id": "29f576be9e292232",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "write",
        "func": "var file = 'rotor_accramp'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\n\nconst content = String(msg.payload)\nfs.writeFile(filepath + file, content, err => {\n  if (err) {\n    return\n  }\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1940,
        "wires": [
            []
        ]
    },
    {
        "id": "23e3099b34c4e475",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "loadI",
        "func": "var file = 'rotor_angle'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst data = fs.readFileSync(filepath+file, 'utf8');\nmsg.payload = parseInt(data);\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 1980,
        "wires": [
            [
                "0dfc86d90258f9bb"
            ]
        ]
    },
    {
        "id": "c4b5a38c5c1df3d2",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "write",
        "func": "var file = 'rotor_angle'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\n\nconst content = String(msg.payload)\nfs.writeFile(filepath + file, content, err => {\n  if (err) {\n    return\n  }\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1980,
        "wires": [
            []
        ]
    },
    {
        "id": "79a14162ac805fac",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "loadI",
        "func": "var file = 'rotor_dir'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst data = fs.readFileSync(filepath+file, 'utf8');\nmsg.payload = parseInt(data);\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 2020,
        "wires": [
            [
                "1361134e9847f003"
            ]
        ]
    },
    {
        "id": "523717b0f218a5fd",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "write",
        "func": "var file = 'rotor_dir'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\n\nif (msg.payload === 1){\n    content = '1'\n}\nelse{\n    content = '-1'\n}\n\nfs.writeFile(filepath + file, content, err => {\n  if (err) {\n    return\n  }\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 2020,
        "wires": [
            []
        ]
    },
    {
        "id": "f5cf780f3fa8997e",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "loadF",
        "func": "var file = 'rotor_delay'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst data = fs.readFileSync(filepath+file, 'utf8');\nmsg.payload = parseFloat(data) * 1000;\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 1860,
        "wires": [
            [
                "b03e8b51187e88eb"
            ]
        ]
    },
    {
        "id": "11fd3363416433f9",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "write",
        "func": "var file = 'rotor_delay'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst content = String(msg.payload / 1000)\nfs.writeFile(filepath + file, content, err => {\n  if (err) {\n    return\n  }\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1860,
        "wires": [
            []
        ]
    },
    {
        "id": "02060b3f3b294563",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "loadF",
        "func": "var file = 'rotor_acc'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst data = fs.readFileSync(filepath+file, 'utf8');\nmsg.payload = parseFloat(data);\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 1900,
        "wires": [
            [
                "543e1690693acbeb"
            ]
        ]
    },
    {
        "id": "e8b24efb0f30288e",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "write",
        "func": "var file = 'rotor_acc'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst content = String(msg.payload)\nfs.writeFile(filepath + file, content, err => {\n  if (err) {\n    return\n  }\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1900,
        "wires": [
            []
        ]
    },
    {
        "id": "de1ad8b27b72a5ac",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "loadI",
        "func": "var file = 'tt_stepsperrotation'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst data = fs.readFileSync(filepath+file, 'utf8');\nsteps = parseInt(data);\nif (steps == 3600){\n    steps = 3200\n}\n\nmsg.payload = steps\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 2060,
        "wires": [
            [
                "c6642c7470d3820c"
            ]
        ]
    },
    {
        "id": "ed4d587cb4feb064",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "loadI",
        "func": "var file = 'tt_accramp'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst data = fs.readFileSync(filepath+file, 'utf8');\nmsg.payload = parseInt(data);\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 2180,
        "wires": [
            [
                "721b9680a3fa460e"
            ]
        ]
    },
    {
        "id": "5b02160c33605ae7",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "loadI",
        "func": "var file = 'tt_angle'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst data = fs.readFileSync(filepath+file, 'utf8');\nmsg.payload = parseInt(data);\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 2220,
        "wires": [
            [
                "1610895f430b9aca"
            ]
        ]
    },
    {
        "id": "304c135ec09801e3",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "loadI",
        "func": "var file = 'tt_dir'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst data = fs.readFileSync(filepath+file, 'utf8');\nmsg.payload = parseInt(data);\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 2260,
        "wires": [
            [
                "277037c4716d85bf"
            ]
        ]
    },
    {
        "id": "a91dcbe0f9a2416a",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "loadF",
        "func": "var file = 'tt_delay'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst data = fs.readFileSync(filepath+file, 'utf8');\nmsg.payload = parseFloat(data) * 1000;\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 2100,
        "wires": [
            [
                "6aae9d4fddf08cc0"
            ]
        ]
    },
    {
        "id": "6b2eb1cb95e573f9",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "loadF",
        "func": "var file = 'tt_acc'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst data = fs.readFileSync(filepath+file, 'utf8');\nmsg.payload = parseFloat(data);\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 2140,
        "wires": [
            [
                "10687d331a732790"
            ]
        ]
    },
    {
        "id": "eef89545ec0f6aa8",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "write",
        "func": "var file = 'tt_stepsperrotation'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst content = String(msg.payload)\nfs.writeFile(filepath + file, content, err => {\n  if (err) {\n    return\n  }\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 2060,
        "wires": [
            []
        ]
    },
    {
        "id": "b1b4678827d3a6dd",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "write",
        "func": "var file = 'tt_accramp'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\n\nconst content = String(msg.payload)\nfs.writeFile(filepath + file, content, err => {\n  if (err) {\n    return\n  }\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 2180,
        "wires": [
            []
        ]
    },
    {
        "id": "0f3367983bb8e159",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "write",
        "func": "var file = 'tt_angle'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\n\nconst content = String(msg.payload)\nfs.writeFile(filepath + file, content, err => {\n  if (err) {\n    return\n  }\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 2220,
        "wires": [
            []
        ]
    },
    {
        "id": "c9d2e31514def4fc",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "write",
        "func": "var file = 'tt_dir'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\n\nif (msg.payload === 1){\n    content = '1'\n}\nelse{\n    content = '-1'\n}\n\nfs.writeFile(filepath + file, content, err => {\n  if (err) {\n    return\n  }\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 2260,
        "wires": [
            []
        ]
    },
    {
        "id": "e50492d1e18f43c6",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "write",
        "func": "var file = 'tt_delay'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst content = String(msg.payload / 1000)\nfs.writeFile(filepath + file, content, err => {\n  if (err) {\n    return\n  }\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 2100,
        "wires": [
            []
        ]
    },
    {
        "id": "af88b9da72917d62",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "write",
        "func": "var file = 'tt_acc'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst content = String(msg.payload)\nfs.writeFile(filepath + file, content, err => {\n  if (err) {\n    return\n  }\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 2140,
        "wires": [
            []
        ]
    },
    {
        "id": "43fe948b3e7234e2",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "loadF",
        "func": "var file = 'cam_delay_before'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst data = fs.readFileSync(filepath+file, 'utf8');\nmsg.payload = parseFloat(data);\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 2360,
        "wires": [
            [
                "2522f888dc58972f"
            ]
        ]
    },
    {
        "id": "5c752757090c49d2",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "write",
        "func": "var file = 'cam_delay_before'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\n\nconst content = String(msg.payload)\nfs.writeFile(filepath + file, content, err => {\n  if (err) {\n    return\n  }\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 2360,
        "wires": [
            []
        ]
    },
    {
        "id": "435681b3f7625a7e",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "loadF",
        "func": "var file = 'cam_gain'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst data = fs.readFileSync(filepath+file, 'utf8');\nmsg.payload = parseFloat(data);\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 2400,
        "wires": [
            [
                "30e8df3d616512d8"
            ]
        ]
    },
    {
        "id": "a1769f0277834f6d",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "write",
        "func": "var file = 'cam_gain'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\n\nconst content = String(msg.payload)\nfs.writeFile(filepath + file, content, err => {\n  if (err) {\n    return\n  }\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 2400,
        "wires": [
            []
        ]
    },
    {
        "id": "1de07c7d285cbaf3",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "loadF",
        "func": "var file = 'cam_contrast'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst data = fs.readFileSync(filepath+file, 'utf8');\nmsg.payload = parseFloat(data);\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 2520,
        "wires": [
            [
                "d855d926df89d65b"
            ]
        ]
    },
    {
        "id": "1a8b0ba21b4f3005",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "write",
        "func": "var file = 'cam_contrast'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\n\nconst content = String(msg.payload)\nfs.writeFile(filepath + file, content, err => {\n  if (err) {\n    return\n  }\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 2520,
        "wires": [
            []
        ]
    },
    {
        "id": "ebc9e283468eda31",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "loadF",
        "func": "var file = 'cam_saturation'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst data = fs.readFileSync(filepath+file, 'utf8');\nmsg.payload = parseFloat(data);\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 2560,
        "wires": [
            [
                "7617517dc8ba2859"
            ]
        ]
    },
    {
        "id": "dc8fc962ff7d594b",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "write",
        "func": "var file = 'cam_saturation'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\n\nconst content = String(msg.payload)\nfs.writeFile(filepath + file, content, err => {\n  if (err) {\n    return\n  }\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 2560,
        "wires": [
            []
        ]
    },
    {
        "id": "60d641613527c736",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "loadI",
        "func": "var file = 'cam_jpeg_quality'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst data = fs.readFileSync(filepath+file, 'utf8');\nmsg.payload = parseInt(data);\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 2600,
        "wires": [
            [
                "cbaa23c34e10fae1"
            ]
        ]
    },
    {
        "id": "00e7836ccb3c4d0c",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "write",
        "func": "var file = 'cam_jpeg_quality'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\n\nconst content = String(msg.payload)\nfs.writeFile(filepath + file, content, err => {\n  if (err) {\n    return\n  }\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 2600,
        "wires": [
            []
        ]
    },
    {
        "id": "7f24c0c34a88ba04",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "loadI",
        "func": "var file = 'cam_rotation'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst data = fs.readFileSync(filepath+file, 'utf8');\nmsg.payload = parseInt(data);\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 2640,
        "wires": [
            [
                "f455fb39039617ae"
            ]
        ]
    },
    {
        "id": "3019576de193d9d6",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "write",
        "func": "var file = 'cam_rotation'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\n\nconst content = String(msg.payload)\nfs.writeFile(filepath + file, content, err => {\n  if (err) {\n    return\n  }\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 2640,
        "wires": [
            []
        ]
    },
    {
        "id": "77bb7dc529d63a7e",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "loadI",
        "func": "var file = 'pin_external'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst data = fs.readFileSync(filepath+file, 'utf8');\nmsg.payload = parseInt(data);\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 2760,
        "wires": [
            [
                "e89f61dbe6a6cffe"
            ]
        ]
    },
    {
        "id": "885bc559fafec5f2",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "write",
        "func": "var file = 'pin_external'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\n\nconst content = String(msg.payload)\nfs.writeFile(filepath + file, content, err => {\n  if (err) {\n    return\n  }\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 2760,
        "wires": [
            []
        ]
    },
    {
        "id": "cc6dabe017a9c8a8",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "loadI",
        "func": "var file = 'pin_rotor_endstop'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst data = fs.readFileSync(filepath+file, 'utf8');\nmsg.payload = parseInt(data);\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 3080,
        "wires": [
            [
                "eef25405472acfee"
            ]
        ]
    },
    {
        "id": "12d20f2274bcc511",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "write",
        "func": "var file = 'pin_rotor_endstop'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\n\nconst content = String(msg.payload)\nfs.writeFile(filepath + file, content, err => {\n  if (err) {\n    return\n  }\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 3080,
        "wires": [
            []
        ]
    },
    {
        "id": "dcb9fed8122759fd",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "loadI",
        "func": "var file = 'pin_ringlight1'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst data = fs.readFileSync(filepath+file, 'utf8');\nmsg.payload = parseInt(data);\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 2800,
        "wires": [
            [
                "70014da0b6ab6698"
            ]
        ]
    },
    {
        "id": "f70321c96bf81360",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "write",
        "func": "var file = 'pin_ringlight1'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\n\nconst content = String(msg.payload)\nfs.writeFile(filepath + file, content, err => {\n  if (err) {\n    return\n  }\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 2800,
        "wires": [
            []
        ]
    },
    {
        "id": "013d2057c2347a62",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "loadI",
        "func": "var file = 'pin_ringlight2'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst data = fs.readFileSync(filepath+file, 'utf8');\nmsg.payload = parseInt(data);\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 2840,
        "wires": [
            [
                "2544963852c6881a"
            ]
        ]
    },
    {
        "id": "95e1603bbd06a69d",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "write",
        "func": "var file = 'pin_ringlight2'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\n\nconst content = String(msg.payload)\nfs.writeFile(filepath + file, content, err => {\n  if (err) {\n    return\n  }\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 2840,
        "wires": [
            []
        ]
    },
    {
        "id": "f88bbf11d5aa9a14",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "loadI",
        "func": "var file = 'pin_rotor_dir'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst data = fs.readFileSync(filepath+file, 'utf8');\nmsg.payload = parseInt(data);\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 2880,
        "wires": [
            [
                "a1394401246eb735"
            ]
        ]
    },
    {
        "id": "a8f92ea6bf394640",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "write",
        "func": "var file = 'pin_rotor_dir'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\n\nconst content = String(msg.payload)\nfs.writeFile(filepath + file, content, err => {\n  if (err) {\n    return\n  }\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 2880,
        "wires": [
            []
        ]
    },
    {
        "id": "301af70731e096e5",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "loadI",
        "func": "var file = 'pin_rotor_step'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst data = fs.readFileSync(filepath+file, 'utf8');\nmsg.payload = parseInt(data);\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 2920,
        "wires": [
            [
                "f15ca4518b5f223e"
            ]
        ]
    },
    {
        "id": "06397bb46b3bb541",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "write",
        "func": "var file = 'pin_rotor_step'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\n\nconst content = String(msg.payload)\nfs.writeFile(filepath + file, content, err => {\n  if (err) {\n    return\n  }\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 2920,
        "wires": [
            []
        ]
    },
    {
        "id": "0456a9ec4c236c9e",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "loadI",
        "func": "var file = 'pin_rotor_enable'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst data = fs.readFileSync(filepath+file, 'utf8');\nmsg.payload = parseInt(data);\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 2960,
        "wires": [
            [
                "49900bb9047dd965"
            ]
        ]
    },
    {
        "id": "687dcdc1ede11700",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "write",
        "func": "var file = 'pin_rotor_enable'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\n\nconst content = String(msg.payload)\nfs.writeFile(filepath + file, content, err => {\n  if (err) {\n    return\n  }\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 2960,
        "wires": [
            []
        ]
    },
    {
        "id": "09d37ba08ec0f163",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "loadI",
        "func": "var file = 'pin_tt_dir'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst data = fs.readFileSync(filepath+file, 'utf8');\nmsg.payload = parseInt(data);\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 3000,
        "wires": [
            [
                "5a90224dc998b417"
            ]
        ]
    },
    {
        "id": "37d954a4cf7e87ea",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "loadI",
        "func": "var file = 'pin_tt_step'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst data = fs.readFileSync(filepath+file, 'utf8');\nmsg.payload = parseInt(data);\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 3040,
        "wires": [
            [
                "d2364ab09627fe94"
            ]
        ]
    },
    {
        "id": "e220740c0d38ccb0",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "write",
        "func": "var file = 'pin_tt_dir'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\n\nconst content = String(msg.payload)\nfs.writeFile(filepath + file, content, err => {\n  if (err) {\n    return\n  }\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 3000,
        "wires": [
            []
        ]
    },
    {
        "id": "79d7e5a705ab813a",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "write",
        "func": "var file = 'pin_tt_step'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\n\nconst content = String(msg.payload)\nfs.writeFile(filepath + file, content, err => {\n  if (err) {\n    return\n  }\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 3040,
        "wires": [
            []
        ]
    },
    {
        "id": "21dc963d967d9c99",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "loadI",
        "func": "var file = 'pin_tt_endstop'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst data = fs.readFileSync(filepath+file, 'utf8');\nmsg.payload = parseInt(data);\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 3120,
        "wires": [
            [
                "74e455136b5ca5dd"
            ]
        ]
    },
    {
        "id": "a4a89668ce4c9f05",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "write",
        "func": "var file = 'pin_tt_endstop'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\n\nconst content = String(msg.payload)\nfs.writeFile(filepath + file, content, err => {\n  if (err) {\n    return\n  }\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 3120,
        "wires": [
            []
        ]
    },
    {
        "id": "22ef66b0e2058be2",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "loadB",
        "func": "var file = 'ssh'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\ndata = fs.readFileSync(filepath+file, 'utf8');\nif(data === '1' || data === 'True' || data === 'true'){\n    data = true;\n}\nelse{\n    data = false;\n}\nmsg.payload = data;\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 360,
        "wires": [
            [
                "cb3437ec113e1b6f"
            ]
        ]
    },
    {
        "id": "9ce01c8ba97932c1",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "loadB",
        "func": "var file = 'smb'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\ndata = fs.readFileSync(filepath+file, 'utf8');\nif(data === '1' || data === 'True' || data === 'true'){\n    data = true;\n}\nelse{\n    data = false;\n}\nmsg.payload = data;\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 400,
        "wires": [
            [
                "60fd0adce1cfeb82"
            ]
        ]
    },
    {
        "id": "81356177176eebcf",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "loadB",
        "func": "var file = 'advanced_settings'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\ndata = fs.readFileSync(filepath+file, 'utf8');\nif(data === '1' || data === 'True' || data === 'true'){\n    data = true;\n}\nelse{\n    data = false;\n}\nmsg.payload = data;\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 460,
        "wires": [
            [
                "f6d6cc35679ede63"
            ]
        ]
    },
    {
        "id": "b78346ca3ce70c68",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "msg",
        "func": "msg.payload = 'This is a free piece of software and it is provided as is, without any warranty. <br>There might be functions that need a connection to the internet: '+\n    '<br><br>By pressing GET FEATURES you agree that the shown preview image will be transfered, stored and processed via SFTP  to my servers '+\n    '(Thomas Megel, OpenScan, Halle, Germany). The IP address will be saved for 14 days  The images might be used for further experiments (e.g. machine learning, automation ...). '+\n    '<br><br>By entering a token and/or pressing UPLOAD, the device will create a connection to my servers, where the associated user information is stored (token, email, name, credit, limit_photos, limit_filesize)'+\n    'The selected image set will be uploaded to Dropbox Inc via one-time temporary upload link. The files will be saved on Dropbox Inc. for a maximum of 7 days. (+the time Dropbox Inc. will need to delete the files permanently)'+\n    'Processing will be done on my local servers, where the images get downloaded from Dropbox and processed on my workstations. The resulting 3D model will be uploaded to Dropbox and a link will be created and send to your email address from my google mail account.'+\n    '<br><br>By uploading data to my servers, you agree, that I can use those images and derived 3d models for further research and to improve my services.'+\n    'The raw images and resulting 3d models will never be published without your explicit consent.'+  \n    '<br><br>If you have any questions you can contact me at info@openscan.eu.'+ \n    '<br><br>THE SOFTWARE IS PROVIDED AS IS WITHOUT '+\n    'WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE'+ \n    'AND NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY,'+ \n    'WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE';\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 320,
        "wires": [
            [
                "f0d8dbcca76a1926"
            ]
        ]
    },
    {
        "id": "e95b86cbac1b03b9",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "write",
        "func": "var data\n\nif(msg.payload === 'Agree'){\n    data = true;\n}\nelse{\n    data = false;\n}\nvar file = 'terms'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nfs.writeFile(filepath+file, String(data), err => {\n  if (err) {\n    return msg\n  }\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "3e4c15d7b538f816",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "msg",
        "func": "if (msg.payload === 'Cancel'){\n    return\n}\nmsg.forename = msg.payload\nmsg.topic = 'OpenScanCloud Registration (3/3)'\nmsg.payload = 'Enter your last name'\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 1540,
        "wires": [
            [
                "3bf622f344172721"
            ]
        ]
    },
    {
        "id": "0f0871baf322b6d0",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "loadI",
        "func": "var file = 'rotor_anglemin'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst data = fs.readFileSync(filepath+file, 'utf8');\nmsg.payload = parseInt(data);\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 1700,
        "wires": [
            [
                "6ebd15c61a5ca891"
            ]
        ]
    },
    {
        "id": "f21a95a732fadae6",
        "type": "ui_text",
        "z": "e43a27722b508115",
        "group": "7a3279eea439bcdd",
        "order": 5,
        "width": 3,
        "height": 1,
        "name": "rotor_anglemin",
        "label": "Min Angle",
        "format": "",
        "layout": "row-left",
        "className": "",
        "x": 780,
        "y": 1700,
        "wires": []
    },
    {
        "id": "acd10a4c99ee8063",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "write",
        "func": "var file = 'rotor_anglemin'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst content = String(msg.payload)\nfs.writeFile(filepath + file, content, err => {\n  if (err) {\n    return\n  }\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1700,
        "wires": [
            []
        ]
    },
    {
        "id": "6ebd15c61a5ca891",
        "type": "ui_slider",
        "z": "e43a27722b508115",
        "name": "rotor_anglemin",
        "label": "",
        "tooltip": "",
        "group": "7a3279eea439bcdd",
        "order": 6,
        "width": 3,
        "height": 1,
        "passthru": false,
        "outs": "end",
        "topic": "",
        "topicType": "str",
        "min": "-90",
        "max": "90",
        "step": "5",
        "className": "",
        "x": 440,
        "y": 1700,
        "wires": [
            [
                "acd10a4c99ee8063"
            ]
        ]
    },
    {
        "id": "3ad0f0f206e4a873",
        "type": "ui_slider",
        "z": "e43a27722b508115",
        "name": "rotor_anglemax",
        "label": "",
        "tooltip": "",
        "group": "7a3279eea439bcdd",
        "order": 8,
        "width": 3,
        "height": 1,
        "passthru": false,
        "outs": "end",
        "topic": "",
        "topicType": "str",
        "min": "-90",
        "max": "90",
        "step": "5",
        "className": "",
        "x": 440,
        "y": 1740,
        "wires": [
            [
                "031d7697768d0e77"
            ]
        ]
    },
    {
        "id": "3b6d759ed5be647f",
        "type": "ui_slider",
        "z": "e43a27722b508115",
        "name": "rotor_anglestart",
        "label": "",
        "tooltip": "",
        "group": "7a3279eea439bcdd",
        "order": 4,
        "width": 3,
        "height": 1,
        "passthru": false,
        "outs": "end",
        "topic": "",
        "topicType": "str",
        "min": "-90",
        "max": "90",
        "step": "5",
        "className": "",
        "x": 440,
        "y": 1780,
        "wires": [
            [
                "be1954dd71d2c94c"
            ]
        ]
    },
    {
        "id": "edb1c8fae8b65c82",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "loadI",
        "func": "var file = 'rotor_anglemax'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst data = fs.readFileSync(filepath+file, 'utf8');\nmsg.payload = parseInt(data);\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 1740,
        "wires": [
            [
                "3ad0f0f206e4a873"
            ]
        ]
    },
    {
        "id": "031d7697768d0e77",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "write",
        "func": "var file = 'rotor_anglemax'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst content = String(msg.payload)\nfs.writeFile(filepath + file, content, err => {\n  if (err) {\n    return\n  }\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1740,
        "wires": [
            []
        ]
    },
    {
        "id": "462a8f3ca75fc3c8",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "loadI",
        "func": "var file = 'rotor_anglestart'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst data = fs.readFileSync(filepath+file, 'utf8');\nmsg.payload = parseInt(data);\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 1780,
        "wires": [
            [
                "3b6d759ed5be647f"
            ]
        ]
    },
    {
        "id": "be1954dd71d2c94c",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "write",
        "func": "var file = 'rotor_anglestart'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst content = String(msg.payload)\nfs.writeFile(filepath + file, content, err => {\n  if (err) {\n    return\n  }\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1780,
        "wires": [
            []
        ]
    },
    {
        "id": "3d7379753d2eda25",
        "type": "ui_text",
        "z": "e43a27722b508115",
        "group": "7a3279eea439bcdd",
        "order": 7,
        "width": 3,
        "height": 1,
        "name": "rotor_anglemax",
        "label": "Max Angle",
        "format": "",
        "layout": "row-left",
        "className": "",
        "x": 780,
        "y": 1740,
        "wires": []
    },
    {
        "id": "9cc86d1bcae3ab4e",
        "type": "ui_text",
        "z": "e43a27722b508115",
        "group": "7a3279eea439bcdd",
        "order": 3,
        "width": 3,
        "height": 1,
        "name": "rotor_anglestart",
        "label": "Start Angle",
        "format": "",
        "layout": "row-left",
        "className": "",
        "x": 780,
        "y": 1780,
        "wires": []
    },
    {
        "id": "2e9b29c70969cf01",
        "type": "link in",
        "z": "e43a27722b508115",
        "name": "enable projectname",
        "links": [
            "960912e90ba5b5bc",
            "50eeb3e362f9027f"
        ],
        "x": 135,
        "y": 360,
        "wires": [
            [
                "22ef66b0e2058be2",
                "9ce01c8ba97932c1",
                "81356177176eebcf"
            ]
        ]
    },
    {
        "id": "592ec13d8f8923a9",
        "type": "link in",
        "z": "e43a27722b508115",
        "name": "ip address",
        "links": [
            "50eeb3e362f9027f",
            "960912e90ba5b5bc",
            "eb1a2387a1eeea76",
            "c994c779e4bad800"
        ],
        "x": 85,
        "y": 940,
        "wires": [
            [
                "ded3086945a6d4b5",
                "6ea3cdab41f20f92"
            ]
        ]
    },
    {
        "id": "cb40b9341bd22a28",
        "type": "link in",
        "z": "e43a27722b508115",
        "name": "enable projectname",
        "links": [
            "960912e90ba5b5bc",
            "50eeb3e362f9027f"
        ],
        "x": 185,
        "y": 1700,
        "wires": [
            [
                "0f0871baf322b6d0",
                "edb1c8fae8b65c82",
                "462a8f3ca75fc3c8",
                "c3699d6b9664ccca",
                "f5cf780f3fa8997e",
                "02060b3f3b294563",
                "0f9141b401322374",
                "23e3099b34c4e475",
                "79a14162ac805fac",
                "de1ad8b27b72a5ac",
                "a91dcbe0f9a2416a",
                "6b2eb1cb95e573f9",
                "ed4d587cb4feb064",
                "5b02160c33605ae7",
                "304c135ec09801e3"
            ]
        ]
    },
    {
        "id": "d1efcd5fa9d25785",
        "type": "link in",
        "z": "e43a27722b508115",
        "name": "enable projectname",
        "links": [
            "960912e90ba5b5bc",
            "50eeb3e362f9027f"
        ],
        "x": 155,
        "y": 2300,
        "wires": [
            [
                "43fe948b3e7234e2",
                "435681b3f7625a7e",
                "1de07c7d285cbaf3",
                "ebc9e283468eda31",
                "60d641613527c736",
                "7f24c0c34a88ba04",
                "6281b2e6e081104d"
            ]
        ]
    },
    {
        "id": "da61581182b7299e",
        "type": "link in",
        "z": "e43a27722b508115",
        "name": "enable projectname",
        "links": [
            "960912e90ba5b5bc",
            "50eeb3e362f9027f"
        ],
        "x": 135,
        "y": 2760,
        "wires": [
            [
                "77bb7dc529d63a7e",
                "dcb9fed8122759fd",
                "013d2057c2347a62",
                "f88bbf11d5aa9a14",
                "301af70731e096e5",
                "0456a9ec4c236c9e",
                "09d37ba08ec0f163",
                "37d954a4cf7e87ea",
                "cc6dabe017a9c8a8",
                "21dc963d967d9c99"
            ]
        ]
    },
    {
        "id": "7e1c84ec516ad0a6",
        "type": "ui_button",
        "z": "e43a27722b508115",
        "name": "Reset default",
        "group": "4390b2ebcbbe104c",
        "order": 6,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Restore default settings",
        "tooltip": "",
        "color": "red",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "This can not be undone!",
        "payloadType": "str",
        "topic": "Restore default settings?",
        "topicType": "str",
        "x": 110,
        "y": 620,
        "wires": [
            [
                "53e6681d7254d484"
            ]
        ]
    },
    {
        "id": "53e6681d7254d484",
        "type": "ui_toast",
        "z": "e43a27722b508115",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "No",
        "cancel": "Yes",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 270,
        "y": 620,
        "wires": [
            [
                "c11e79cfa7bc10b7"
            ]
        ]
    },
    {
        "id": "c11e79cfa7bc10b7",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "msg",
        "func": "msg.overwrite = true\nif(msg.payload == \"Yes\"){\n    return msg}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 620,
        "wires": [
            [
                "307782d10c1acdaf"
            ]
        ]
    },
    {
        "id": "307782d10c1acdaf",
        "type": "link out",
        "z": "e43a27722b508115",
        "name": "",
        "mode": "link",
        "links": [
            "38783aea9cc317a6"
        ],
        "x": 505,
        "y": 620,
        "wires": []
    },
    {
        "id": "5fff689f9f8bc1ca",
        "type": "ui_toast",
        "z": "e43a27722b508115",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "className": "",
        "topic": "",
        "name": "Info",
        "x": 1010,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "cca3300a8f0daf4d",
        "type": "ui_button",
        "z": "e43a27722b508115",
        "name": "Update&Info",
        "group": "ddbd496e.93a288",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "transparent",
        "className": "",
        "icon": "fa-question-circle",
        "payload": "<h1>Update&amp;Log</h1> <p><strong>Status</strong></p> <p>See whether new updates are available. It is highly recommended to use the latest firmware version. See OpenScan2 on <a href=\"%5C%22https://github.com/OpenScanEu/OpenScan2%5C%22\" rel='\\\"noopener' target='\\\"_blank\\\"'>Github.com</a> for details and the source code.</p> <p><strong>Updatetype</strong></p> <p>- stable: latest well-tested and mostly bug-free version for the OpenScanMini or Classic and various cameras</p> <p>- beta: stable version + some experimental and new features, which might bring joy and some new bugs as well</p> <p>- mini: very simplified firmware for the OpenScanMini + Arducam IMX519</p> <p><strong>Auto-Check update availability</strong></p> <p>Perform an automated update-check after each start of the device. If the device is connected to the internet, it will get the latest files from OpenScan2 on <a href=\"%5C%22https://github.com/OpenScanEu/OpenScan2%5C%22\" rel='\\\"noopener' target='\\\"_blank\\\"'>Github.com</a></p> <p>This option is activated by default.</p> <p><strong>Check Updates</strong></p> <p>Alternatively, you can check for updates manually at any time by pressing this button.</p> <p><strong>Download Error Log</strong></p> <p>In case you encounter any errors with your device, please download the error log text and send a copy to <a href=\"%5C%22mailto:info@openscan.eu%5C%22\">info@openscan.eu</a> or create an issue on <a href=\"%5C%22https://github.com/OpenScanEu/OpenScan2%5C%22\" rel='\\\"noopener' target='\\\"_blank\\\"'>Github.com</a></p>",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 750,
        "y": 180,
        "wires": [
            [
                "5fff689f9f8bc1ca"
            ]
        ]
    },
    {
        "id": "654bc70a18820828",
        "type": "python3-function",
        "z": "e43a27722b508115",
        "name": "",
        "func": "from OpenScan import camera\n\ncamera(\"/picam2_contrast?contrast=\" + str(msg['payload']))",
        "outputs": 1,
        "x": 660,
        "y": 2480,
        "wires": [
            []
        ]
    },
    {
        "id": "e64feb03a791ca33",
        "type": "python3-function",
        "z": "e43a27722b508115",
        "name": "",
        "func": "from OpenScan import camera\n\ncamera(\"/picam2_saturation?saturation=\" + str(msg['payload']))",
        "outputs": 1,
        "x": 660,
        "y": 2440,
        "wires": [
            []
        ]
    },
    {
        "id": "81bd4381cd029958",
        "type": "ui_slider",
        "z": "e43a27722b508115",
        "name": "cam_delay_after",
        "label": "",
        "tooltip": "",
        "group": "d324f0b852c2df0a",
        "order": 9,
        "width": 3,
        "height": 1,
        "passthru": false,
        "outs": "end",
        "topic": "",
        "topicType": "str",
        "min": "0",
        "max": "1",
        "step": "0.02",
        "className": "",
        "x": 440,
        "y": 2320,
        "wires": [
            [
                "e612073aded01a8f"
            ]
        ]
    },
    {
        "id": "0d92559980944ae3",
        "type": "ui_text",
        "z": "e43a27722b508115",
        "group": "d324f0b852c2df0a",
        "order": 8,
        "width": 3,
        "height": 1,
        "name": "delay_after",
        "label": "Delay after",
        "format": "",
        "layout": "row-spread",
        "className": "",
        "x": 760,
        "y": 2320,
        "wires": []
    },
    {
        "id": "6281b2e6e081104d",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "loadF",
        "func": "var file = 'cam_delay_after'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst data = fs.readFileSync(filepath+file, 'utf8');\nmsg.payload = parseFloat(data);\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 2320,
        "wires": [
            [
                "81bd4381cd029958"
            ]
        ]
    },
    {
        "id": "e612073aded01a8f",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "write",
        "func": "var file = 'cam_delay_after'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\n\nconst content = String(msg.payload)\nfs.writeFile(filepath + file, content, err => {\n  if (err) {\n    return\n  }\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 2320,
        "wires": [
            []
        ]
    },
    {
        "id": "e2411b49791840e0",
        "type": "python3-function",
        "z": "e43a27722b508115",
        "name": "reboot",
        "func": "import os\nfrom time import sleep\nsleep(1.5)\nimport RPi.GPIO as GPIO\nGPIO.setwarnings(False)\nGPIO.cleanup()\nos.system('reboot -h')\n",
        "outputs": 1,
        "x": 270,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "01c882fcc51b349c",
        "type": "link in",
        "z": "e43a27722b508115",
        "name": "reboot",
        "links": [
            "16c76929f88df841",
            "fe3a855fee9e28c6",
            "09d4a9c756161e10"
        ],
        "x": 155,
        "y": 520,
        "wires": [
            [
                "e2411b49791840e0"
            ]
        ]
    },
    {
        "id": "e51dd5e5c0f050d6",
        "type": "ui_text_input",
        "z": "e43a27722b508115",
        "name": "",
        "label": "SSID",
        "tooltip": "",
        "group": "8ab79a98e536e0d6",
        "order": 4,
        "width": 6,
        "height": 1,
        "passthru": false,
        "mode": "text",
        "delay": "0",
        "topic": "ssid",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 210,
        "y": 980,
        "wires": [
            [
                "a7d233f984009e2e"
            ]
        ]
    },
    {
        "id": "9959649037cb063b",
        "type": "ui_text_input",
        "z": "e43a27722b508115",
        "name": "",
        "label": "Password",
        "tooltip": "",
        "group": "8ab79a98e536e0d6",
        "order": 5,
        "width": 6,
        "height": 1,
        "passthru": false,
        "mode": "password",
        "delay": "0",
        "topic": "password",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 220,
        "y": 1020,
        "wires": [
            [
                "a7d233f984009e2e"
            ]
        ]
    },
    {
        "id": "1d42cb9a63409283",
        "type": "ui_text_input",
        "z": "e43a27722b508115",
        "name": "",
        "label": "Country Code 2",
        "tooltip": "",
        "group": "8ab79a98e536e0d6",
        "order": 6,
        "width": 6,
        "height": 1,
        "passthru": false,
        "mode": "text",
        "delay": "0",
        "topic": "country",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 240,
        "y": 1060,
        "wires": [
            [
                "a7d233f984009e2e"
            ]
        ]
    },
    {
        "id": "84ecaafd629c0f7a",
        "type": "ui_button",
        "z": "e43a27722b508115",
        "name": "",
        "group": "8ab79a98e536e0d6",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Connect to Wifi",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "connect",
        "topicType": "str",
        "x": 240,
        "y": 1100,
        "wires": [
            [
                "a7d233f984009e2e"
            ]
        ]
    },
    {
        "id": "6ea3cdab41f20f92",
        "type": "ui_text",
        "z": "e43a27722b508115",
        "group": "8ab79a98e536e0d6",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Hotspot Mode",
        "format": "{{msg.mode}}",
        "layout": "row-spread",
        "className": "",
        "x": 240,
        "y": 900,
        "wires": []
    },
    {
        "id": "a7d233f984009e2e",
        "type": "function",
        "z": "e43a27722b508115",
        "name": "function 1",
        "func": "if (msg.topic == \"ssid\"){\n    global.set('network_ssid',msg.payload)\n}\nelse if (msg.topic == \"password\"){\n    global.set('network_password',msg.payload)\n}\nelse if (msg.topic == \"country\"){\n    global.set('network_country',msg.payload)\n}\nelse if (msg.topic == \"connect\"){\n    msg.ssid = global.get('network_ssid')\n    msg.password = global.get('network_password')\n    msg.country = global.get('network_country')\n    msg.payload = \"\"\n    return msg\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 980,
        "wires": [
            [
                "9b851aa999e86fd7",
                "021dc780b478fee6",
                "9ec0ad9fd3687e9f"
            ]
        ]
    },
    {
        "id": "65518f3d4e3095e5",
        "type": "link in",
        "z": "e43a27722b508115",
        "name": "link in 1",
        "links": [
            "200d4b9951b6e066"
        ],
        "x": 85,
        "y": 980,
        "wires": [
            [
                "e51dd5e5c0f050d6",
                "9959649037cb063b",
                "1d42cb9a63409283"
            ]
        ]
    },
    {
        "id": "9b851aa999e86fd7",
        "type": "python3-function",
        "z": "e43a27722b508115",
        "name": "",
        "func": "from OpenScan import add_wifi_network, check_hotspot_mode\nfrom time import sleep\n\nsleep(0.5)\n\nerror = \"\"\nif msg['ssid'] == \"\":\n    error = \"SSID, \"\nif msg['password'] == \"\" or len(msg['password'])<8:\n    error = error + \"password, \"\nif msg['country'] == \"\" or len(msg['country']) != 2:\n    error = error + \"country code\"\n\nif error != \"\":\n    msg['payload'] = error\n    msg['topic'] = \"Invalid Input(s):\"\n    if check_hotspot_mode():\n        msg['mode'] = True\n    else:\n        msg['mode'] = False\n    return msg\n\n\nmsg['result'] = add_wifi_network(msg['ssid'],msg['password'],msg['country'])\n\nsleep(3)\n\nif check_hotspot_mode():\n    msg['mode'] = True\nelse:\n    msg['mode'] = False\n\nmsg['topic'] = \"Added wifi & connected\"\nmsg['payload'] = \"changes might take a moment ;)\"\n\nreturn msg",
        "outputs": 1,
        "x": 670,
        "y": 980,
        "wires": [
            [
                "c994c779e4bad800",
                "11b19e9c6a4ffd8d",
                "36890eb99a2ca1cf"
            ]
        ]
    },
    {
        "id": "11b19e9c6a4ffd8d",
        "type": "ui_toast",
        "z": "e43a27722b508115",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 870,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "021dc780b478fee6",
        "type": "debug",
        "z": "e43a27722b508115",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 920,
        "wires": []
    },
    {
        "id": "c994c779e4bad800",
        "type": "link out",
        "z": "e43a27722b508115",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "592ec13d8f8923a9"
        ],
        "x": 815,
        "y": 1020,
        "wires": []
    },
    {
        "id": "1eef47e0074545a9",
        "type": "python3-function",
        "z": "e43a27722b508115",
        "name": "",
        "func": "from OpenScan import add_wifi_network, check_hotspot_mode\n\nif check_hotspot_mode():\n    msg['mode'] = True\nelse:\n    msg['mode'] = False\n\nreturn msg",
        "outputs": 2,
        "x": 670,
        "y": 1100,
        "wires": [
            [
                "c994c779e4bad800",
                "36890eb99a2ca1cf"
            ],
            []
        ]
    },
    {
        "id": "434b04d8a65951ce",
        "type": "inject",
        "z": "e43a27722b508115",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 440,
        "y": 1140,
        "wires": [
            [
                "1eef47e0074545a9"
            ]
        ]
    },
    {
        "id": "9ec0ad9fd3687e9f",
        "type": "ui_toast",
        "z": "e43a27722b508115",
        "position": "bottom right",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Adding new Wifi",
        "name": "",
        "x": 670,
        "y": 1020,
        "wires": []
    },
    {
        "id": "36890eb99a2ca1cf",
        "type": "debug",
        "z": "e43a27722b508115",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 940,
        "wires": []
    },
    {
        "id": "4c7fa5b5b27b83a5",
        "type": "python3-function",
        "z": "a5557543ccff5889",
        "name": "create beta new",
        "func": "import json\nimport requests\nimport shutil\n\n#scope = 'main'\nscope = 'betaArdu'\n\nupdatepath = '/home/pi/OpenScan/tmp/'\nurl = 'https://raw.githubusercontent.com/OpenScanEu/OpenScan2/main/update/'\nupdatepath_temp = updatepath + 'update_temp.json'\nupdatepath_old = updatepath + 'update.json'\n\n\n## load update.json\nr = requests.get(url + 'update.json')\n\nif r.status_code != 200:\n    msg['status'] = 'download update.json failed'\n    return msg\n\nmsg = {}\nwith open(updatepath_temp, 'wb+') as file:\n    file.write(r.content)\nwith open(updatepath_temp, 'r') as file:\n    msg = json.load(file)\n\nmsg2 = msg.copy()\nif scope in msg:\n    del msg[scope]\n\nmsg[scope]={}\nmsg[scope]['1'] = {}\nmsg[scope]['1']['src'] = scope + '/fla.py'\nmsg[scope]['1']['dst'] = '/home/pi/OpenScan/files/fla.py'\n\nmsg[scope]['2'] = {}\nmsg[scope]['2']['src'] = scope + '/OpenScan.py'\nmsg[scope]['2']['dst'] = '/usr/lib/python3/dist-packages/OpenScan.py'\n\nmsg[scope]['3'] = {}\nmsg[scope]['3']['src'] = scope + '/config.txt'\nmsg[scope]['3']['dst'] = '/boot/config.txt'\n\nmsg[scope]['4'] = {}\nmsg[scope]['4']['src'] = scope + '/flows.json'\nmsg[scope]['4']['dst'] = '/home/pi/OpenScan/settings/.node-red/flows.json'\n\nmsg[scope]['5'] = {}\nmsg[scope]['5']['src'] = scope + '/settings.js'\nmsg[scope]['5']['dst'] = '/root/.node-red/settings.js'\n\n#msg[scope]['6'] = {}\n#msg[scope]['6']['src'] = 'files/logo.jpg'\n#msg[scope]['6']['dst'] = '/home/pi/OpenScan/files/logo.jpg'\n\nfor i in msg[scope]:\n    filepath = msg[scope][i]['dst']\n    filesize = os.path.getsize(filepath)\n    msg[scope][i]['filesize'] = filesize\n\nif os.path.isdir('/home/pi/OpenScan/tmp/update/'):\n    os.system('rm -r /home/pi/OpenScan/tmp/update')    \nos.makedirs('/home/pi/OpenScan/tmp/update/')\n\nwith open('/home/pi/OpenScan/tmp/update/update.json', 'w+') as f:\n    json.dump(msg, f, indent=4)\n\nfor i in msg[scope]:\n    if not os.path.isdir(os.path.dirname('/home/pi/OpenScan/tmp/update/' + msg[scope][i]['src'])):\n        os.makedirs(os.path.dirname('/home/pi/OpenScan/tmp/update/' + msg[scope][i]['src']))\n    shutil.copy(msg[scope][i]['dst'], '/home/pi/OpenScan/tmp/update/' + msg[scope][i]['src'])\n\nmsg['payload'] = 'created with scope: ' + scope\n\nreturn msg",
        "outputs": 1,
        "x": 260,
        "y": 140,
        "wires": [
            [
                "e23c514008cad1a1"
            ]
        ]
    },
    {
        "id": "80175eb8dc6ad009",
        "type": "inject",
        "z": "a5557543ccff5889",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 140,
        "wires": [
            [
                "4c7fa5b5b27b83a5"
            ]
        ]
    },
    {
        "id": "d7362e6e0ec7bdaa",
        "type": "inject",
        "z": "a5557543ccff5889",
        "name": "",
        "props": [
            {
                "p": "overwrite",
                "v": "true",
                "vt": "bool"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 220,
        "wires": [
            [
                "4ce127c61c3c5966",
                "beacc3dc5398fa79"
            ]
        ]
    },
    {
        "id": "4ce127c61c3c5966",
        "type": "python3-function",
        "z": "a5557543ccff5889",
        "name": "prepare image creation",
        "func": "import os\n\n#factory reset, reset wpa, create wpa in boot, rm files\n#should be done before creating a new raspbian image\n\nbasepath = '/home/pi/OpenScan/'\n\n#remove files\n\ndir = basepath + 'scans/'\n\nfor i in ['scans/','tmp/']:\n    os.system('rm -r ' + basepath + i)\n    os.mkdir(basepath + i)\n\n#delete wifi\ntemp_dir = '/home/pi/OpenScan/tmp/wpa_empty.log'\nwpa_dir = '/etc/wpa_supplicant/wpa_supplicant.conf'\n\nwith open(temp_dir, 'w+') as file:\n    file.write('update_config=1\\nctrl_interface=DIR=/var/run/wpa_supplicant\\ncountry=de\\n\\n')\nos.system('mv '+ temp_dir + ' ' + wpa_dir)\nos.system('wpa_cli -i wlan0 reconfigure')\n\n#create new wpa_supplicant.conf\nwith open('/boot/wpa_supplicant.conf','w+') as file:\n    file.write('country=de\\nupdate_config=1\\nctrl_interface=/var/run/wpa_supplicant\\n\\nnetwork={\\n scan_ssid=1\\n ssid=\"wlan name\"\\n psk=\"xxxx\"\\n}')\nos.system(\"chmod a+rwx /boot/wpa_supplicant.conf\")\n\n\n#rm tmp dir\n\n\n#stop photos:\nos.system('systemctl stop flask')\nos.system('rm -r ' + basepath + 'tmp')\nos.system('mkdir ' + basepath + 'tmp')\n\nos.system('systemctl stop nodered')\n\n#reset factory\n\n",
        "outputs": 1,
        "x": 290,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "beacc3dc5398fa79",
        "type": "link out",
        "z": "a5557543ccff5889",
        "name": "",
        "mode": "link",
        "links": [
            "38783aea9cc317a6"
        ],
        "x": 195,
        "y": 260,
        "wires": []
    },
    {
        "id": "e23c514008cad1a1",
        "type": "debug",
        "z": "a5557543ccff5889",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 140,
        "wires": []
    },
    {
        "id": "b0629875a30ae1d7",
        "type": "python3-function",
        "z": "a5557543ccff5889",
        "name": "get update",
        "func": "import json\nimport requests\nfrom OpenScan import load_str\n\nif not msg['payload']:\n    msg['status'] = '--READY--'\n    return msg\n\nupdatepath = '/home/pi/OpenScan/updates/'\nurl = 'https://raw.githubusercontent.com/OpenScanEu/OpenScan2/main/update/'\nupdatepath_temp = updatepath + 'update_temp.json'\nupdatepath_old = updatepath + 'update.json'\n\nr = requests.get(url + 'update.json')\n\nif r.status_code != 200:\n    msg['status'] = 'no internet connection'\n    return msg\n\nwith open(updatepath_temp, 'wb+') as file:\n    file.write(r.content)\nwith open(updatepath_temp, 'r') as file:\n    msg = json.load(file)\n\nmsg['status'] = 'checking updates'\n\nreturn msg, msg",
        "outputs": 2,
        "x": 390,
        "y": 540,
        "wires": [
            [
                "1bbe2d769f42c313"
            ],
            [
                "fefe45404bdb19c4"
            ]
        ]
    },
    {
        "id": "c7b6d05a62172432",
        "type": "ui_text",
        "z": "a5557543ccff5889",
        "group": "ddbd496e.93a288",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Status:",
        "format": "{{msg.status}}",
        "layout": "row-spread",
        "className": "",
        "x": 210,
        "y": 400,
        "wires": []
    },
    {
        "id": "fefe45404bdb19c4",
        "type": "python3-function",
        "z": "a5557543ccff5889",
        "name": "check files",
        "func": "import json\nimport requests\nimport shutil\nfrom OpenScan import load_str\n\nscope = load_str('update_type')\nmsg['scope'] = scope\n\nupdatepath = '/home/pi/OpenScan/updates/'\nurl = 'https://raw.githubusercontent.com/OpenScanEu/OpenScan2/main/update/'\nupdatepath_old = updatepath + 'update.json'\n\ncounter = 0\nfor i in msg[scope]:\n    filepath = msg[scope][i]['dst']\n    temp = updatepath + os.path.basename(filepath)\n    if os.path.isfile(temp):\n        filesize = os.path.getsize(temp)\n        msg[scope][i]['filesize2'] = filesize\n        if filesize == msg[scope][i]['filesize']:\n            msg[scope][i]['update'] = False\n            continue\n    msg[scope][i]['update'] = True\n\n    counter += 1\n\nif counter == 0:\n    msg['status'] = 'No new update available'\nelse:\n    msg['status'] = 'New update available'\n    msg['topic'] = msg['status']\n    msg['payload'] = 'Install & reboot now?'\n\nmsg['counter'] = counter\n\nreturn msg\n",
        "outputs": 1,
        "x": 550,
        "y": 560,
        "wires": [
            [
                "1bbe2d769f42c313",
                "ae92a328af306ebb"
            ]
        ]
    },
    {
        "id": "d0104e0163745993",
        "type": "link in",
        "z": "a5557543ccff5889",
        "name": "",
        "links": [
            "960912e90ba5b5bc",
            "50eeb3e362f9027f"
        ],
        "x": 115,
        "y": 440,
        "wires": [
            [
                "ec30638407332e43",
                "38cbf7965d1c1834",
                "49f1ecb29a3f84f4"
            ]
        ]
    },
    {
        "id": "ec30638407332e43",
        "type": "function",
        "z": "a5557543ccff5889",
        "name": "loadS",
        "func": "var file = 'update_type'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst data = fs.readFileSync(filepath+file, 'utf8');\nmsg.payload = String(data.replace(/(\\r\\n|\\n|\\r)/gm,\"\"));\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 480,
        "wires": [
            [
                "2852023f3aa8db10"
            ]
        ]
    },
    {
        "id": "2852023f3aa8db10",
        "type": "ui_dropdown",
        "z": "a5557543ccff5889",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Select option",
        "group": "ddbd496e.93a288",
        "order": 5,
        "width": 2,
        "height": 1,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "stable",
                "value": "main",
                "type": "str"
            },
            {
                "label": "beta",
                "value": "beta",
                "type": "str"
            },
            {
                "label": "betaArdu",
                "value": "betaArdu",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 340,
        "y": 480,
        "wires": [
            [
                "1e10b387ee30c486"
            ]
        ]
    },
    {
        "id": "1e10b387ee30c486",
        "type": "function",
        "z": "a5557543ccff5889",
        "name": "write",
        "func": "var file = 'update_type'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst content = String(msg.payload)\nfs.writeFile(filepath + file, content, err => {\n  if (err) {\n    return\n  }\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "274129c51b0b87ef",
        "type": "ui_text",
        "z": "a5557543ccff5889",
        "group": "ddbd496e.93a288",
        "order": 4,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "Updatetype: ",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 610,
        "y": 480,
        "wires": []
    },
    {
        "id": "51cd8c8643e6b46a",
        "type": "ui_switch",
        "z": "a5557543ccff5889",
        "name": "",
        "label": "Auto-check update availability",
        "tooltip": "",
        "group": "ddbd496e.93a288",
        "order": 6,
        "width": 6,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 410,
        "y": 440,
        "wires": [
            [
                "1ab4c6b4b232a022"
            ]
        ]
    },
    {
        "id": "38cbf7965d1c1834",
        "type": "function",
        "z": "a5557543ccff5889",
        "name": "loadB",
        "func": "var file = 'update_auto'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\ndata = fs.readFileSync(filepath+file, 'utf8');\nif(data === '1' || data === 'True' || data === 'true'){\n    data = true;\n}\nelse{\n    data = false;\n}\nmsg.payload = data;\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 440,
        "wires": [
            [
                "51cd8c8643e6b46a"
            ]
        ]
    },
    {
        "id": "1ab4c6b4b232a022",
        "type": "function",
        "z": "a5557543ccff5889",
        "name": "write",
        "func": "var file = 'update_auto'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\nconst content = String(msg.payload)\nfs.writeFile(filepath + file, content, err => {\n  if (err) {\n    return\n  }\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "ae92a328af306ebb",
        "type": "ui_toast",
        "z": "a5557543ccff5889",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "NO",
        "cancel": "YES",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 710,
        "y": 560,
        "wires": [
            [
                "2de63e8e3ae5fb0c",
                "929281fef53e09f8"
            ]
        ]
    },
    {
        "id": "cbd0afc4aa7b302a",
        "type": "link in",
        "z": "a5557543ccff5889",
        "name": "update status",
        "links": [
            "1bbe2d769f42c313",
            "42061b28cff81f99"
        ],
        "x": 115,
        "y": 400,
        "wires": [
            [
                "c7b6d05a62172432",
                "c94623ddd9d95f78"
            ]
        ]
    },
    {
        "id": "1bbe2d769f42c313",
        "type": "link out",
        "z": "a5557543ccff5889",
        "name": "",
        "mode": "link",
        "links": [
            "cbd0afc4aa7b302a"
        ],
        "x": 665,
        "y": 520,
        "wires": []
    },
    {
        "id": "7cf60615d93e696b",
        "type": "ui_button",
        "z": "a5557543ccff5889",
        "name": "",
        "group": "ddbd496e.93a288",
        "order": 7,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Check Updates",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 180,
        "y": 560,
        "wires": [
            [
                "b0629875a30ae1d7"
            ]
        ]
    },
    {
        "id": "2de63e8e3ae5fb0c",
        "type": "python3-function",
        "z": "a5557543ccff5889",
        "name": "download files",
        "func": "import json\nimport requests\nimport shutil\nfrom OpenScan import load_str, save\n\n\nscope = msg['scope']\n\nupdatepath = '/home/pi/OpenScan/updates/'\nurl = 'https://raw.githubusercontent.com/OpenScanEu/OpenScan2/main/update/'\n\nif msg['payload'] != 'YES':\n    return\n\ncounter = 0\n\nfor i in msg[scope]:\n    if msg[scope][i]['update'] == False:\n        continue\n    \n    filepath = msg[scope][i]['dst']\n    temp = updatepath + os.path.basename(filepath)\n    \n    r = requests.get(url + msg[scope][i]['src'])\n    if r.status_code != 200:\n        msg['status'] = 'downloading ' + msg[scope][i]['src'] + ' failed'\n        return msg\n    with open(temp, 'wb+') as file:\n        file.write(r.content)\n    shutil.copy(temp, msg[scope][i]['dst'])\n    \n    if msg[scope][i]['dst'] == '/boot/config.txt':\n        save('camera','')\n    \n    counter += 1\n\nmsg['status'] = 'Installed ' + str(counter) + ' of ' + str(msg['counter']) + ' - restarting ...'\n\nif counter == msg['counter']:\n    updatepath_temp = updatepath + 'update_temp.json'\n    updatepath_old = updatepath + 'update.json'\n    shutil.move(updatepath_temp, updatepath_old)\n\nreturn msg\n",
        "outputs": 1,
        "x": 880,
        "y": 560,
        "wires": [
            [
                "42061b28cff81f99",
                "fe3a855fee9e28c6"
            ]
        ]
    },
    {
        "id": "929281fef53e09f8",
        "type": "function",
        "z": "a5557543ccff5889",
        "name": "msg",
        "func": "if (msg.payload == 'YES'){\n    msg.status = 'Installing updates'\n    return msg}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 520,
        "wires": [
            [
                "42061b28cff81f99"
            ]
        ]
    },
    {
        "id": "42061b28cff81f99",
        "type": "link out",
        "z": "a5557543ccff5889",
        "name": "",
        "mode": "link",
        "links": [
            "cbd0afc4aa7b302a"
        ],
        "x": 995,
        "y": 520,
        "wires": []
    },
    {
        "id": "49f1ecb29a3f84f4",
        "type": "function",
        "z": "a5557543ccff5889",
        "name": "loadB",
        "func": "var file = 'update_auto'\nlet fs = global.get('fs');\nvar filepath = '/home/pi/OpenScan/settings/';\ndata = fs.readFileSync(filepath+file, 'utf8');\nif(data === '1' || data === 'True' || data === 'true'){\n    data = true;\n}\nelse{\n    data = false;\n}\n\nmsg.payload = data\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 520,
        "wires": [
            [
                "b0629875a30ae1d7"
            ]
        ]
    },
    {
        "id": "fe3a855fee9e28c6",
        "type": "link out",
        "z": "a5557543ccff5889",
        "name": "",
        "mode": "link",
        "links": [
            "9bb0adbd716ce347",
            "01c882fcc51b349c"
        ],
        "x": 995,
        "y": 560,
        "wires": []
    },
    {
        "id": "5e7d5e4335d37794",
        "type": "link in",
        "z": "a5557543ccff5889",
        "name": "",
        "links": [
            "960912e90ba5b5bc",
            "50eeb3e362f9027f"
        ],
        "x": 95,
        "y": 700,
        "wires": [
            [
                "2bb5fe78e09fec8a"
            ]
        ]
    },
    {
        "id": "2bb5fe78e09fec8a",
        "type": "python3-function",
        "z": "a5557543ccff5889",
        "name": "msg",
        "func": "\nfrom subprocess import getoutput\nimport os\n\nmsg['os'] = getoutput(\"cat /etc/os-release | grep -i 'PRETTY_NAME'\")[13:-1]\nmsg['device'] = getoutput(\"cat /proc/device-tree/model\")\nmsg['flask'] = getoutput(\"systemctl status flask |grep -i 'Active:'\").split(' ')[6]\nmsg['osdate'] = getoutput(\"vcgencmd version\").split('\\n')[0]\nmsg['temp'] = getoutput(\"vcgencmd measure_temp\").split('=')[1]\ncpu_total = getoutput(\"free -m | head -n2 | tail -n1 |awk '{print $2}'\")\ncpu_used = getoutput(\"free -m | head -n2 | tail -n1 |awk '{print $3}'\")\nswap_total = getoutput(\"free -m | head -n3 | tail -n1 |awk '{print $2}'\")\nswap_used = getoutput(\"free -m | head -n3 | tail -n1 |awk '{print $3}'\")\ndiskspace_used = getoutput(\"df -h / | tail -n1 |awk '{print $3}'\")\ndiskspace_total = getoutput(\"df -h / | tail -n1 |awk '{print $2}'\")\n\nmsg['cpu'] = cpu_used + '/' + cpu_total + 'MB'\nmsg['swap'] = swap_used + '/' + swap_total + 'MB'\nmsg['diskspace'] =diskspace_used + '/' + diskspace_total\n\nif msg['flask'] == 'inactive':\n    os.system('systemctl restart flask')\n\nreturn msg",
        "outputs": 1,
        "x": 210,
        "y": 700,
        "wires": [
            [
                "dbc77052ac950624",
                "d97c3068ef5fef96",
                "73a3b828f862312b",
                "901e31453b2bdff8",
                "f983854748ee4763",
                "5347c7c517f5e8c7",
                "3a5016f7003cd72c",
                "6d720c4a4ecd9475",
                "6438b7d060a70d81"
            ]
        ]
    },
    {
        "id": "d97c3068ef5fef96",
        "type": "ui_text",
        "z": "a5557543ccff5889",
        "group": "3ce32450.e0cffc",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "OS:",
        "format": "{{msg.os}}",
        "layout": "row-spread",
        "className": "",
        "x": 490,
        "y": 740,
        "wires": []
    },
    {
        "id": "73a3b828f862312b",
        "type": "ui_text",
        "z": "a5557543ccff5889",
        "group": "3ce32450.e0cffc",
        "order": 8,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Flask:",
        "format": "{{msg.flask}}",
        "layout": "row-spread",
        "className": "",
        "x": 490,
        "y": 780,
        "wires": []
    },
    {
        "id": "dbc77052ac950624",
        "type": "ui_text",
        "z": "a5557543ccff5889",
        "group": "3ce32450.e0cffc",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Device:",
        "format": "{{msg.device}}",
        "layout": "row-spread",
        "className": "",
        "x": 500,
        "y": 700,
        "wires": []
    },
    {
        "id": "3f42560297fe6978",
        "type": "ui_template",
        "z": "a5557543ccff5889",
        "group": "3ce32450.e0cffc",
        "name": "Download LOG",
        "order": 9,
        "width": 6,
        "height": 1,
        "format": "<md-button style=\"background-color:default ; color:default;width:100%; height:100%;\"   target=\"_blank\" ng-href='tmp/log.txt'>\n <div class=\"center\" style=\"position: relative; top: 30%;\">Download error log\n</div></md-button>\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 180,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "c94623ddd9d95f78",
        "type": "python3-function",
        "z": "a5557543ccff5889",
        "name": "get update",
        "func": "from OpenScan import save\n\nif msg['status'] == \"No new update available\":\n    save('updateable',False)\nelif msg['status'] == \"New update available\":\n    save('updateable',True)\n",
        "outputs": 1,
        "x": 210,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "39a502b38837273d",
        "type": "link in",
        "z": "a5557543ccff5889",
        "name": "",
        "links": [
            "1e7457ea9c2c5e09"
        ],
        "x": 245,
        "y": 600,
        "wires": [
            [
                "b0629875a30ae1d7"
            ]
        ]
    },
    {
        "id": "901e31453b2bdff8",
        "type": "delay",
        "z": "a5557543ccff5889",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 220,
        "y": 740,
        "wires": [
            [
                "2bb5fe78e09fec8a"
            ]
        ]
    },
    {
        "id": "f983854748ee4763",
        "type": "ui_text",
        "z": "a5557543ccff5889",
        "group": "3ce32450.e0cffc",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "",
        "format": "{{msg.osdate}}",
        "layout": "row-spread",
        "className": "",
        "x": 490,
        "y": 820,
        "wires": []
    },
    {
        "id": "5347c7c517f5e8c7",
        "type": "ui_text",
        "z": "a5557543ccff5889",
        "group": "3ce32450.e0cffc",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "CPU temp:",
        "format": "{{msg.temp}}",
        "layout": "row-spread",
        "className": "",
        "x": 510,
        "y": 860,
        "wires": []
    },
    {
        "id": "3a5016f7003cd72c",
        "type": "ui_text",
        "z": "a5557543ccff5889",
        "group": "3ce32450.e0cffc",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "CPU memory:",
        "format": "{{msg.cpu}}",
        "layout": "row-spread",
        "className": "",
        "x": 520,
        "y": 900,
        "wires": []
    },
    {
        "id": "6d720c4a4ecd9475",
        "type": "ui_text",
        "z": "a5557543ccff5889",
        "group": "3ce32450.e0cffc",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Swap memory:",
        "format": "{{msg.swap}}",
        "layout": "row-spread",
        "className": "",
        "x": 520,
        "y": 940,
        "wires": []
    },
    {
        "id": "6438b7d060a70d81",
        "type": "ui_text",
        "z": "a5557543ccff5889",
        "group": "3ce32450.e0cffc",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Diskspace:",
        "format": "{{msg.diskspace}}",
        "layout": "row-spread",
        "className": "",
        "x": 510,
        "y": 980,
        "wires": []
    },
    {
        "id": "8d012912f302be85",
        "type": "ui_button",
        "z": "a5557543ccff5889",
        "name": "",
        "group": "ddbd496e.93a288",
        "order": 8,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Show Details/Changelog",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 210,
        "y": 640,
        "wires": [
            [
                "5242607a723cc628"
            ]
        ]
    },
    {
        "id": "5242607a723cc628",
        "type": "python3-function",
        "z": "a5557543ccff5889",
        "name": "Changelog",
        "func": "import requests\n\ntempfile = '/home/pi/OpenScan/tmp/changelog'\n\nurl = 'https://raw.githubusercontent.com/OpenScan-org/OpenScan-Doc/main/docs/changelog.md'\nr = requests.get(url, allow_redirects=False)\n\nwith open(tempfile,'wb') as file:\n    file.write(r.content)\n    \nwith open(tempfile, 'r') as file:\n    text = file.read()\n    \ntext = text.replace('\\n','<br>').replace('*', '&emsp; - ')\nmsg['payload'] = text\n\nreturn msg",
        "outputs": 1,
        "x": 430,
        "y": 640,
        "wires": [
            [
                "573722197b15bf84"
            ]
        ]
    },
    {
        "id": "573722197b15bf84",
        "type": "ui_toast",
        "z": "a5557543ccff5889",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "className": "",
        "topic": "",
        "name": "",
        "x": 610,
        "y": 640,
        "wires": [
            []
        ]
    }
]